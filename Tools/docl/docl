#! /usr/bin/env lua

--- docl
-- Document and test your Lua scripts with 'docl'!
--
---- Usage
-- 'docl [-h] [-o OUTPUTDIR] [--lift LIFTFILE] [--common-prefix COMMONPREFIX] FILES'
--
-- This will create the dir OUTPUTDIR (default is 'docs/'), an 'index.html' file
-- and for every supplied file a file '/path.to.file.html' .
--
-- For example the documentation of 'src/plugins/vector.lua' would be placed
-- at '/src.plugins.vector.lua.html'.
--
---- Options
--- -h
--    show this help
--
--- --lift LIFTFILE
--    "lift" a specific file. eg. show its documentation on the index page.
--
--- -o OUTPUTDIR
--    specify a directory for the html documentation files.
--    default is 'docs/'
--
--- -common-prefix COMMONPREFIX
--    normally docl names lua files relative to the pwd, but
--    if all lua files to be documented are inside another directory
--    you can pass a COMMONPREFIX to be stripped of from those files.
--
--    For example if you are at ~/ and you call
--
--      'docl /my-programs/my-app/*.lua'
--
--    then docl will name the output files my-programs.lua.my-app.*.lua.html
--    if you want them to be called only *.lua.html supply a common prefix
--
--      'docl --common-prefix /my-programs/my-app /my-programs/lua/my-app/*.lua'
--
---- Examples
-- Here are some usage examples:
--
-- './docl *.lua'
--
-- document all .lua files in this directory
--
-- './docl *.lua */*.lua'
--
-- document all .lua files in this directory and all subdirectories
-- (but not recursive!)
--
-- './docl -o doc $((find -name "*.lua"))'
--
-- recursively document all files ending in .lua and put output into doc/
--
-- './docl --common-prefix /my-programs/my-app/src -o /my-programs/my-app/doc $((find /my-programs/my-app/src/ -name "*.lua"))'
--
-- recursively document all files inside /my-programs/my-app/src
-- ending in .lua and put output into /my-programs/my-app/doc/

help = [[
DocL
  Document your Lua Scripts with DocL!

USAGE
  ./docl [-h] [-o OUTPUTDIR] [-lift LIFTFILE] FILES

  This will create the dir OUTPUTDIR (default is 'docs/') and for every
  supplied file a file '/path.to.file.html' .

  For more information please look at the docl generated HTML Documentation
  at html-doc/index.html .

OPTIONS
  -h  show this help
]]

if #arg == 0 or arg[1] == "-h" then
  print(help)

else
  origdir = io.popen("pwd"):read() .. "/"
  docldir, file = arg[0]:match'(.*/)(.*)'
  package.path = docldir .. "?.lua;" .. package.path
  outputdir = origdir .. "docs/"

  local doc = require "doc"
  local commonprefix = ""
  
  -- TODO: Make this a parameter!
  local ignorepath = true

  local files, kwarg, err = {}, nil, false
  for i,word in ipairs(arg) do
    if kwarg then
      if kwarg == "o" then
        outputdir = word
      elseif kwarg == "-common-prefix" then
        commonprefix = word
      elseif kwarg == "-lift" then
        liftfile = word
      end
      kwarg = nil

    else
      if word:sub(1,1) == "-" then
        kwarg = word:sub(2)
        if kwarg == "h" then
          kwarg = nil

        elseif kwarg == "o" then
        elseif kwarg == "-common-prefix" then
        elseif kwarg == "-lift" then


        else
          err = true
          print("ERROR: unkown argument -" .. kwarg)
          print()
          print("Please help yourself by typing 'docl.lua -h'")
          break
        end

      elseif file:sub(1, #commonprefix) == commonprefix then
        files[#files+1] = word
      else
        err = true
        print("ERROR: the file '" .. file  .. "' does not match the commonprefix '" .. commonprefix .. "'")
      end
    end
  end


  if not err then
    os.execute("mkdir -p " .. outputdir)
    os.execute("cp -n " .. docldir .. "style.css " .. outputdir .. "/")

    local t = {}
    for i,file in ipairs(files) do

      print("gen_file " .. file)
      sections = doc.parse_file(file)
      result = doc.gen_file(sections)

      if file == liftfile then
        theliftfile = {sections=sections, result=result}

      elseif result ~= false then
      	
      	  local outPath = file
      	  if ignorepath ==  true then
      	  	local idx = file:len()-file:reverse():find("/")+2
      	  	outPath = file:sub(idx, file:len())
      	  	-- print("File is now: " .. outPath)
      	  end
      	
          local output = outPath:sub(#commonprefix == 0 and 0 or #commonprefix+2):gsub("/", ".")
          io.open(outputdir .. "/" .. output .. ".html", "w")
            :write(result)
            :close()

          table.insert(t, "<li><a href='" .. output .. ".html'>" .. output .. "</a><div style='margin: 0 1em 1em; font-size: .9em;'>"
              .. sections[1].first.first .. "</div></li>")

      else
        print("  NO DOCS FOR " .. file)
      end
    end


    local content, navigation = "", ""

    if theliftfile then
      for i, section in ipairs(theliftfile.sections) do
          local description = theliftfile.sections[i].first or {}
          local title = description.first

          local function content_template(section)
              return doc.wrap(
                  table.concat(doc.map(section, function(def)
                      return doc.def_template(def.first, "<p>"..table.concat(def, "\n"):gsub("\n\n", "</p><p>").."</p>" ) end
                  ))
              , "dl")
          end
          local function nav_template(section)
              return doc.wraps(
                  doc.map(section, function(x)
                      return "<a href=#" .. x.first:sub(1, (x.first:find(" ") or 1)-1) .. ">" .. x.first .. "</a>"
                  end)
              , "li")
          end

          content = content
              .. doc.wrap(title, i==1 and "h1" or "h2")
              .. "<p>"..table.concat(description, "\n"):gsub("\n\n", "</p><p>").."<p>"
              .. content_template(section)

          navigation = navigation
              .. doc.wrap(title, i==1 and "h2" or "h3")
              .. nav_template(section)
      end
    end

    content = content .. doc.wrap(liftfile and "Subcontent" or "Content", "h2") .. table.concat(t)
    navigation = navigation .. doc.wrap(liftfile and "Subcontent" or "Content", "h2") .. table.concat(t)

    local file = io.open(outputdir .. "/index.html", "w")
    file:write( doc.file_template(content, navigation) )

    file:close()
  end
end
