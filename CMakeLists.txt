PROJECT(NEO)

## Let's use a reasonable modern version
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(CMAKE_HAS_SORT 1)
SET(CMAKE_MODULE_PATH
  ${NEO_SOURCE_DIR}/CMake
  ${NEO_SOURCE_DIR}/CMake/Packages
  ${CMAKE_MODULE_PATH}
)

## Options
option(USE_QT_RUNTIME ON)
option(USE_GNUSTEP_RUNTIME OFF)

## Disallow in-source builds
INCLUDE(OutOfSourceBuild)

## Look for SSE
INCLUDE(FindSSE)

## Documentation tool
FIND_PACKAGE(Doxygen 1.8.3)
FIND_PACKAGE(Dot REQUIRED)

IF("${FORCE_LOCAL_SDL}" STREQUAL "")
  SET(FORCE_LOCAL_SDL FALSE)
  SET(SDL2_FOUND FALSE)
ENDIF()

## SWIG for script bindings
FIND_PACKAGE(SWIG)

if(USE_JAVA)
    set(Java_FOUND FALSE)
    find_package(JNI)
    find_package(Java)
    include(UseJava)
endif()

IF(NOT ${FORCE_LOCAL_SDL})
	INCLUDE(FindSDL2)
ENDIF()

SET(PLANTUML_JAR ${CMAKE_BINARY_DIR}/plantuml.jar)
IF(NOT EXISTS ${PLANTUML_JAR})
    file(DOWNLOAD http://downloads.sourceforge.net/project/plantuml/plantuml.jar ${PLANTUML_JAR})
ENDIF()

## Install needed tools in Windows
IF(WIN32)
	set(SWIG_EXECUTABLE ${CMAKE_BINARY_DIR}/swigwin-3.0.8/swig.exe)
	IF(NOT SWIG_FOUND AND NOT EXISTS ${SWIG_EXECUTABLE})
      set(SWIG_PACKAGE ${CMAKE_BINARY_DIR}/swig.zip)
      file(DOWNLOAD http://downloads.sourceforge.net/project/swig/swigwin/swigwin-3.0.8/swigwin-3.0.8.zip ${SWIG_PACKAGE} SHOW_PROGRESS)

      execute_process(COMMAND
              ${CMAKE_COMMAND} -E tar "xf" ${SWIG_PACKAGE} --format=zip)
    ENDIF()

    set(DOXYGEN_EXECUTABLE ${CMAKE_BINARY_DIR}/doxygen.exe)
    IF(NOT DOXYGEN_FOUND AND NOT EXISTS ${DOXYGEN_EXECUTABLE})
      set(DOXYGEN_PACKAGE ${CMAKE_BINARY_DIR}/doxygen.zip)
      file(DOWNLOAD ftp://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.11.windows.bin.zip ${DOXYGEN_PACKAGE} SHOW_PROGRESS)

      execute_process(COMMAND
              ${CMAKE_COMMAND} -E tar "xf" ${DOXYGEN_PACKAGE} --format=zip)
    ENDIF()

    set(SWIG_FOUND TRUE)
    set(DOXYGEN_FOUND TRUE)
ENDIF()

find_package(CSharp)
find_package(Mono)
include(UseCSharp)
include(UseMono)

## Set version and info
SET(NEO_MAJOR_VERSION 0)
SET(NEO_MINOR_VERSION 5)
SET(NEO_PATCH_VERSION 0)

IF("${NEO_VERSION_STRING}" STREQUAL "")
  SET(NEO_VERSION_STRING "\"v0.5\"")
  SET(IS_DAILY_BUILD FALSE)
ELSE()
  SET(IS_DAILY_BUILD TRUE)
ENDIF()

IF("${NO_DOCUMENTATION}" STREQUAL "")
  SET(NO_DOCUMENTATION FALSE)
ENDIF()

IF("${ANDROID}" STREQUAL "")
  SET(ANDROID FALSE)
ENDIF()

IF("${EMSCRIPTEN}" STREQUAL "")
  SET(EMSCRIPTEN FALSE)
ENDIF()

MESSAGE(STATUS "Git version: " ${NEO_VERSION_STRING})

SET(NEO_PACKAGE "Neo")
SET(NEO_VENDOR "Yannick Pflanzer")
SET(NEO_VERSION "${NEO_MAJOR_VERSION}.${NEO_MINOR_VERSION}.${NEO_PATCH_VERSION}")
SET(NEO_COPYRIGHT "Copyright (c) 2014, ${NEO_VENDOR}.")

MESSAGE(STATUS "${NEO_PACKAGE} ${NEO_VERSION}")

## Packaging
IF(NOT ${IS_DAILY_BUILD})
    SET(CPACK_PACKAGE_NAME "${NEO_PACKAGE}")
ELSE()
    SET(CPACK_PACKAGE_NAME "${NEO_PACKAGE}-git")
ENDIF()

SET(CPACK_PACKAGE_VENDOR "${NEO_VENDOR}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Neo game engine and editor.")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/Data/neo-icon.png")
SET(CPACK_PACKAGE_VERSION_MAJOR "${NEO_MAJOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_MINOR "${NEO_MINOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_PATCH "${NEO_PATCH_VERSION}")

## Set install path
SET(NEO_INSTALL_DIR Neo)

## Set up binary output path
SET(NEO_BINARY_OUTPUT ${CMAKE_BINARY_DIR}/BinaryOutput)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${NEO_BINARY_OUTPUT})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${NEO_BINARY_OUTPUT})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${NEO_BINARY_OUTPUT})

## Detect OpenMP
FIND_PACKAGE(OpenMP)
IF(OPENMP_FOUND AND NOT NO_OPENMP)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  ADD_DEFINITIONS(-DENABLE_OPENMP)
ENDIF()

## Config for SDL2
IF(USE_GLES)
  MESSAGE("-- Using OpenGL ES instead of plain OpenGL")
  SET(VIDEO_OPENGLES ON)
  set(VIDEO_OPENGL OFF)
ELSE()
  set(VIDEO_OPENGLES OFF)
  set(VIDEO_OPENGL ON)
ENDIF(USE_GLES)

## Set build flags
IF(WIN32)
  FIND_PACKAGE(OpenGL REQUIRED)

  LINK_DIRECTORIES("$ENV{DXSDK_DIR}/Lib/$ENV{PROCESSOR_ARCHITECTURE}")
  SET(SDL_BUILDING_LIBRARY ON)
  SET(USE_NETWORKING FALSE)

  SET(DIRENT_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/dirent/include)

  if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    # using GCC
    # LuaJIT does not build with the current MinGW
    # OPTION(STANDARD_LUA TRUE)

    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEO_BUILD_FLAGS} -O2 -DWIN32 -I\"$ENV{DXSDK_DIR}/Include\"")
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D__Debug__ -I\"$ENV{DXSDK_DIR}/Include\"")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEO_BUILD_FLAGS} -O2 -DWIN32 -I\"$ENV{DXSDK_DIR}/Include\" -std=c++11 -D_USE_MATH_DEFINES")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__Debug__ -I\"$ENV{DXSDK_DIR}/Include\" -std=c++11 -D_USE_MATH_DEFINES")

    SET(CMAKE_SHARED_LINKER_FLAGS "-lcomctl32 -lkernel32 -Wl,--subsystem,windows,--as-needed,--allow-multiple-definition -static -static-libstdc++ -static-libgcc -std=c++11")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--allow-multiple-definition -static -static-libstdc++ -static-libgcc")
    SET(CPACK_STRIP_FILES ON)

  elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
    # using Visual Studio C++
    IF(SSE2_TRUE)
		SET(SSE_FLAG /arch:SSE2)
	ELSEIF(SSE_TRUE)
		SET(SSE_FLAG /arch:SSE)
    ENDIF()

	## Remove build type from output path
	FOREACH(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
	    STRING(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
	    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${NEO_BINARY_OUTPUT})
	    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${NEO_BINARY_OUTPUT})
	    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${NEO_BINARY_OUTPUT})
	ENDFOREACH(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)

    SET(flag_var "/MD")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEO_BUILD_FLAGS} /EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
    SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /W1 /O2 /Ot /MD /DNDEBUG /fp:fast ${SSE_FLAG}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEO_BUILD_FLAGS} /EHsc /nologo /GR /FC /DWIN32 /D_MBCS")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7 /W4 /Od /MDd /D_DEBUG /D__Debug__")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /W1 /O2 /Ot /MD /DNDEBUG /fp:fast ${SSE_FLAG}")
  endif()

  SET(FREETYPE_LIBRARY "freetype")
  SET(OPENAL_LIBRARY "OpenAL32")
  SET(ZLIB_LIBRARY "zlib")
  SET(NEO_BUILD_FLAGS "")

  ## NSIS does not like png's
  SET(CPACK_PACKAGE_ICON "")
  SET(CPACK_NSIS_MENU_LINKS "Neo/NeoPlayer2.exe" "Neo Editor"
          "Neo/ProjectManager.exe" "Neo Project Manager"
          "Neo/docs/SDK/html/index.html" "Neo Documentation")
  SET( CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)

  #SET(CPACK_NSIS_CREATE_ICONS "CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\NeoEditor.lnk' '\$INSTDIR\\\\Neo\\\\NeoPlayer2.exe'
#								CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\ProjectManager.lnk' '\$INSTDIR\\\\Neo\\\\ProjectManager.exe'
#								CreateShortCut '\$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\NeoStore.lnk' '\$INSTDIR\\\\Neo\\\\NeoStore.exe'")

  SET(CPACK_GENERATOR "NSIS;ZIP")
ENDIF(WIN32)

IF(APPLE)
  FIND_PACKAGE(OpenGL REQUIRED)
  FIND_LIBRARY(FREETYPE_LIBRARY freetype PATHS "${NEO_SOURCE_DIR}/3rdparty/freetype/osx" NO_DEFAULT_PATH)
  FIND_LIBRARY(ZLIB_LIBRARY zlib PATHS "${NEO_SOURCE_DIR}/3rdparty/zlib/osx" NO_DEFAULT_PATH)
  FIND_LIBRARY(OPENAL_LIBRARY OpenAL)

  FIND_LIBRARY(APPLE_CORE_FOUNDATION CoreFoundation)
  if (NOT APPLE_CORE_FOUNDATION)
    MESSAGE(FATAL_ERROR "Failed to find CoreFoundation framework.")
  endif()

  FIND_LIBRARY(APPLE_CORE_GRAPHICS CoreGraphics)
  if (NOT APPLE_CORE_GRAPHICS)
    MESSAGE(FATAL_ERROR "Failed to find CoreGraphics framework")
  endif()

  FIND_LIBRARY(APPLE_APP_KIT AppKit)
  if (NOT APPLE_APP_KIT)
    MESSAGE(FATAR_ERROR "Failed to find AppKit framework")
  endif()

  FIND_LIBRARY(APPLE_FOUNDATION Foundation)
  if (NOT APPLE_FOUNDATION)
    MESSAGE(FATAL_ERROR "Failed to find Foundation framework")
  endif()

  # there is probably a better way to do this
  SET(FLTK_DEPENDENCIES "-framework CoreFoundation -framework CoreGraphics -framework AppKit -framework Foundation")

  SET(NEO_BUILD_FLAGS -DOSX)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEO_BUILD_FLAGS}")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEO_BUILD_FLAGS}" -std=c++11)
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__Debug__" -std=c++11)
  SET(CMAKE_SHARED_LINKER_FLAGS "-Wl")
ENDIF(APPLE)

IF(UNIX AND NOT APPLE AND NOT ANDROID AND NOT EMSCRIPTEN)

  SET(LINUX TRUE)
  IF(USE_GLES)
    FIND_PACKAGE(OpenGLES REQUIRED)
    FIND_PACKAGE(OpenGLES2 REQUIRED)
    ADD_DEFINITIONS(-DUSE_GLES)
  ELSE()
    FIND_PACKAGE(OpenGL REQUIRED)
  ENDIF(USE_GLES)

  SET(FREETYPE_LIBRARY "freetype")
  SET(OPENAL_LIBRARY "openal")
  SET(ZLIB_LIBRARY "zlib")

  SET(NEO_BUILD_FLAGS "")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEO_BUILD_FLAGS} -O3 -fPIC -DLINUX -pthread -ftls-model=global-dynamic")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -D__Debug__ -pthread -Og -ftls-model=global-dynamic")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEO_BUILD_FLAGS} -O3 -fPIC -DLINUX -pthread -std=c++11 -Wno-c++11-narrowing -ftls-model=global-dynamic")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -D__Debug__ -pthread -std=c++11 -Og -Wno-c++11-narrowing -ftls-model=global-dynamic")
  SET(CMAKE_SHARED_LINKER_FLAGS "-ldl -Wl,--as-needed,--allow-multiple-definition,--build-id,-rpath .")

  SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -lm -ldl -Wl,--allow-multiple-definition,-rpath . -ftls-model=global-dynamic")

  SET(CPACK_PACKAGE_CONTACT Yannick Pflanzer <yannick.pflanzer@scary-squid.de>)
  SET(CPACK_GENERATOR "STGZ;TGZ;DEB;RPM;")
  SET(CPACK_STRIP_FILES ON)

  # Don't use -fPIC for executables
  SET(DISABLE_PIC_EXECUTABLES ON)

ENDIF(UNIX AND NOT APPLE AND NOT ANDROID AND NOT EMSCRIPTEN)

IF(ANDROID)

  FIND_PACKAGE(OpenGLES REQUIRED)
  FIND_PACKAGE(OpenGLES2 REQUIRED)

  SET(FREETYPE_LIBRARY "freetype")
  SET(OPENAL_LIBRARY "openal")
  SET(ZLIB_LIBRARY "zlib")

  SET(STANDARD_LUA ON)
  SET(NEO_BUILD_FLAGS "")

  SET(ANDROID_LIBDIR ${OPENGLES2_INCLUDE_DIR}/../lib)

  SET(ARM_FLAGS "-march=armv6 -marm -mfloat-abi=softfp -mfpu=vfp")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEO_BUILD_FLAGS} -I${OPENGLES2_INCLUDE_DIR} -O3 ${ARM_FLAGS}")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -I${OPENGLES2_INCLUDE_DIR} -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEO_BUILD_FLAGS} ${ARM_FLAGS} -O3 -std=c++11 -fexceptions -fno-rtti -nostdlib -I${OPENGLES2_INCLUDE_DIR} -I${ANDROID_NDK_ROOT}/sources/cxx-stl/stlport/stlport")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -I${OPENGLES2_INCLUDE_DIR} -std=c++11 -D__Debug__")

  SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -L${OPENGLES2_INCLUDE_DIR}/../lib -L${LIBRARY_OUTPUT_PATH_ROOT}/libs/armeabi-v7a" )
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -L${OPENGLES2_INCLUDE_DIR}/../lib -L${LIBRARY_OUTPUT_PATH_ROOT}/libs/armeabi-v7a")

  SET(ANDROID_USE_STLPORT TRUE)
  SET(LIBRARY_OUTPUT_PATH_ROOT ${CMAKE_SOURCE_DIR})

 # SET(ASSIMP_NO_EXPORT TRUE)

  ## No unordered map in STL...
  ADD_DEFINITIONS("-Dunordered_map=map")
  ADD_DEFINITIONS("-DMOBILE_RENDERER")
  #ADD_DEFINITIONS("-DASSIMP_BUILD_NO_BLEND_IMPORTER")

  ADD_DEFINITIONS("-Dva_list=__builtin_va_list")
  ADD_DEFINITIONS("-Dva_start=__builtin_va_start")
  ADD_DEFINITIONS("-Dva_end=__builtin_va_end")
  ADD_DEFINITIONS("-Dva_arg=__builtin_va_arg")
  ADD_DEFINITIONS("-DHAVE_MALLOC")
  ADD_DEFINITIONS("-DANDROID")
  ADD_DEFINITIONS("-DUSE_GLES")
  ADD_DEFINITIONS("-D__ANDROID__")

  # for libogg
  ADD_DEFINITIONS("-D_ANDROID")

  # for openal
  SET(LIBTYPE STATIC)
ENDIF()

IF(EMSCRIPTEN)
  FIND_PACKAGE(OpenGLES REQUIRED)
  FIND_PACKAGE(OpenGLES2 REQUIRED)

  SET(USE_GLES TRUE)
  SET(FREETYPE_LIBRARY "freetype")
  SET(OPENAL_LIBRARY "openal")
  SET(ZLIB_LIBRARY "zlib")

  SET(NEO_BUILD_FLAGS "")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${NEO_BUILD_FLAGS} -O3 -fPIC -DLINUX")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -D__Debug__")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${NEO_BUILD_FLAGS} -O3 -fPIC -DLINUX")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -D__Debug__")
  SET(CMAKE_SHARED_LINKER_FLAGS "-ldl -Wl,--as-needed,--allow-multiple-definition,--build-id")

  SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} --preload-file project" )

  SET(SDL_VIDEO TRUE)
  add_definitions(-Wno-warn-absolute-paths -s FULL_ES2=1)
  ADD_DEFINITIONS("-DUSE_GLES")

  SET(SDL_VIDEO_DRIVER_EMSCRIPTEN TRUE)

  # Don't use -fPIC for executables
  SET(DISABLE_PIC_EXECUTABLES ON)
ENDIF()

## Set up 3rd party dependencies
SET(ASSIMP_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/assimp/include)
SET(BULLET_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/bullet)
SET(FREETYPE_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/freetype/include)

IF(NOT USE_GLES)
SET(GLEW_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/glew/include/GL)
ENDIF()

SET(TINYUTF8_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/tinyutf8)
SET(JPEG_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/libjpeg)
SET(PNG_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/libpng ${NEO_SOURCE_DIR}/3rdparty/)
SET(OGG_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/libogg/include)
SET(VORBIS_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/libvorbis/include)

if(STANDARD_LUA)
    SET(LUA_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/lua-standard/src ${CMAKE_BINARY_DIR}/3rdparty/lua-standard/)
else()
    SET(LUA_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/lua/src ${CMAKE_BINARY_DIR}/3rdparty/lua)
endif(STANDARD_LUA)

SET(NPK_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/npk/include)

if(NOT SDL2_FOUND)
  SET(SDL_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/sdl2/include)
  SET(SDL_LIBRARIES SDL2)
else()
  SET(SDL_INCLUDE_DIR ${SDL2_INCLUDE_DIR})
  SET(SDL_LIBRARIES ${SDL2_LIBRARY})
endif(NOT SDL2_FOUND)

SET(OPENAL_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/openal-soft/include)
SET(TINYXML_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/tinyxml)

SET(ZLIB_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/zlib)
SET(ZLIB_INCLUDE_DIRS ${NEO_SOURCE_DIR}/3rdparty/zlib)

SET(FLTK_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/fltk ${CMAKE_BINARY_DIR}/3rdparty/fltk)
SET(SHINY_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/shinyprofiler/Shiny/include)
SET(LIBZIP_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/libzip/src ${NEO_SOURCE_DIR}/3rdparty/libzip/lib)

SET(SHINY_LIBRARIES shiny)
SET(ASSIMP_LIBRARIES assimp)
SET(BULLET_LIBRARIES bullet)
SET(FREETYPE_LIBRARIES "${FREETYPE_LIBRARY}")

IF(NOT USE_GLES)
SET(GLEW_LIBRARIES libglew_static)
ENDIF()

SET(JPEG_LIBRARIES jpeg)
SET(PNG_LIBRARIES png)
SET(OGG_LIBRARIES ogg)
SET(VORBIS_LIBRARIES vorbis)
SET(FLTK_LIBRARIES fltk_gl fltk_images)
SET(LIBZIP_LIBRARIES zip)

SET(LUA_LIBRARIES liblua)

IF(WIN32)
    SET(WINSOCK_LIBRARIES ws2_32)
ENDIF()

SET(NPK_LIBRARIES npk)
SET(TINYXML_LIBRARIES tinyxml)
SET(OPENAL_LIBRARIES "${OPENAL_LIBRARY}")
SET(ZLIB_LIBRARIES "${ZLIB_LIBRARY}")
SET(ZLIB_FOUND TRUE)

SET(GTEST_LIBRARIES gtest)
SET(GTEST_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/gtest/include)

SET(SEXPRESSO_LIBRARIES sexpresso)
SET(SEXPRESSO_INCLUDE_DIR ${NEO_SOURCE_DIR}/3rdparty/sexpresso/sexpresso)

## Set up SDK dependencies
SET(NEO_CORE_INCLUDE_DIR ${NEO_SOURCE_DIR}/SDK/NeoCore/include)
SET(NEO_ENGINE_INCLUDE_DIR ${NEO_SOURCE_DIR}/SDK/NeoEngine/include)
SET(NEO2D_INCLUDE_DIR ${NEO_SOURCE_DIR}/SDK/Neo2D/include)

SET(NEO_CORE_LIBRARIES NeoCore)
SET(NEO_ENGINE_LIBRARIES NeoEngine)
SET(NEO2D_LIBRARIES Neo2D)

## Set up Neo dependencies
SET(NEO_COMMON_INCLUDE_DIR ${NEO_SOURCE_DIR}/Neo/Common ${NEO_SOURCE_DIR}/Neo/Common/include)
SET(NEO_COMMON_LIBRARIES NeoCommon)

SET(DOCUMENTATION_BINARY_DIR ${CMAKE_BINARY_DIR}/Documentation)

## TODO: Only works for LuaJIT!
SET(LUA_EXECUTABLE lua) #${NEO_BINARY_OUTPUT}/lua)

## Set up subdirectories...
SET(CMAKE_SHARED_LIBRARY_PREFIX "")
ADD_SUBDIRECTORY(3rdparty)
ADD_SUBDIRECTORY(SDK)
ADD_SUBDIRECTORY(Neo)
ADD_SUBDIRECTORY(Data)

#ADD_SUBDIRECTORY(Swig)

IF(NOT NO_DOCUMENTATION AND NOT ANDROID)
	ADD_SUBDIRECTORY(Documentation)
ENDIF()

## Build only for PC
IF(NOT ANDROID AND NOT NO_TESTS)
  ADD_SUBDIRECTORY(Tests/LuaApi)
  #ADD_SUBDIRECTORY(Tests/SDK)
  #ADD_SUBDIRECTORY(Tests/LuaSDK)
  #ADD_SUBDIRECTORY(Tests/Benchmark)
ELSE()
  MESSAGE("-- Will not build tests.")
ENDIF()

IF(NOT ANDROID)
  #ADD_SUBDIRECTORY(Tools)
ENDIF()

IF(ANDROID)
    ## Copy Android app to build dir
    INCLUDE(CopyFiles)
    copy_files("Additional/AndroidApp/*" "${CMAKE_BINARY_DIR}" "copy-android-sources")
ENDIF()

## Enable tests
IF(NOT NO_TESTS)
  enable_testing()
  add_test(NAME Neo2D_test COMMAND Neo2DTest)
  add_test(NAME NeoEngine_test COMMAND NeoEngineTest)
  add_test(NAME NeoCore_test COMMAND NeoCoreTest)
  add_test(NAME AssetLoading_test COMMAND AssetLoadingTest)
  add_test(NAME NeoEditor_test COMMAND NeoEditorTest)
  add_test(NAME ProjectManager_test COMMAND ProjectManagerTest)
ENDIF()

## Install files
INSTALL(FILES
  CREDITS
  LICENSE
  README.md
  DESTINATION ${NEO_INSTALL_DIR})

#set(CPACK_COMPONENTS_ALL documentation sdk projectmanager)
set(CPACK_COMPONENT_DOCUMENTATION_DISPLAY_NAME "SDK Documentation")
set(CPACK_COMPONENT_SDK_DISPLAY_NAME "C++ SDK")
set(CPACK_COMPONENT_PROJECTMANAGER_DISPLAY_NAME "Project Manager")

# Include cpack after all system specifics
INCLUDE(CPack)
