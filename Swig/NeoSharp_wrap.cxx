/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_NeoSharp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_NeoSharp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_NeoSharp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


        #include <NeoEngine.h>
        #include <NeoCore.h>
        #include <Neo2DEngine.h>
        #include <Widget.h>
        #include <Button.h>

        #include <ThemedButton.h>
        #include <Sprite.h>
        #include <Tile.h>
        #include <InputField.h>
        #include <Canvas.h>
        #include <Label.h>

        using namespace Neo;
        using namespace Neo2D;
        using namespace Gui;

        // #define Canvas Neo::Gui::Canvas


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT double SWIGSTDCALL CSharp_M_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(3.14159265358979323846);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DEG_TO_RAD_get() {
  double jresult ;
  double result;
  
  result = (double)(((3.14159265358979323846*2)/360.0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAD_TO_DEG_get() {
  double jresult ;
  double result;
  
  result = (double)((1.0/((3.14159265358979323846*2)/360.0)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_getNextPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)Neo::getNextPowerOfTwo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_loopFloat(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Neo::loopFloat(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_start_set(void * jarg1, int jarg2) {
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::Range *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Range_start_get(void * jarg1) {
  int jresult ;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int result;
  
  arg1 = (Neo::Range *)jarg1; 
  result = (int) ((arg1)->start);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_end_set(void * jarg1, int jarg2) {
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::Range *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Range_end_get(void * jarg1) {
  int jresult ;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int result;
  
  arg1 = (Neo::Range *)jarg1; 
  result = (int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Range() {
  void * jresult ;
  Neo::Range *result = 0 ;
  
  result = (Neo::Range *)new Neo::Range();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Range(void * jarg1) {
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  
  arg1 = (Neo::Range *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sortFloatList__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int *arg1 ;
  float *arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  Neo::sortFloatList(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_sortFloatList__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  float *arg1 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Neo::sortFloatList(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isBoxToBoxCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Neo::isBoxToBoxCollision((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isBoxToBox2dCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  Neo::Vector2 *arg4 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)Neo::isBoxToBox2dCollision((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,(Neo::Vector2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isPointInBox(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Neo::isPointInBox((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isPointInBox2d(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)Neo::isPointInBox2d((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgeToBoxCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Neo::isEdgeToBoxCollision((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgeToEdge2dIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  Neo::Vector2 *arg4 = 0 ;
  Neo::Vector2 *arg5 = (Neo::Vector2 *) 0 ;
  bool result;
  
  arg1 = (Neo::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (Neo::Vector2 *)jarg5; 
  result = (bool)Neo::isEdgeToEdge2dIntersection((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,(Neo::Vector2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isPointInTriangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Neo::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Neo::isPointInTriangle((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,(Neo::Vector3 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isLineCircleIntersection(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (Neo::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)Neo::isLineCircleIntersection((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isRaySphereIntersection(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  float arg4 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (Neo::Vector3 *)jarg5; 
  result = (bool)Neo::isRaySphereIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isRayPlaneIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Neo::Vector3 *)jarg5; 
  result = (bool)Neo::isRayPlaneIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgePlaneIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Neo::Vector3 *)jarg5; 
  result = (bool)Neo::isEdgePlaneIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgeTriangleIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = 0 ;
  Neo::Vector3 *arg6 = 0 ;
  Neo::Vector3 *arg7 = (Neo::Vector3 *) 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Neo::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (Neo::Vector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (Neo::Vector3 *)jarg7; 
  result = (bool)Neo::isEdgeTriangleIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,(Neo::Vector3 const &)*arg5,(Neo::Vector3 const &)*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getTriangleNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = Neo::getTriangleNormal((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_simplifyDP(float jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  float arg1 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  Neo::simplifyDP(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_linearInterpolation(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Neo::linearInterpolation(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_cubicInterpolation(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (float)Neo::cubicInterpolation(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CatmullRomInterpolation(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (float)Neo::CatmullRomInterpolation(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HermiteInterpolation__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8, unsigned int jarg9) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool arg9 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HermiteInterpolation__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HermiteInterpolation__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HueToRGB(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)Neo::HueToRGB(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RGBToHSV(void * jarg1) {
  void * jresult ;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  argp1 = (Neo::Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Neo::RGBToHSV(arg1);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSVToRGB(void * jarg1) {
  void * jresult ;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  argp1 = (Neo::Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Neo::HSVToRGB(arg1);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RGBToHSL(void * jarg1) {
  void * jresult ;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  argp1 = (Neo::Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Neo::RGBToHSL(arg1);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSLToRGB(void * jarg1) {
  void * jresult ;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  argp1 = (Neo::Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = Neo::HSLToRGB(arg1);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_x_set(void * jarg1, float jarg2) {
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_x_get(void * jarg1) {
  float jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_y_set(void * jarg1, float jarg2) {
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_y_get(void * jarg1) {
  float jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_0() {
  void * jresult ;
  Neo::Vector2 *result = 0 ;
  
  result = (Neo::Vector2 *)new Neo::Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Neo::Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Neo::Vector2 *)new Neo::Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  Neo::Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Neo::Vector2 *)new Neo::Vector2(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Neo::Vector2 *)new Neo::Vector2((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_4(void * jarg1) {
  void * jresult ;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  arg1 = (Neo::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector2 *)new Neo::Vector2((Neo::Vector2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_5(void * jarg1) {
  void * jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector2 *)new Neo::Vector2((Neo::Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector2 const *)arg1)->add((Neo::Vector2 const &)*arg2);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_substract(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector2 const *)arg1)->substract((Neo::Vector2 const &)*arg2);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_multiply(void * jarg1, float jarg2) {
  void * jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Neo::Vector2 const *)arg1)->multiply(arg2);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_divide(void * jarg1, float jarg2) {
  void * jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Neo::Vector2 const *)arg1)->divide(arg2);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector2_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Neo::Vector2 const *)arg1)->equals((Neo::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_set(void * jarg1, float jarg2, float jarg3) {
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_loadIdentity(void * jarg1) {
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_normalize(void * jarg1) {
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector2_rotate(void * jarg1, float jarg2) {
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->rotate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_getNormalized(void * jarg1) {
  void * jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  result = ((Neo::Vector2 const *)arg1)->getNormalized();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_getRotated(void * jarg1, float jarg2) {
  void * jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Neo::Vector2 const *)arg1)->getRotated(arg2);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_getAngleBetween(void * jarg1, void * jarg2) {
  float jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->getAngleBetween((Neo::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_getLength(void * jarg1) {
  float jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  result = (float)((Neo::Vector2 const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_getSquaredLength(void * jarg1) {
  float jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  result = (float)((Neo::Vector2 const *)arg1)->getSquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector2_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)((Neo::Vector2 const *)arg1)->dotProduct((Neo::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector2_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((Neo::Vector2 const *)arg1)->lerp((Neo::Vector2 const &)*arg2,arg3);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  arg1 = (Neo::Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_x_set(void * jarg1, float jarg2) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_x_get(void * jarg1) {
  float jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_y_set(void * jarg1, float jarg2) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_y_get(void * jarg1) {
  float jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_z_set(void * jarg1, float jarg2) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_z_get(void * jarg1) {
  float jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_0() {
  void * jresult ;
  Neo::Vector3 *result = 0 ;
  
  result = (Neo::Vector3 *)new Neo::Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Neo::Vector3 *)new Neo::Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Neo::Vector3 *)new Neo::Vector3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Neo::Vector3 *)new Neo::Vector3((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_4(void * jarg1) {
  void * jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_5(void * jarg1) {
  void * jresult ;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector3__SWIG_6(void * jarg1) {
  void * jresult ;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector3 const *)arg1)->add((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_substract(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector3 const *)arg1)->substract((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_multiply(void * jarg1, float jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Neo::Vector3 const *)arg1)->multiply(arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_divide(void * jarg1, float jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Neo::Vector3 const *)arg1)->divide(arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector3_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Neo::Vector3 const *)arg1)->equals((Neo::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_set(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_loadIdentity(void * jarg1) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_crossProduct(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector3 const *)arg1)->crossProduct((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((Neo::Vector3 const *)arg1)->dotProduct((Neo::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_normalize(void * jarg1) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_getNormalized(void * jarg1) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  result = ((Neo::Vector3 const *)arg1)->getNormalized();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_getLength(void * jarg1) {
  float jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  result = (float)((Neo::Vector3 const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector3_getSquaredLength(void * jarg1) {
  float jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  result = (float)((Neo::Vector3 const *)arg1)->getSquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_rotateX(void * jarg1, double jarg2) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_rotateY(void * jarg1, double jarg2) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_rotateZ(void * jarg1, double jarg2) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector3_rotateAxis(void * jarg1, double jarg2, void * jarg3) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rotateAxis(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_getRotatedX(void * jarg1, double jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((Neo::Vector3 const *)arg1)->getRotatedX(arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_getRotatedY(void * jarg1, double jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((Neo::Vector3 const *)arg1)->getRotatedY(arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_getRotatedZ(void * jarg1, double jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((Neo::Vector3 const *)arg1)->getRotatedZ(arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_getRotatedAxis(void * jarg1, double jarg2, void * jarg3) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector3 const *)arg1)->getRotatedAxis(arg2,(Neo::Vector3 const &)*arg3);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector3_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((Neo::Vector3 const *)arg1)->lerp((Neo::Vector3 const &)*arg2,arg3);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector3(void * jarg1) {
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_x_set(void * jarg1, float jarg2) {
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_x_get(void * jarg1) {
  float jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_y_set(void * jarg1, float jarg2) {
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_y_get(void * jarg1) {
  float jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_z_set(void * jarg1, float jarg2) {
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_z_get(void * jarg1) {
  float jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_w_set(void * jarg1, float jarg2) {
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_w_get(void * jarg1) {
  float jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_0() {
  void * jresult ;
  Neo::Vector4 *result = 0 ;
  
  result = (Neo::Vector4 *)new Neo::Vector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Neo::Vector4 *)new Neo::Vector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  Neo::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Neo::Vector4 *)new Neo::Vector4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Neo::Vector4 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Neo::Vector4 *)new Neo::Vector4((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_4(void * jarg1) {
  void * jresult ;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  arg1 = (Neo::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_5(void * jarg1) {
  void * jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector4__SWIG_6(void * jarg1) {
  void * jresult ;
  Neo::Color *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  arg1 = (Neo::Color *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Color const & type is null", 0);
    return 0;
  } 
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Color const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector4_add(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector4 const *)arg1)->add((Neo::Vector4 const &)*arg2);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector4_substract(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Vector4 const *)arg1)->substract((Neo::Vector4 const &)*arg2);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector4_multiply(void * jarg1, float jarg2) {
  void * jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Neo::Vector4 const *)arg1)->multiply(arg2);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector4_divide(void * jarg1, float jarg2) {
  void * jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((Neo::Vector4 const *)arg1)->divide(arg2);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Vector4_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  bool result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  result = (bool)((Neo::Vector4 const *)arg1)->equals((Neo::Vector4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Vector4_loadIdentity(void * jarg1) {
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Vector4_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->dotProduct((Neo::Vector4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Vector4_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((Neo::Vector4 const *)arg1)->lerp((Neo::Vector4 const &)*arg2,arg3);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector4(void * jarg1) {
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  
  arg1 = (Neo::Vector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_r_set(void * jarg1, unsigned char jarg2) {
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Neo::Color *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Color_r_get(void * jarg1) {
  unsigned char jresult ;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  arg1 = (Neo::Color *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_g_set(void * jarg1, unsigned char jarg2) {
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Neo::Color *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Color_g_get(void * jarg1) {
  unsigned char jresult ;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  arg1 = (Neo::Color *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_b_set(void * jarg1, unsigned char jarg2) {
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Neo::Color *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Color_b_get(void * jarg1) {
  unsigned char jresult ;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  arg1 = (Neo::Color *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_a_set(void * jarg1, unsigned char jarg2) {
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Neo::Color *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Color_a_get(void * jarg1) {
  unsigned char jresult ;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  arg1 = (Neo::Color *)jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_0() {
  void * jresult ;
  Neo::Color *result = 0 ;
  
  result = (Neo::Color *)new Neo::Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_1(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  Neo::Color *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (Neo::Color *)new Neo::Color(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_2(void * jarg1) {
  void * jresult ;
  Neo::Color *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  arg1 = (Neo::Color *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Color const & type is null", 0);
    return 0;
  } 
  result = (Neo::Color *)new Neo::Color((Neo::Color const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_3(void * jarg1) {
  void * jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Color *)new Neo::Color((Neo::Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_4(void * jarg1) {
  void * jresult ;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  arg1 = (Neo::Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Color *)new Neo::Color((Neo::Vector4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color(void * jarg1) {
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  
  arg1 = (Neo::Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Color_set(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  arg1 = (Neo::Color *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = (unsigned char)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_entries_set(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *arg2 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->entries;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_entries_get(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *result = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = (float *)(float *) ((arg1)->entries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_0() {
  void * jresult ;
  Neo::Matrix4x4 *result = 0 ;
  
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Neo::Matrix4x4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_3(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Matrix4x4 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((Neo::Matrix4x4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix4x4(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_loadIdentity(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_loadZero(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  (arg1)->loadZero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_invert(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  (arg1)->invert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_transpose(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  (arg1)->transpose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_affineInvert(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  (arg1)->affineInvert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_invertTranspose(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  (arg1)->invertTranspose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_affineInvertTranspose(void * jarg1) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  (arg1)->affineInvertTranspose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_scale(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->scale((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_rotate(void * jarg1, void * jarg2, float jarg3) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_translate(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 const *argp2 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  argp2 = (Neo::Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3 const", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->translate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setEntry(void * jarg1, int jarg2, float jarg3) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setEntry(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setScale(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setScale((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setUniformScale(void * jarg1, float jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setUniformScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setTranslation(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setTranslation((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setTranslationPart(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setTranslationPart((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setRotationAxis(void * jarg1, float jarg2, void * jarg3) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setRotationAxis(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setRotationX(void * jarg1, float jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRotationX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setRotationY(void * jarg1, float jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRotationY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setRotationZ(void * jarg1, float jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRotationZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setRotationEuler(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setRotationEuler(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setRotationPartEuler__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setRotationPartEuler(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_setRotationPartEuler__SWIG_1(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setRotationPartEuler((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4_getEntry(void * jarg1, int jarg2) {
  float jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((Neo::Matrix4x4 const *)arg1)->getEntry(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getRotatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Matrix4x4 const *)arg1)->getRotatedVector3((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getInverseRotatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Matrix4x4 const *)arg1)->getInverseRotatedVector3((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getTranslatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslatedVector3((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getInversetranslatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranslatedVector3((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getTranslationPart(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslationPart();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getEulerAngles(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getEulerAngles();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getScale(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getScale();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getRow(void * jarg1, int jarg2) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Neo::Matrix4x4 const *)arg1)->getRow(arg2);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getColumn(void * jarg1, int jarg2) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((Neo::Matrix4x4 const *)arg1)->getColumn(arg2);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getInverse(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getInverse();
  jresult = new Neo::Matrix4x4((const Neo::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getTranspose(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getTranspose();
  jresult = new Neo::Matrix4x4((const Neo::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getInversetranspose(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranspose();
  jresult = new Neo::Matrix4x4((const Neo::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getAffineInverse(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverse();
  jresult = new Neo::Matrix4x4((const Neo::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_getAffineInverseTranspose(void * jarg1) {
  void * jresult ;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverseTranspose();
  jresult = new Neo::Matrix4x4((const Neo::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_rotateVector3(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 & type is null", 0);
    return ;
  } 
  ((Neo::Matrix4x4 const *)arg1)->rotateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_inverseRotateVector3(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 & type is null", 0);
    return ;
  } 
  ((Neo::Matrix4x4 const *)arg1)->inverseRotateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_translateVector3(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 & type is null", 0);
    return ;
  } 
  ((Neo::Matrix4x4 const *)arg1)->translateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_inversetranslateVector3(void * jarg1, void * jarg2) {
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Matrix4x4 *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 & type is null", 0);
    return ;
  } 
  ((Neo::Matrix4x4 const *)arg1)->inversetranslateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_values_set(void * jarg1, void * jarg2) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *arg2 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->values;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_values_get(void * jarg1) {
  void * jresult ;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *result = 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  result = (float *)(float *) ((arg1)->values);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_0() {
  void * jresult ;
  Neo::Quaternion *result = 0 ;
  
  result = (Neo::Quaternion *)new Neo::Quaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_2(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,(Neo::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quaternion__SWIG_4(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Neo::Quaternion *arg1 = 0 ;
  Neo::Quaternion arg2 ;
  float arg3 ;
  Neo::Quaternion *argp2 ;
  Neo::Quaternion *result = 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return 0;
  } 
  argp2 = (Neo::Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Quaternion", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  result = (Neo::Quaternion *)new Neo::Quaternion((Neo::Quaternion const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_normalize(void * jarg1) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_loadIdentity(void * jarg1) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_setFromAngles(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setFromAngles(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_slerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  Neo::Quaternion *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  arg2 = (Neo::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return ;
  } 
  arg3 = (Neo::Quaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->slerp((Neo::Quaternion const &)*arg2,(Neo::Quaternion const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_invert(void * jarg1) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  (arg1)->invert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_setFromAngleAxis(void * jarg1, float jarg2, void * jarg3) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setFromAngleAxis(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quaternion_setFromVectors(void * jarg1, void * jarg2, void * jarg3) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setFromVectors((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getEulerAngles(void * jarg1) {
  void * jresult ;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  result = ((Neo::Quaternion const *)arg1)->getEulerAngles();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Quaternion_getAngle(void * jarg1) {
  float jresult ;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float result;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  result = (float)((Neo::Quaternion const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quaternion_getAxis(void * jarg1) {
  void * jresult ;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  result = ((Neo::Quaternion const *)arg1)->getAxis();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Quaternion(void * jarg1) {
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  arg1 = (Neo::Quaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SystemContext(void * jarg1) {
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemContext_getScreenSize__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  (arg1)->getScreenSize(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SystemContext_getScreenSize__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  result = (arg1)->getScreenSize();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemContext_setCursorPosition(void * jarg1, int jarg2, int jarg3) {
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setCursorPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemContext_hideCursor(void * jarg1) {
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  (arg1)->hideCursor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemContext_showCursor(void * jarg1) {
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  (arg1)->showCursor();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SystemContext_getWorkingDirectory(void * jarg1) {
  char * jresult ;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  result = (char *)(arg1)->getWorkingDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SystemContext_getSystemTick(void * jarg1) {
  unsigned long jresult ;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  unsigned long result;
  
  arg1 = (Neo::SystemContext *)jarg1; 
  result = (unsigned long)(arg1)->getSystemTick();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InputContext(void * jarg1) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_createKey(void * jarg1, char * jarg2) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->createKey((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_createAxis__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->createAxis((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_createAxis__SWIG_1(void * jarg1, char * jarg2) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->createAxis((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_createProperty(void * jarg1, char * jarg2) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->createProperty((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_downKey(void * jarg1, char * jarg2) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->downKey((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_upKey(void * jarg1, char * jarg2) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->upKey((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_setAxis(void * jarg1, char * jarg2, float jarg3) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setAxis((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_setProperty(void * jarg1, char * jarg2, int jarg3) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setProperty((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputContext_isKeyPressed(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->isKeyPressed((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputContext_onKeyDown(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->onKeyDown((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputContext_onKeyUp(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->onKeyUp((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_InputContext_getAxis(void * jarg1, char * jarg2) {
  float jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (float)(arg1)->getAxis((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InputContext_getProperty(void * jarg1, char * jarg2) {
  int jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->getProperty((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_beginTouch(void * jarg1, int jarg2, void * jarg3) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Neo::Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->beginTouch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_updateTouch(void * jarg1, int jarg2, void * jarg3) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Neo::Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->updateTouch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_endTouch(void * jarg1, int jarg2, void * jarg3) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Neo::Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->endTouch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_cancelTouch(void * jarg1, int jarg2, void * jarg3) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Neo::Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->cancelTouch(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputContext_getTouchPosition(void * jarg1, int jarg2) {
  void * jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTouchPosition(arg2);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputContext_getLastTouchPosition(void * jarg1, int jarg2) {
  void * jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getLastTouchPosition(arg2);
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InputContext_getTouchPhase(void * jarg1, int jarg2) {
  int jresult ;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::TOUCH_PHASE result;
  
  arg1 = (Neo::InputContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Neo::TOUCH_PHASE)(arg1)->getTouchPhase(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputContext_flush(void * jarg1) {
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  
  arg1 = (Neo::InputContext *)jarg1; 
  (arg1)->flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RenderingContext(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RenderingContext_getRendererVersion(void * jarg1) {
  char * jresult ;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  result = (char *)(arg1)->getRendererVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setOrthoView(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->setOrthoView(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setPerspectiveView(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->setPerspectiveView(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setViewport(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->setViewport(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_clear(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setClearColor(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setClearColor((Neo::Vector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_init(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableTexture(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableTexture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableTexture(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableTexture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setTextureGenMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_GEN_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::TEX_GEN_MODES)jarg2; 
  (arg1)->setTextureGenMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setTextureFilterMode(void * jarg1, int jarg2, int jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_FILTER_MODES arg2 ;
  Neo::TEX_FILTER_MODES arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::TEX_FILTER_MODES)jarg2; 
  arg3 = (Neo::TEX_FILTER_MODES)jarg3; 
  (arg1)->setTextureFilterMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setTextureUWrapMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::WRAP_MODES)jarg2; 
  (arg1)->setTextureUWrapMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setTextureVWrapMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::WRAP_MODES)jarg2; 
  (arg1)->setTextureVWrapMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setTextureCombineMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_COMBINE_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::TEX_COMBINE_MODES)jarg2; 
  (arg1)->setTextureCombineMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_bindTexture__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->bindTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_bindTexture__SWIG_1(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createTexture(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_deleteTexture(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendTextureImage(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Image *arg2 = (Neo::Image *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Image *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->sendTextureImage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_texImage(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, void * jarg7) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::VAR_TYPES arg5 ;
  Neo::TEX_MODES arg6 ;
  void *arg7 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (Neo::VAR_TYPES)jarg5; 
  arg6 = (Neo::TEX_MODES)jarg6; 
  arg7 = (void *)jarg7; 
  (arg1)->texImage(arg2,arg3,arg4,arg5,arg6,(void const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_texSubImage(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8, void * jarg9) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  Neo::TEX_MODES arg8 ;
  void *arg9 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (Neo::VAR_TYPES)jarg7; 
  arg8 = (Neo::TEX_MODES)jarg8; 
  arg9 = (void *)jarg9; 
  (arg1)->texSubImage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_generateMipMap(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->generateMipMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getTexImage(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Image *arg3 = (Neo::Image *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Image *)jarg3; 
  (arg1)->getTexImage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createFrameBuffer(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_deleteFrameBuffer(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_bindFrameBuffer(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getCurrentFrameBuffer(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->getCurrentFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_attachFrameBufferTexture(void * jarg1, int jarg2, unsigned int jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::FRAME_BUFFER_ATTACHMENT)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->attachFrameBufferTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_attachFrameBufferRB(void * jarg1, int jarg2, unsigned int jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::FRAME_BUFFER_ATTACHMENT)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->attachFrameBufferRB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setDrawingBuffers(void * jarg1, void * jarg2, unsigned int jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT *arg2 = (Neo::FRAME_BUFFER_ATTACHMENT *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::FRAME_BUFFER_ATTACHMENT *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setDrawingBuffers(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createRenderBuffer(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createRenderBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_deleteRenderBuffer(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteRenderBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_bindRenderBuffer(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindRenderBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setRenderBuffer(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::RENDER_BUFFER_MODES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::RENDER_BUFFER_MODES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->setRenderBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createVertexShader(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createVertexShader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createPixelShader(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createPixelShader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_deleteShader(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteShader(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RenderingContext_sendShaderSource(void * jarg1, unsigned int jarg2, char * jarg3) {
  unsigned int jresult ;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->sendShaderSource(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_bindFX(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindFX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createFX(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->createFX(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_updateFX(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->updateFX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_deleteFX(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteFX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformInt__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformInt__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformFloat__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformFloat__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformVec2__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformVec2__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformVec3__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformVec3__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformVec4__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformVec4__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformMatrix__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Neo::Matrix4x4 *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformMatrix__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Neo::Matrix4x4 *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_sendUniformMatrix__SWIG_2(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Neo::Matrix4x4 *)jarg4; 
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getAttribLocation(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->getAttribLocation(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createVBO(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createVBO(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_deleteVBO(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteVBO(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_bindVBO(void * jarg1, int jarg2, unsigned int jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::VBO_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->bindVBO(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setVBO(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  Neo::VBO_MODES arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::VBO_TYPES)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (Neo::VBO_MODES)jarg5; 
  (arg1)->setVBO(arg2,(void const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setVBOSubData(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::VBO_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->setVBOSubData(arg2,arg3,(void const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableVertexArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableVertexArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableColorArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableColorArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableNormalArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableNormalArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableTexCoordArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableTexCoordArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableAttribArray(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableAttribArray(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableVertexArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableVertexArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableColorArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableColorArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableNormalArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableNormalArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableTexCoordArray(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableTexCoordArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableAttribArray(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableAttribArray(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setVertexPointer(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::VAR_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->setVertexPointer(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setColorPointer(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::VAR_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->setColorPointer(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setNormalPointer(void * jarg1, int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::VAR_TYPES)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->setNormalPointer(arg2,(void const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setTexCoordPointer(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::VAR_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->setTexCoordPointer(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setAttribPointer__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  bool arg6 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::VAR_TYPES)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setAttribPointer__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4, void * jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::VAR_TYPES)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_drawArray(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::PRIMITIVE_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->drawArray(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_drawElement(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  Neo::VAR_TYPES arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::PRIMITIVE_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (Neo::VAR_TYPES)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->drawElement(arg2,arg3,arg4,(void const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableLineAntialiasing(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableLineAntialiasing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableLineAntialiasing(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableLineAntialiasing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setMaterialDiffuse(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialDiffuse((Neo::Vector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setMaterialSpecular(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialSpecular((Neo::Vector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setMaterialAmbient(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialAmbient((Neo::Vector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setMaterialEmit(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialEmit((Neo::Vector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setMaterialShininess(void * jarg1, float jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaterialShininess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableScissorTest(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableScissorTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableScissorTest(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableScissorTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setScissor(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->setScissor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setColor(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Color *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Color const & type is null", 0);
    return ;
  } 
  (arg1)->setColor((Neo::Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setColor3(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor3((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setColor4(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor4((Neo::Vector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setColorMask(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setColorMask(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setDepthMask(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDepthMask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setAlphaTest(void * jarg1, float jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAlphaTest(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableDepthTest(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableDepthTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableDepthTest(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableDepthTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setDepthMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::DEPTH_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::DEPTH_MODES)jarg2; 
  (arg1)->setDepthMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enablePolygonOffset(void * jarg1, float jarg2, float jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->enablePolygonOffset(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disablePolygonOffset(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disablePolygonOffset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableStencilTest(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableStencilTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableStencilTest(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableStencilTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setStencilFunc__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_FUNCS arg2 ;
  int arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::STENCIL_FUNCS)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setStencilFunc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setStencilFunc__SWIG_1(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_FUNCS arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::STENCIL_FUNCS)jarg2; 
  (arg1)->setStencilFunc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setStencilOp(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_OPS arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::STENCIL_OPS)jarg2; 
  (arg1)->setStencilOp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableCullFace(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableCullFace();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableCullFace(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableCullFace();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setCullMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::CULL_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::CULL_MODES)jarg2; 
  (arg1)->setCullMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_createQuery(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createQuery(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_deleteQuery(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteQuery(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_beginQuery(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->beginQuery(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_endQuery(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->endQuery();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getQueryResult(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  (arg1)->getQueryResult(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_loadIdentity(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setMatrixMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::MATRIX_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::MATRIX_MODES)jarg2; 
  (arg1)->setMatrixMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_pushMatrix(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->pushMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_popMatrix(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->popMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_multMatrix(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Matrix4x4 *)jarg2; 
  (arg1)->multMatrix((Neo::Matrix4x4 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_translate(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->translate((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_rotate(void * jarg1, void * jarg2, float jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_scale(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->scale((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getViewport(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->getViewport(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getModelViewMatrix(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Matrix4x4 *)jarg2; 
  (arg1)->getModelViewMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getProjectionMatrix(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Matrix4x4 *)jarg2; 
  (arg1)->getProjectionMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getTextureMatrix(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Matrix4x4 *)jarg2; 
  (arg1)->getTextureMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableFog(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableFog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableFog(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableFog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setFogColor(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setFogColor((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setFogDistance(void * jarg1, float jarg2, float jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setFogDistance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getFogColor(void * jarg1, void * jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  (arg1)->getFogColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getFogDistance(void * jarg1, void * jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->getFogDistance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableLighting(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableLighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableLighting(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableLighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableLight(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableLight(void * jarg1, unsigned int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightPosition(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightPosition(arg2,(Neo::Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightDiffuse(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightDiffuse(arg2,(Neo::Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightSpecular(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightSpecular(arg2,(Neo::Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightAmbient(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightAmbient(arg2,(Neo::Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightAttenuation(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->setLightAttenuation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightSpotDirection(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightSpotDirection(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightSpotAngle(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setLightSpotAngle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setLightSpotExponent(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setLightSpotExponent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightPosition(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3; 
  (arg1)->getLightPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightDiffuse(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3; 
  (arg1)->getLightDiffuse(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightSpecular(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3; 
  (arg1)->getLightSpecular(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightAmbient(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector4 *)jarg3; 
  (arg1)->getLightAmbient(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightAttenuation(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->getLightAttenuation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightSpotDirection(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  (arg1)->getLightSpotDirection(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightSpotAngle(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->getLightSpotAngle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_getLightSpotExponent(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->getLightSpotExponent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_enableBlending(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->enableBlending();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_disableBlending(void * jarg1) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  (arg1)->disableBlending();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setBlendingMode(void * jarg1, int jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::BLENDING_MODES arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (Neo::BLENDING_MODES)jarg2; 
  (arg1)->setBlendingMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderingContext_setPointSize(void * jarg1, float jarg2) {
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::RenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setPointSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundContext(void * jarg1) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_initContext(void * jarg1) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  (arg1)->initContext();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_createBuffer(void * jarg1, void * jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_deleteBuffer(void * jarg1, void * jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_sendBufferSound(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::Sound *arg3 = (Neo::Sound *) 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Sound *)jarg3; 
  (arg1)->sendBufferSound(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_sendBufferData(void * jarg1, unsigned int jarg2, int jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::SOUND_FORMAT arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::SOUND_FORMAT)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  (arg1)->sendBufferData(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundContext_getBufferDuration(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getBufferDuration(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_createSource(void * jarg1, void * jarg2, unsigned int jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->createSource(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_deleteSource(void * jarg1, void * jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteSource(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_enableSourceLoop(void * jarg1, unsigned int jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableSourceLoop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_disableSourceLoop(void * jarg1, unsigned int jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableSourceLoop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourceRelative(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setSourceRelative(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourceBufferId(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setSourceBufferId(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourcePosition(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setSourcePosition(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourceRadius(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceRadius(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourcePitch(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourcePitch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourceGain(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceGain(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourceRolloff(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceRolloff(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_setSourceOffset(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceOffset(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundContext_getSourceOffset(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getSourceOffset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_playSource(void * jarg1, unsigned int jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->playSource(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_pauseSource(void * jarg1, unsigned int jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->pauseSource(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_stopSource(void * jarg1, unsigned int jarg2) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->stopSource(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundContext_isSourcePaused(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->isSourcePaused(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundContext_isSourcePlaying(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->isSourcePlaying(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundContext_getSourceTimePos(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getSourceTimePos(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_queueSourceBuffer(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->queueSourceBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_unqueueSourceBuffer(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->unqueueSourceBuffer(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundContext_getSourceBuffersQueued(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getSourceBuffersQueued(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundContext_getSourceBuffersProcessed(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getSourceBuffersProcessed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundContext_updateListenerPosition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  arg1 = (Neo::SoundContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->updateListenerPosition((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsContext(void * jarg1) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_init(void * jarg1, void * jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->init((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_clear(void * jarg1) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setSimulationQuality(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setSimulationQuality(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_updateSimulation(void * jarg1) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  (arg1)->updateSimulation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setWorldGravity(void * jarg1, void * jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldGravity((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createGhost(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Neo::Quaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->createGhost(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createRigidBody(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, float jarg6) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  float arg6 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Neo::Quaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return ;
  } 
  arg6 = (float)jarg6; 
  (arg1)->createRigidBody(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_activateObject(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->activateObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_deactivateObject(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deactivateObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_deleteObject(void * jarg1, void * jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_enableObjectKinematic(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableObjectKinematic(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_disableObjectKinematic(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableObjectKinematic(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectShape(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setObjectShape(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectMass(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectMass(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectRestitution(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectRestitution(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectFriction(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectFriction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectLinearFactor(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setObjectLinearFactor(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectAngularFactor(void * jarg1, unsigned int jarg2, float jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectAngularFactor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectDamping(void * jarg1, unsigned int jarg2, float jarg3, float jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setObjectDamping(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectTransform(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Quaternion *arg4 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Neo::Quaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setObjectTransform(arg2,(Neo::Vector3 const &)*arg3,(Neo::Quaternion const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_getObjectTransform(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  Neo::Quaternion *arg4 = (Neo::Quaternion *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  arg4 = (Neo::Quaternion *)jarg4; 
  (arg1)->getObjectTransform(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setObjectUserPointer(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->setObjectUserPointer(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsContext_getObjectUserPointer(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (void *)(arg1)->getObjectUserPointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_addCentralForce(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addCentralForce(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_getCentralForce(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  (arg1)->getCentralForce(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_addTorque(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addTorque(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_getTorque(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  (arg1)->getTorque(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_clearForces(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->clearForces(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsContext_isObjectInCollision__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  int result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->isObjectInCollision(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsContext_isObjectInCollision__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (int)(arg1)->isObjectInCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsContext_isObjectInCollision__SWIG_2(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->isObjectInCollision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsContext_isObjectsCollision(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->isObjectsCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsContext_isRayHit__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg6 = (Neo::Vector3 *) 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int *)jarg4; 
  arg5 = (Neo::Vector3 *)jarg5; 
  arg6 = (Neo::Vector3 *)jarg6; 
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsContext_isRayHit__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int *)jarg4; 
  arg5 = (Neo::Vector3 *)jarg5; 
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsContext_isRayHit__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int *)jarg4; 
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsContext_isRayHit__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createMultiShape(void * jarg1, void * jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createMultiShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createBoxShape(void * jarg1, void * jarg2, void * jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->createBoxShape(arg2,(Neo::Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createSphereShape(void * jarg1, void * jarg2, float jarg3) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->createSphereShape(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createConeShape(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->createConeShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createCapsuleShape(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->createCapsuleShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createCylinderShape(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->createCylinderShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createConvexHullShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  Neo::Vector3 arg5 ;
  Neo::Vector3 const *argp5 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  argp5 = (Neo::Vector3 *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3 const", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->createConvexHullShape(arg2,(Neo::Vector3 const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createConvexHullShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->createConvexHullShape(arg2,(Neo::Vector3 const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createTriangleMeshShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, int jarg7, void * jarg8) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  Neo::Vector3 arg8 ;
  Neo::Vector3 const *argp8 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (Neo::VAR_TYPES)jarg7; 
  argp8 = (Neo::Vector3 *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3 const", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->createTriangleMeshShape(arg2,(Neo::Vector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createTriangleMeshShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, int jarg7) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (Neo::VAR_TYPES)jarg7; 
  (arg1)->createTriangleMeshShape(arg2,(Neo::Vector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_deleteShape(void * jarg1, void * jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_addChildShape(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Neo::Quaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->addChildShape(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_createConstraint(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::Vector3 *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (Neo::Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  (arg1)->createConstraint(arg2,arg3,arg4,(Neo::Vector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setLinearLimit(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearLimit(arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_setAngularLimit(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Neo::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularLimit(arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsContext_deleteConstraint(void * jarg1, void * jarg2) {
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (Neo::PhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScriptContext(void * jarg1) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_init(void * jarg1) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  (arg1)->init();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_runScript(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->runScript((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_startCallFunction(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->startCallFunction((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_endCallFunction__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->endCallFunction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_endCallFunction__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  result = (bool)(arg1)->endCallFunction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_callFunction(void * jarg1, char * jarg2) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->callFunction((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_addFunction(void * jarg1, char * jarg2, void * jarg3) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int (*arg3)(void) = (int (*)(void)) 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int (*)(void))jarg3; 
  (arg1)->addFunction((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_runString(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->runString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_getArgsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  result = (unsigned int)(arg1)->getArgsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_getIntArray(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  int *arg3 = (int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->getIntArray(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_getFloatArray(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->getFloatArray(arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ScriptContext_getString(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)(arg1)->getString(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScriptContext_getInteger(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->getInteger(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ScriptContext_getFloat(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getFloat(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScriptContext_getPointer(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (void *)(arg1)->getPointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_getBoolean(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->getBoolean(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_pushIntArray(void * jarg1, void * jarg2, unsigned int jarg3) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->pushIntArray((int const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_pushFloatArray(void * jarg1, void * jarg2, unsigned int jarg3) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->pushFloatArray((float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_pushString(void * jarg1, char * jarg2) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->pushString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_pushBoolean(void * jarg1, unsigned int jarg2) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->pushBoolean(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_pushInteger(void * jarg1, int jarg2) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->pushInteger(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_pushFloat(void * jarg1, float jarg2) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->pushFloat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScriptContext_pushPointer(void * jarg1, void * jarg2) {
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->pushPointer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_isNumber(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->isNumber(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_isFunctionOk(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->isFunctionOk((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScriptContext_isRunning(void * jarg1) {
  unsigned int jresult ;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool result;
  
  arg1 = (Neo::ScriptContext *)jarg1; 
  result = (bool)(arg1)->isRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image() {
  void * jresult ;
  Neo::Image *result = 0 ;
  
  result = (Neo::Image *)new Neo::Image();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Image(void * jarg1) {
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  
  arg1 = (Neo::Image *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_create(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (Neo::Image *)jarg1; 
  arg2 = (Neo::VAR_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->create(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_clear(void * jarg1, void * jarg2) {
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Neo::Image *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_readPixel(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (Neo::Image *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->readPixel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image_writePixel(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (Neo::Image *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->writePixel(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image_getData(void * jarg1) {
  void * jresult ;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  void *result = 0 ;
  
  arg1 = (Neo::Image *)jarg1; 
  result = (void *)(arg1)->getData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image_getDataType(void * jarg1) {
  int jresult ;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  Neo::VAR_TYPES result;
  
  arg1 = (Neo::Image *)jarg1; 
  result = (Neo::VAR_TYPES)(arg1)->getDataType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_getComponents(void * jarg1) {
  unsigned int jresult ;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Image *)jarg1; 
  result = (unsigned int)(arg1)->getComponents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_getWidth(void * jarg1) {
  unsigned int jresult ;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Image *)jarg1; 
  result = (unsigned int)(arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_getHeight(void * jarg1) {
  unsigned int jresult ;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Image *)jarg1; 
  result = (unsigned int)(arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Image_getSize(void * jarg1) {
  unsigned int jresult ;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Image *)jarg1; 
  result = (unsigned int)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sound() {
  void * jresult ;
  Neo::Sound *result = 0 ;
  
  result = (Neo::Sound *)new Neo::Sound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sound(void * jarg1) {
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  
  arg1 = (Neo::Sound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sound_create(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  Neo::SOUND_FORMAT arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::Sound *)jarg1; 
  arg2 = (Neo::SOUND_FORMAT)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->create(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sound_getData(void * jarg1) {
  void * jresult ;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  void *result = 0 ;
  
  arg1 = (Neo::Sound *)jarg1; 
  result = (void *)(arg1)->getData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sound_getFormat(void * jarg1) {
  int jresult ;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  Neo::SOUND_FORMAT result;
  
  arg1 = (Neo::Sound *)jarg1; 
  result = (Neo::SOUND_FORMAT)(arg1)->getFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sound_getSampleRate(void * jarg1) {
  unsigned int jresult ;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Sound *)jarg1; 
  result = (unsigned int)(arg1)->getSampleRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sound_getSize(void * jarg1) {
  unsigned int jresult ;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Sound *)jarg1; 
  result = (unsigned int)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_getLocalFilename(char * jarg1, char * jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  getLocalFilename(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_getGlobalFilename(char * jarg1, char * jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  getGlobalFilename(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_getRepertory(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  getRepertory(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_readTextFile(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)readTextFile((char const *)arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataRef_clear(void * jarg1) {
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataRef_destroy(void * jarg1) {
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataRef_incrScore(void * jarg1) {
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  (arg1)->incrScore();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataRef_decrScore(void * jarg1) {
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  (arg1)->decrScore();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataRef_getScore(void * jarg1) {
  unsigned int jresult ;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::DataRef *)jarg1; 
  result = (unsigned int)(arg1)->getScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataRef_update(void * jarg1) {
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT int SWIGSTDCALL CSharp_DataRef_getType(void * jarg1) {
  int jresult ;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  int result;
  
  arg1 = (Neo::DataRef *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataRef_setTime(void * jarg1, long jarg2) {
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  long arg2 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_DataRef_getTime(void * jarg1) {
  long jresult ;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  long result;
  
  arg1 = (Neo::DataRef *)jarg1; 
  result = (long)(arg1)->getTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DataRef_getFilename(void * jarg1) {
  char * jresult ;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  result = (char *)(arg1)->getFilename();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataRef(void * jarg1) {
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::DataRef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataManager(void * jarg1) {
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  
  arg1 = (Neo::DataManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataManager_clear(void * jarg1) {
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  
  arg1 = (Neo::DataManager *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataManager_addRef(void * jarg1, void * jarg2) {
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  Neo::DataRef *arg2 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::DataManager *)jarg1; 
  arg2 = (Neo::DataRef *)jarg2; 
  (arg1)->addRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataManager_getRef(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  unsigned int arg2 ;
  Neo::DataRef *result = 0 ;
  
  arg1 = (Neo::DataManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::DataRef *)(arg1)->getRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataManager_getRefsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::DataManager *)jarg1; 
  result = (unsigned int)(arg1)->getRefsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataManager() {
  void * jresult ;
  Neo::DataManager *result = 0 ;
  
  result = (Neo::DataManager *)new Neo::DataManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataLoadFunction(void * jarg1) {
  void * jresult ;
  bool (*arg1)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  Neo::DataLoadFunction *result = 0 ;
  
  arg1 = (bool (*)(char const *,void *))jarg1; 
  result = (Neo::DataLoadFunction *)new Neo::DataLoadFunction(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataLoadFunction(void * jarg1) {
  Neo::DataLoadFunction *arg1 = (Neo::DataLoadFunction *) 0 ;
  
  arg1 = (Neo::DataLoadFunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataLoadFunction_m_functionPtr_set(void * jarg1, void * jarg2) {
  Neo::DataLoadFunction *arg1 = (Neo::DataLoadFunction *) 0 ;
  bool (*arg2)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  
  arg1 = (Neo::DataLoadFunction *)jarg1; 
  arg2 = (bool (*)(char const *,void *))jarg2; 
  if (arg1) (arg1)->m_functionPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DataLoadFunction_m_functionPtr_get(void * jarg1) {
  void * jresult ;
  Neo::DataLoadFunction *arg1 = (Neo::DataLoadFunction *) 0 ;
  bool (*result)(char const *,void *) = 0 ;
  
  arg1 = (Neo::DataLoadFunction *)jarg1; 
  result = (bool (*)(char const *,void *)) ((arg1)->m_functionPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataLoader() {
  void * jresult ;
  Neo::DataLoader *result = 0 ;
  
  result = (Neo::DataLoader *)new Neo::DataLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataLoader(void * jarg1) {
  Neo::DataLoader *arg1 = (Neo::DataLoader *) 0 ;
  
  arg1 = (Neo::DataLoader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataLoader_clear(void * jarg1) {
  Neo::DataLoader *arg1 = (Neo::DataLoader *) 0 ;
  
  arg1 = (Neo::DataLoader *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataLoader_addLoader(void * jarg1, void * jarg2) {
  Neo::DataLoader *arg1 = (Neo::DataLoader *) 0 ;
  bool (*arg2)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  
  arg1 = (Neo::DataLoader *)jarg1; 
  arg2 = (bool (*)(char const *,void *))jarg2; 
  (arg1)->addLoader(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataLoader_loadData(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::DataLoader *arg1 = (Neo::DataLoader *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (Neo::DataLoader *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (void *)jarg3; 
  result = (bool)(arg1)->loadData((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_BONE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_CAMERA_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_LIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_ENTITY_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_SOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_TEXT_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_MESH_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_SOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_ARMATURE_ANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_MATERIALS_ANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_TEXTURES_ANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_SHADER_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_FONT_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NeoEngine() {
  void * jresult ;
  Neo::NeoEngine *result = 0 ;
  
  result = (Neo::NeoEngine *)new Neo::NeoEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NeoEngine(void * jarg1) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getInstance() {
  void * jresult ;
  Neo::NeoEngine *result = 0 ;
  
  result = (Neo::NeoEngine *)Neo::NeoEngine::getInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setActive(void * jarg1, unsigned int jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActive(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoEngine_isActive(void * jarg1) {
  unsigned int jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setSoundContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SoundContext *arg2 = (Neo::SoundContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::SoundContext *)jarg2; 
  (arg1)->setSoundContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setRenderingContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::RenderingContext *arg2 = (Neo::RenderingContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::RenderingContext *)jarg2; 
  (arg1)->setRenderingContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setPhysicsContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::PhysicsContext *arg2 = (Neo::PhysicsContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::PhysicsContext *)jarg2; 
  (arg1)->setPhysicsContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setScriptContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::ScriptContext *arg2 = (Neo::ScriptContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::ScriptContext *)jarg2; 
  (arg1)->setScriptContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setInputContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::InputContext *arg2 = (Neo::InputContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::InputContext *)jarg2; 
  (arg1)->setInputContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setSystemContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SystemContext *arg2 = (Neo::SystemContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::SystemContext *)jarg2; 
  (arg1)->setSystemContext(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getSoundContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SoundContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::SoundContext *)(arg1)->getSoundContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getRenderingContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::RenderingContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::RenderingContext *)(arg1)->getRenderingContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getPhysicsContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::PhysicsContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::PhysicsContext *)(arg1)->getPhysicsContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getScriptContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::ScriptContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::ScriptContext *)(arg1)->getScriptContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getInputContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::InputContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::InputContext *)(arg1)->getInputContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getSystemContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SystemContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::SystemContext *)(arg1)->getSystemContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getFontLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getFontLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getImageLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getImageLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getSoundLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getSoundLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getMeshLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getMeshLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getArmatureAnimLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getArmatureAnimLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getTexturesAnimLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getTexturesAnimLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getMaterialsAnimLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getMaterialsAnimLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getLevelLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::DataLoader *)(arg1)->getLevelLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getBehaviorManager(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  BehaviorManager *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (BehaviorManager *)(arg1)->getBehaviorManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getRendererManager(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  RendererManager *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (RendererManager *)(arg1)->getRendererManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setPackageManager(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  PackageManager *arg2 = (PackageManager *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (PackageManager *)jarg2; 
  (arg1)->setPackageManager(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getPackageManager(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  PackageManager *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (PackageManager *)(arg1)->getPackageManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_updateRequests(void * jarg1) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  (arg1)->updateRequests();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setLevel(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *arg2 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::Level *)jarg2; 
  (arg1)->setLevel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoEngine_loadLevel(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->loadLevel((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_requestLoadLevel(void * jarg1, char * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->requestLoadLevel((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoEngine_doesLevelExist(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->doesLevelExist((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getLevel(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::Level *)(arg1)->getLevel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setGame(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *arg2 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::NeoGame *)jarg2; 
  (arg1)->setGame(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getGame(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::NeoGame *)(arg1)->getGame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setRenderer(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Renderer *arg2 = (Renderer *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Renderer *)jarg2; 
  (arg1)->setRenderer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getRenderer(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Renderer *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Renderer *)(arg1)->getRenderer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubGame_update(void * jarg1) {
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  arg1 = (Neo::SubGame *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubGame_draw(void * jarg1) {
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  arg1 = (Neo::SubGame *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubGame_onBegin(void * jarg1) {
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  arg1 = (Neo::SubGame *)jarg1; 
  (arg1)->onBegin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubGame_onEnd(void * jarg1) {
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  arg1 = (Neo::SubGame *)jarg1; 
  (arg1)->onEnd();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SubGame(void * jarg1) {
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  arg1 = (Neo::SubGame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NeoGame() {
  void * jresult ;
  Neo::NeoGame *result = 0 ;
  
  result = (Neo::NeoGame *)new Neo::NeoGame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NeoGame(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NeoGame_getFrameDelta(void * jarg1) {
  float jresult ;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  float result;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  result = (float)(arg1)->getFrameDelta();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoGame_isRunning(void * jarg1) {
  unsigned int jresult ;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  result = (bool)(arg1)->isRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoGame_hasPostEffects(void * jarg1) {
  unsigned int jresult ;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  result = (bool)(arg1)->hasPostEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_enablePostEffects(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->enablePostEffects();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_disablePostEffects(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->disablePostEffects();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoGame_getPostProcessor(void * jarg1) {
  void * jresult ;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  PostProcessor *result = 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  result = (PostProcessor *)(arg1)->getPostProcessor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_begin(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_end(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_update(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_draw(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_onBegin(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->onBegin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_onEnd(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->onEnd();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_onBeginLevel(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->onBeginLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_onEndLevel(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->onEndLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_onBeginScene(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->onBeginScene();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_onEndScene(void * jarg1) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  (arg1)->onEndScene();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoGame_registerSubGame(void * jarg1, void * jarg2) {
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  Neo::SubGame *arg2 = (Neo::SubGame *) 0 ;
  
  arg1 = (Neo::NeoGame *)jarg1; 
  arg2 = (Neo::SubGame *)jarg2; 
  (arg1)->registerSubGame(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object3d__SWIG_0() {
  void * jresult ;
  Neo::Object3d *result = 0 ;
  
  result = (Neo::Object3d *)new Neo::Object3d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Object3d(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object3d__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Object3d const & type is null", 0);
    return 0;
  } 
  result = (Neo::Object3d *)new Neo::Object3d((Neo::Object3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_updateMatrix(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->updateMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_computeLocalMatrix(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->computeLocalMatrix();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getMatrix(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (Neo::Matrix4x4 *)(arg1)->getMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_unlinkChildren(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->unlinkChildren();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_computeChildrenMatrices(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->computeChildrenMatrices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setAttribute(void * jarg1, char * jarg2, void * jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  NeoVariable arg3 ;
  NeoVariable *argp3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (NeoVariable *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null NeoVariable", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getAttribute(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  NeoVariable result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getAttribute((char const *)arg2);
  jresult = new NeoVariable((const NeoVariable &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getUniformRotatedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (arg1)->getUniformRotatedVector((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getInverseRotatedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getInverseRotatedVector((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getRotatedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getRotatedVector((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getInversePosition(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getInversePosition((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getTransformedVector((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setPosition(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setPosition((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_translate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->translate((Neo::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_translate__SWIG_1(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->translate((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_rotate__SWIG_0(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  bool arg4 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_rotate__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedPosition(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getTransformedPosition();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getPosition(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getPosition();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setEulerRotation(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setEulerRotation((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setAxisAngleRotation(void * jarg1, void * jarg2, float jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->setAxisAngleRotation((Neo::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_addAxisAngleRotation(void * jarg1, void * jarg2, float jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->addAxisAngleRotation((Neo::Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setRotation(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Quaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setRotation((Neo::Quaternion const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedRotation(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getTransformedRotation();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getEulerRotation(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getEulerRotation();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getRotation(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Quaternion result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getRotation();
  jresult = new Neo::Quaternion((const Neo::Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setScale(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setScale((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedScale(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getTransformedScale();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getScale(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getScale();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_linkTo(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->linkTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_unLink(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->unLink();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setParent(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->setParent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_addChild(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->addChild(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_hasParent(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->hasParent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_getChildrenNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (unsigned int)(arg1)->getChildrenNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getParent(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (Neo::Object3d *)(arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getChild(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Object3d *)(arg1)->getChild(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Object3d_getId(void * jarg1) {
  unsigned long jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (unsigned long)(arg1)->getId();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setId(void * jarg1, unsigned long jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_updateBehaviors(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->updateBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_drawBehaviors(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->drawBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_deleteBehavior(void * jarg1, unsigned int jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deleteBehavior(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_invertBehavior(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->invertBehavior(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_changeBehavior(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Behavior *arg3 = (Behavior *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Behavior *)jarg3; 
  (arg1)->changeBehavior(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_addBehavior(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Behavior *arg2 = (Behavior *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Behavior *)jarg2; 
  (arg1)->addBehavior(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_getBehaviorsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (unsigned int)(arg1)->getBehaviorsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getBehavior(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Behavior *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Behavior *)(arg1)->getBehavior(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_needToUpdate(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->needToUpdate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setActive(void * jarg1, unsigned int jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActive(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_isActive(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setVisible(void * jarg1, unsigned int jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_isVisible(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_updateVisibility(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setName(void * jarg1, char * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Object3d_getName(void * jarg1) {
  char * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object3d_getType(void * jarg1) {
  int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  int result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_update(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Scene() {
  void * jresult ;
  Neo::Scene *result = 0 ;
  
  result = (Neo::Scene *)new Neo::Scene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Scene(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setName(void * jarg1, char * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Scene_getName(void * jarg1) {
  char * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getAmbientLight(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (arg1)->getAmbientLight();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setAmbientLight(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  argp2 = (Neo::Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAmbientLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setDataMode(void * jarg1, int jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES arg2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::M_DATA_MODES)jarg2; 
  (arg1)->setDataMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_getDataMode(void * jarg1) {
  int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::M_DATA_MODES)(arg1)->getDataMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setScriptFilename(void * jarg1, char * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setScriptFilename((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Scene_getScriptFilename(void * jarg1) {
  char * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (char *)(arg1)->getScriptFilename();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setGravity(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getGravity(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = ((Neo::Scene const *)arg1)->getGravity();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_playLoopSounds(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->playLoopSounds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_stopAllSounds(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->stopAllSounds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_deleteObject(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->deleteObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewCamera__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::OCamera *)(arg1)->addNewCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewCamera__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OCamera const & type is null", 0);
    return 0;
  } 
  result = (Neo::OCamera *)(arg1)->addNewCamera((Neo::OCamera const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewLight__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::OLight *)(arg1)->addNewLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewGroup__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::Object3d *)(arg1)->addNewGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewGroup__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Object3d const & type is null", 0);
    return 0;
  } 
  result = (Neo::Object3d *)(arg1)->addNewGroup((Neo::Object3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewLight__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *arg2 = 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OLight *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OLight const & type is null", 0);
    return 0;
  } 
  result = (Neo::OLight *)(arg1)->addNewLight((Neo::OLight const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewEntity__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::MeshRef *)jarg2; 
  result = (Neo::OEntity *)(arg1)->addNewEntity(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewEntity__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OEntity const & type is null", 0);
    return 0;
  } 
  result = (Neo::OEntity *)(arg1)->addNewEntity((Neo::OEntity const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewSound__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::SoundRef *)jarg2; 
  result = (Neo::OSound *)(arg1)->addNewSound(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewSound__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OSound *arg2 = 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OSound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OSound const & type is null", 0);
    return 0;
  } 
  result = (Neo::OSound *)(arg1)->addNewSound((Neo::OSound const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewText__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::FontRef *)jarg2; 
  result = (Neo::OText *)(arg1)->addNewText(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewText__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OText *arg2 = 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OText const & type is null", 0);
    return 0;
  } 
  result = (Neo::OText *)(arg1)->addNewText((Neo::OText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getObjectsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getObjectsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getCamerasNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getCamerasNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getLightsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getLightsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getEntitiesNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getEntitiesNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getSoundsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getSoundsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getTextsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getTextsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setCurrentCameraId(void * jarg1, unsigned int jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCurrentCameraId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getCurrentCameraId(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getCurrentCameraId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getCurrentCamera(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::OCamera *)(arg1)->getCurrentCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setCurrentFrame(void * jarg1, int jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCurrentFrame(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_getCurrentFrame(void * jarg1) {
  int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (int)(arg1)->getCurrentFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getObjectByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::Object3d *)(arg1)->getObjectByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getObjectByHandle(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned long arg2 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (Neo::Object3d *)(arg1)->getObjectByHandle(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getLightByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OLight *)(arg1)->getLightByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getCameraByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OCamera *)(arg1)->getCameraByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getEntityByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OEntity *)(arg1)->getEntityByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getSoundByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OSound *)(arg1)->getSoundByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getTextByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OText *)(arg1)->getTextByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getObjectIndex(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->getObjectIndex((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getObjectByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Object3d *)(arg1)->getObjectByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getLightByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OLight *)(arg1)->getLightByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getCameraByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OCamera *)(arg1)->getCameraByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getEntityByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OEntity *)(arg1)->getEntityByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getSoundByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OSound *)(arg1)->getSoundByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getTextByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OText *)(arg1)->getTextByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_begin(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_end(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_prepareCollisionShape(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2; 
  (arg1)->prepareCollisionShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_prepareCollisionObject(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2; 
  (arg1)->prepareCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_prepareConstraints(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2; 
  (arg1)->prepareConstraints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_preparePhysics(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->preparePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_updatePhysics(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->updatePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_update(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_updateObjectsBehaviors(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->updateObjectsBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_drawObjectsBehaviors(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->drawObjectsBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_updateObjectsMatrices(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->updateObjectsMatrices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_draw(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Level() {
  void * jresult ;
  Neo::Level *result = 0 ;
  
  result = (Neo::Level *)new Neo::Level();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Level(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_clear(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_clearScenes(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->clearScenes();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getFXManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  FXManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (FXManager *)(arg1)->getFXManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_createFX(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::ShaderRef *arg2 = (Neo::ShaderRef *) 0 ;
  Neo::ShaderRef *arg3 = (Neo::ShaderRef *) 0 ;
  FXRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (Neo::ShaderRef *)jarg2; 
  arg3 = (Neo::ShaderRef *)jarg3; 
  result = (FXRef *)(arg1)->createFX(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getFontManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getFontManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getTextureManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getTextureManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getShaderManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getShaderManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getSoundManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getSoundManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getMeshManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getMeshManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getArmatureAnimManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getArmatureAnimManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getTexturesAnimManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getTexturesAnimManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getMaterialsAnimManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::DataManager *)(arg1)->getMaterialsAnimManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadFont(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::FontRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::FontRef *)(arg1)->loadFont((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMesh__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MeshRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMesh__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadArmatureAnim__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadArmatureAnim__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexturesAnim__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexturesAnim__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMaterialsAnim__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMaterialsAnim__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexture__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexture__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexture__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadSound__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::SoundRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadSound__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadShader(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  M_SHADER_TYPES arg3 ;
  M_SHADER_TYPES *argp3 ;
  Neo::ShaderRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (M_SHADER_TYPES *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null M_SHADER_TYPES", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (Neo::ShaderRef *)(arg1)->loadShader((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_sendToUpdateQueue(void * jarg1, void * jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataRef *arg2 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (Neo::DataRef *)jarg2; 
  (arg1)->sendToUpdateQueue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_sendToClearQueue(void * jarg1, void * jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataRef *arg2 = (Neo::DataRef *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (Neo::DataRef *)jarg2; 
  (arg1)->sendToClearQueue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_updateQueueDatas(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->updateQueueDatas();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_clearQueueDatas(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->clearQueueDatas();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_changeCurrentScene(void * jarg1, unsigned int jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->changeCurrentScene(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_deleteScene(void * jarg1, unsigned int jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deleteScene(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Level_getSceneIndexByName(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->getSceneIndexByName((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_addNewScene(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::Scene *)(arg1)->addNewScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getSceneByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::Scene *)(arg1)->getSceneByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getCurrentScene(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::Scene *)(arg1)->getCurrentScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_setCurrentSceneId(void * jarg1, unsigned int jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCurrentSceneId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Level_getCurrentSceneId(void * jarg1) {
  unsigned int jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (unsigned int)(arg1)->getCurrentSceneId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Level_getScenesNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (unsigned int)(arg1)->getScenesNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getSceneByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Scene *)(arg1)->getSceneByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TexturePass__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  Texture *arg1 = (Texture *) 0 ;
  Neo::TEX_COMBINE_MODES arg2 ;
  unsigned int arg3 ;
  Neo::TexturePass *result = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (Neo::TEX_COMBINE_MODES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (Neo::TexturePass *)new Neo::TexturePass(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TexturePass__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::TexturePass *arg1 = 0 ;
  Neo::TexturePass *result = 0 ;
  
  arg1 = (Neo::TexturePass *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::TexturePass const & type is null", 0);
    return 0;
  } 
  result = (Neo::TexturePass *)new Neo::TexturePass((Neo::TexturePass const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TexturePass_setMapChannel(void * jarg1, unsigned int jarg2) {
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::TexturePass *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMapChannel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TexturePass_setTexture(void * jarg1, void * jarg2) {
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (Neo::TexturePass *)jarg1; 
  arg2 = (Texture *)jarg2; 
  (arg1)->setTexture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TexturePass_getMapChannel(void * jarg1) {
  unsigned int jresult ;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::TexturePass *)jarg1; 
  result = (unsigned int)(arg1)->getMapChannel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TexturePass_getTexture(void * jarg1) {
  void * jresult ;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Texture *result = 0 ;
  
  arg1 = (Neo::TexturePass *)jarg1; 
  result = (Texture *)(arg1)->getTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TexturePass_setCombineMode(void * jarg1, int jarg2) {
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Neo::TEX_COMBINE_MODES arg2 ;
  
  arg1 = (Neo::TexturePass *)jarg1; 
  arg2 = (Neo::TEX_COMBINE_MODES)jarg2; 
  (arg1)->setCombineMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TexturePass_getCombineMode(void * jarg1) {
  int jresult ;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Neo::TEX_COMBINE_MODES result;
  
  arg1 = (Neo::TexturePass *)jarg1; 
  result = (Neo::TEX_COMBINE_MODES)(arg1)->getCombineMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TexturePass(void * jarg1) {
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  
  arg1 = (Neo::TexturePass *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Material__SWIG_0() {
  void * jresult ;
  Neo::Material *result = 0 ;
  
  result = (Neo::Material *)new Neo::Material();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Material__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::Material *arg1 = 0 ;
  Neo::Material *result = 0 ;
  
  arg1 = (Neo::Material *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Material const & type is null", 0);
    return 0;
  } 
  result = (Neo::Material *)new Neo::Material((Neo::Material const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Material(void * jarg1) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setType(void * jarg1, int jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material_getType(void * jarg1) {
  int jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  int result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setFXRef(void * jarg1, void * jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *arg2 = (FXRef *) 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (FXRef *)jarg2; 
  (arg1)->setFXRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setZFXRef(void * jarg1, void * jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *arg2 = (FXRef *) 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (FXRef *)jarg2; 
  (arg1)->setZFXRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Material_getFXRef(void * jarg1) {
  void * jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *result = 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (FXRef *)(arg1)->getFXRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Material_getZFXRef(void * jarg1) {
  void * jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  FXRef *result = 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (FXRef *)(arg1)->getZFXRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setBlendMode(void * jarg1, int jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::BLENDING_MODES arg2 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (Neo::BLENDING_MODES)jarg2; 
  (arg1)->setBlendMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material_getBlendMode(void * jarg1) {
  int jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::BLENDING_MODES result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (Neo::BLENDING_MODES)(arg1)->getBlendMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setOpacity(void * jarg1, float jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setOpacity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setShininess(void * jarg1, float jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setShininess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setCustomValue(void * jarg1, float jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setCustomValue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setDiffuse(void * jarg1, void * jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setDiffuse((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setSpecular(void * jarg1, void * jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setSpecular((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setEmit(void * jarg1, void * jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setEmit((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_setCustomColor(void * jarg1, void * jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setCustomColor((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_getOpacity(void * jarg1) {
  float jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (float)(arg1)->getOpacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_getShininess(void * jarg1) {
  float jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (float)(arg1)->getShininess();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_getCustomValue(void * jarg1) {
  float jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (float)(arg1)->getCustomValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Material_getEmit(void * jarg1) {
  void * jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = ((Neo::Material const *)arg1)->getEmit();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Material_getDiffuse(void * jarg1) {
  void * jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = ((Neo::Material const *)arg1)->getDiffuse();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Material_getSpecular(void * jarg1) {
  void * jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = ((Neo::Material const *)arg1)->getSpecular();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Material_getCustomColor(void * jarg1) {
  void * jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = ((Neo::Material const *)arg1)->getCustomColor();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_allocTexturesPass(void * jarg1, unsigned int jarg2) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->allocTexturesPass(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_clearTexturesPass(void * jarg1) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  (arg1)->clearTexturesPass();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_addTexturePass(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Neo::TEX_COMBINE_MODES arg3 ;
  unsigned int arg4 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Neo::TEX_COMBINE_MODES)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->addTexturePass(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Material_getTexturesPassNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Material *)jarg1; 
  result = (unsigned int)(arg1)->getTexturesPassNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Material_getTexturePass(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int arg2 ;
  Neo::TexturePass *result = 0 ;
  
  arg1 = (Neo::Material *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::TexturePass *)(arg1)->getTexturePass(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MaterialDisplay__SWIG_0(int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::PRIMITIVE_TYPES arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Neo::MaterialDisplay *result = 0 ;
  
  arg1 = (Neo::PRIMITIVE_TYPES)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (Neo::MaterialDisplay *)new Neo::MaterialDisplay(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MaterialDisplay__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::MaterialDisplay *arg1 = 0 ;
  Neo::MaterialDisplay *result = 0 ;
  
  arg1 = (Neo::MaterialDisplay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::MaterialDisplay const & type is null", 0);
    return 0;
  } 
  result = (Neo::MaterialDisplay *)new Neo::MaterialDisplay((Neo::MaterialDisplay const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MaterialDisplay(void * jarg1) {
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MaterialDisplay_getPrimitiveType(void * jarg1) {
  int jresult ;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::PRIMITIVE_TYPES result;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  result = (Neo::PRIMITIVE_TYPES)(arg1)->getPrimitiveType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MaterialDisplay_getBegin(void * jarg1) {
  unsigned int jresult ;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  result = (unsigned int)(arg1)->getBegin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MaterialDisplay_getSize(void * jarg1) {
  unsigned int jresult ;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  result = (unsigned int)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialDisplay_setCullMode(void * jarg1, int jarg2) {
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::CULL_MODES arg2 ;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  arg2 = (Neo::CULL_MODES)jarg2; 
  (arg1)->setCullMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MaterialDisplay_getCullMode(void * jarg1) {
  int jresult ;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::CULL_MODES result;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  result = (Neo::CULL_MODES)(arg1)->getCullMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialDisplay_setMaterial(void * jarg1, void * jarg2) {
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::Material *arg2 = (Neo::Material *) 0 ;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  arg2 = (Neo::Material *)jarg2; 
  (arg1)->setMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MaterialDisplay_getMaterial(void * jarg1) {
  void * jresult ;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::Material *result = 0 ;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  result = (Neo::Material *)(arg1)->getMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MaterialDisplay_setVisibility(void * jarg1, unsigned int jarg2) {
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisibility(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MaterialDisplay_isVisible(void * jarg1) {
  unsigned int jresult ;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  bool result;
  
  arg1 = (Neo::MaterialDisplay *)jarg1; 
  result = (bool)(arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SubMesh() {
  void * jresult ;
  Neo::SubMesh *result = 0 ;
  
  result = (Neo::SubMesh *)new Neo::SubMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SubMesh(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearMorphingData(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearMorphingData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_createMorphingData(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  MorphingData *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (MorphingData *)(arg1)->createMorphingData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getMorphingData(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  MorphingData *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (MorphingData *)(arg1)->getMorphingData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearSkinData(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearSkinData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_createSkinData(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  SkinData *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (SkinData *)(arg1)->createSkinData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getSkinData(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  SkinData *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (SkinData *)(arg1)->getSkinData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearIndices(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearIndices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearVertices(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearVertices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearNormals(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearNormals();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearTangents(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearTangents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearTexCoords(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearTexCoords();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearColors(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearColors();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_allocIndices(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  void *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Neo::VAR_TYPES)jarg3; 
  result = (void *)(arg1)->allocIndices(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_allocColors(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Color *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Color *)(arg1)->allocColors(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_allocVertices(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Vector3 *)(arg1)->allocVertices(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_allocNormals(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Vector3 *)(arg1)->allocNormals(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_allocTangents(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Vector3 *)(arg1)->allocTangents(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_allocTexCoords(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector2 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Vector2 *)(arg1)->allocTexCoords(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getIndicesSize(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int)(arg1)->getIndicesSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getVerticesSize(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int)(arg1)->getVerticesSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getNormalsSize(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int)(arg1)->getNormalsSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getTangentsSize(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int)(arg1)->getTangentsSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getTexCoordsSize(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int)(arg1)->getTexCoordsSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getColorsSize(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int)(arg1)->getColorsSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SubMesh_getIndicesType(void * jarg1) {
  int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::VAR_TYPES result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (Neo::VAR_TYPES)(arg1)->getIndicesType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getIndices(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  void *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (void *)(arg1)->getIndices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getColors(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Color *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (Neo::Color *)(arg1)->getColors();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getVertices(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (Neo::Vector3 *)(arg1)->getVertices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getNormals(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (Neo::Vector3 *)(arg1)->getNormals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getTangents(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (Neo::Vector3 *)(arg1)->getTangents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getTexCoords(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (Neo::Vector2 *)(arg1)->getTexCoords();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearVBO(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearVBO();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getVBOid1(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int *)(arg1)->getVBOid1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getVBOid2(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int *)(arg1)->getVBOid2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearMapChannelOffset(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearMapChannelOffset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_setMapChannelOffset(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setMapChannelOffset(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_isMapChannelExist(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->isMapChannelExist(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getMapChannelOffset(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getMapChannelOffset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getMapChannelOffsets(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  map< unsigned int,unsigned int > *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (map< unsigned int,unsigned int > *)(arg1)->getMapChannelOffsets();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_allocDisplays(void * jarg1, unsigned int jarg2) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->allocDisplays(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubMesh_clearDisplays(void * jarg1) {
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  (arg1)->clearDisplays();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_addNewDisplay(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::MaterialDisplay *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (Neo::PRIMITIVE_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (Neo::MaterialDisplay *)(arg1)->addNewDisplay(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_getDisplaysNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (unsigned int)(arg1)->getDisplaysNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getDisplay(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::MaterialDisplay *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::MaterialDisplay *)(arg1)->getDisplay(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubMesh_getBoundingBox(void * jarg1) {
  void * jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Box3d *result = 0 ;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (Box3d *)(arg1)->getBoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubMesh_hasTransparency(void * jarg1) {
  unsigned int jresult ;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  bool result;
  
  arg1 = (Neo::SubMesh *)jarg1; 
  result = (bool)(arg1)->hasTransparency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimRange() {
  void * jresult ;
  Neo::AnimRange *result = 0 ;
  
  result = (Neo::AnimRange *)new Neo::AnimRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimRange_loops_set(void * jarg1, int jarg2) {
  Neo::AnimRange *arg1 = (Neo::AnimRange *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::AnimRange *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->loops = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimRange_loops_get(void * jarg1) {
  int jresult ;
  Neo::AnimRange *arg1 = (Neo::AnimRange *) 0 ;
  int result;
  
  arg1 = (Neo::AnimRange *)jarg1; 
  result = (int) ((arg1)->loops);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnimRange(void * jarg1) {
  Neo::AnimRange *arg1 = (Neo::AnimRange *) 0 ;
  
  arg1 = (Neo::AnimRange *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh() {
  void * jresult ;
  Neo::Mesh *result = 0 ;
  
  result = (Neo::Mesh *)new Neo::Mesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mesh(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getNew() {
  void * jresult ;
  Neo::Mesh *result = 0 ;
  
  result = (Neo::Mesh *)Neo::Mesh::getNew();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_destroy(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clear(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clearAnimsRanges(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->clearAnimsRanges();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_allocAnimsRanges(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::AnimRange *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::AnimRange *)(arg1)->allocAnimsRanges(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mesh_getAnimsRangesNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (unsigned int)(arg1)->getAnimsRangesNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getAnimsRanges(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::AnimRange *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Neo::AnimRange *)(arg1)->getAnimsRanges();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_setArmatureAnimRef(void * jarg1, void * jarg2) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::ArmatureAnimRef *arg2 = (Neo::ArmatureAnimRef *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (Neo::ArmatureAnimRef *)jarg2; 
  (arg1)->setArmatureAnimRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getArmatureAnimRef(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Neo::ArmatureAnimRef *)(arg1)->getArmatureAnimRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getArmatureAnim(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  ArmatureAnim *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (ArmatureAnim *)(arg1)->getArmatureAnim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_setTexturesAnimRef(void * jarg1, void * jarg2) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnimRef *arg2 = (Neo::TexturesAnimRef *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (Neo::TexturesAnimRef *)jarg2; 
  (arg1)->setTexturesAnimRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getTexturesAnimRef(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Neo::TexturesAnimRef *)(arg1)->getTexturesAnimRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getTexturesAnim(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  TexturesAnim *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (TexturesAnim *)(arg1)->getTexturesAnim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_setMaterialsAnimRef(void * jarg1, void * jarg2) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnimRef *arg2 = (Neo::MaterialsAnimRef *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (Neo::MaterialsAnimRef *)jarg2; 
  (arg1)->setMaterialsAnimRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getMaterialsAnimRef(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Neo::MaterialsAnimRef *)(arg1)->getMaterialsAnimRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getMaterialsAnim(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  MaterialsAnim *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (MaterialsAnim *)(arg1)->getMaterialsAnim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clearArmature(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->clearArmature();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_createArmature(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Armature *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Armature *)(arg1)->createArmature();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getArmature(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Armature *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Armature *)(arg1)->getArmature();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_allocTextures(void * jarg1, unsigned int jarg2) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->allocTextures(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clearTextures(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->clearTextures();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_addNewTexture(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  Texture *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (Neo::TextureRef *)jarg2; 
  result = (Texture *)(arg1)->addNewTexture(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mesh_getTexturesNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (unsigned int)(arg1)->getTexturesNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getTexture(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Texture *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Texture *)(arg1)->getTexture(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_allocMaterials(void * jarg1, unsigned int jarg2) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->allocMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clearMaterials(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->clearMaterials();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_addNewMaterial(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::Material *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Neo::Material *)(arg1)->addNewMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mesh_getMaterialsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (unsigned int)(arg1)->getMaterialsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getMaterial(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::Material *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Material *)(arg1)->getMaterial(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clearSubMeshs(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->clearSubMeshs();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_allocSubMeshs(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::SubMesh *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::SubMesh *)(arg1)->allocSubMeshs(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mesh_getSubMeshsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (unsigned int)(arg1)->getSubMeshsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getSubMeshs(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::SubMesh *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Neo::SubMesh *)(arg1)->getSubMeshs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_updateBoundingBox(void * jarg1) {
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  (arg1)->updateBoundingBox();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getBoundingBox(void * jarg1) {
  void * jresult ;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Box3d *result = 0 ;
  
  arg1 = (Neo::Mesh *)jarg1; 
  result = (Box3d *)(arg1)->getBoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsConstraint__SWIG_0() {
  void * jresult ;
  Neo::PhysicsConstraint *result = 0 ;
  
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsConstraint__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::PhysicsConstraint const & type is null", 0);
    return 0;
  } 
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint((Neo::PhysicsConstraint const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_constraintId_set(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->constraintId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsConstraint_constraintId_get(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (unsigned int) ((arg1)->constraintId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_parentObjectId_set(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->parentObjectId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsConstraint_parentObjectId_get(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (unsigned int) ((arg1)->parentObjectId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_parentName_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  String arg2 ;
  String *argp2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  argp2 = (String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null String", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->parentName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_parentName_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  String result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result =  ((arg1)->parentName);
  jresult = new String((const String &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_pivot_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  if (arg1) (arg1)->pivot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_pivot_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (Neo::Vector3 *)& ((arg1)->pivot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_lowerLinearLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  if (arg1) (arg1)->lowerLinearLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_lowerLinearLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (Neo::Vector3 *)& ((arg1)->lowerLinearLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_upperLinearLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  if (arg1) (arg1)->upperLinearLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_upperLinearLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (Neo::Vector3 *)& ((arg1)->upperLinearLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_lowerAngularLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  if (arg1) (arg1)->lowerAngularLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_lowerAngularLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (Neo::Vector3 *)& ((arg1)->lowerAngularLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_upperAngularLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  if (arg1) (arg1)->upperAngularLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_upperAngularLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (Neo::Vector3 *)& ((arg1)->upperAngularLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_disableParentCollision_set(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disableParentCollision = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsConstraint_disableParentCollision_get(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (bool) ((arg1)->disableParentCollision);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsConstraint(void * jarg1) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsProperties__SWIG_0() {
  void * jresult ;
  Neo::PhysicsProperties *result = 0 ;
  
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsProperties__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::PhysicsProperties const & type is null", 0);
    return 0;
  } 
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties((Neo::PhysicsProperties const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsProperties(void * jarg1) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_deleteConstraint(void * jarg1) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  (arg1)->deleteConstraint();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsProperties_createConstraint(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (Neo::PhysicsConstraint *)(arg1)->createConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsProperties_getConstraint(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (Neo::PhysicsConstraint *)(arg1)->getConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setShapeId(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setShapeId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsProperties_getShapeId(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (unsigned int)(arg1)->getShapeId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setCollisionObjectId(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCollisionObjectId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsProperties_getCollisionObjectId(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (unsigned int)(arg1)->getCollisionObjectId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setCollisionShape(void * jarg1, int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (Neo::COLLISION_SHAPE_TYPE)jarg2; 
  (arg1)->setCollisionShape(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsProperties_getCollisionShape(void * jarg1) {
  int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (Neo::COLLISION_SHAPE_TYPE)(arg1)->getCollisionShape();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setGhost(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGhost(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsProperties_isGhost(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (bool)(arg1)->isGhost();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setMass(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMass(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getMass(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setFriction(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getFriction(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setRestitution(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRestitution(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getRestitution(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setLinearDamping(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setLinearDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getLinearDamping(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getLinearDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setAngularDamping(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAngularDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getAngularDamping(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getAngularDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setAngularFactor(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAngularFactor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getAngularFactor(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getAngularFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setLinearFactor(void * jarg1, void * jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearFactor((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsProperties_getLinearFactor(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (Neo::Vector3 *)(arg1)->getLinearFactor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OEntity__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::MeshRef *)jarg1; 
  result = (Neo::OEntity *)new Neo::OEntity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OEntity(void * jarg1) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OEntity__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OEntity const & type is null", 0);
    return 0;
  } 
  result = (Neo::OEntity *)new Neo::OEntity((Neo::OEntity const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_enablePhysics__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::Scene *arg2 = (Neo::Scene *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (Neo::Scene *)jarg2; 
  result = (Neo::PhysicsProperties *)(arg1)->enablePhysics(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_enablePhysics__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::PhysicsProperties *)(arg1)->enablePhysics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isColliding__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2; 
  result = (bool)(arg1)->isColliding(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isColliding__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->isColliding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_enableOccluder(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableOccluder(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isOccluder(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->isOccluder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OEntity_getType(void * jarg1) {
  int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  int result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setActive(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActive(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setInvisible(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInvisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isInvisible(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->isInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getMesh(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::Mesh *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::Mesh *)(arg1)->getMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setMeshRef(void * jarg1, void * jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (Neo::MeshRef *)jarg2; 
  (arg1)->setMeshRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getMeshRef(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::MeshRef *)(arg1)->getMeshRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_changeAnimation(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->changeAnimation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isAnimationOver(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->isAnimationOver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setAnimationSpeed(void * jarg1, float jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAnimationSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setCurrentFrame(void * jarg1, float jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setCurrentFrame(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_getAnimationId(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (unsigned int)(arg1)->getAnimationId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OEntity_getAnimationSpeed(void * jarg1) {
  float jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (float)(arg1)->getAnimationSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OEntity_getCurrentFrame(void * jarg1) {
  float jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (float)(arg1)->getCurrentFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_deletePhysicsProperties(void * jarg1) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  (arg1)->deletePhysicsProperties();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_createPhysicsProperties(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::PhysicsProperties *)(arg1)->createPhysicsProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getPhysicsProperties(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::PhysicsProperties *)(arg1)->getPhysicsProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getBoundingBox(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Box3d *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Box3d *)(arg1)->getBoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_hasShadow(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->hasShadow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_enableShadow(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableShadow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_update(void * jarg1) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_updateVisibility(void * jarg1, void * jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OLight__SWIG_0() {
  void * jresult ;
  Neo::OLight *result = 0 ;
  
  result = (Neo::OLight *)new Neo::OLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OLight(void * jarg1) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OLight__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OLight *arg1 = 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::OLight *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OLight const & type is null", 0);
    return 0;
  } 
  result = (Neo::OLight *)new Neo::OLight((Neo::OLight const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OLight_getType(void * jarg1) {
  int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  int result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setLightType(void * jarg1, int jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (Neo::LIGHT_TYPES)jarg2; 
  (arg1)->setLightType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OLight_getLightType(void * jarg1) {
  int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (Neo::LIGHT_TYPES)(arg1)->getLightType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_castShadow(void * jarg1, unsigned int jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->castShadow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setShadowQuality(void * jarg1, unsigned int jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setShadowQuality(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setShadowBias(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setShadowBias(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setShadowBlur(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setShadowBlur(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OLight_isCastingShadow(void * jarg1) {
  unsigned int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (bool)(arg1)->isCastingShadow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OLight_getShadowQuality(void * jarg1) {
  unsigned int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (unsigned int)(arg1)->getShadowQuality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getShadowBias(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getShadowBias();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getShadowBlur(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getShadowBlur();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setRadius(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getRadius(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setIntensity(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setIntensity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setColor(void * jarg1, void * jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor((Neo::Vector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getIntensity(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getIntensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OLight_getColor(void * jarg1) {
  void * jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = ((Neo::OLight const *)arg1)->getColor();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OLight_getFinalColor(void * jarg1) {
  void * jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = ((Neo::OLight const *)arg1)->getFinalColor();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setSpotAngle(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSpotAngle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setSpotExponent(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSpotExponent(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getSpotAngle(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getSpotAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getSpotExponent(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getSpotExponent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_updateVisibility(void * jarg1, void * jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSound__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::SoundRef *)jarg1; 
  result = (Neo::OSound *)new Neo::OSound(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSound(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSound__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OSound *arg1 = 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::OSound *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OSound const & type is null", 0);
    return 0;
  } 
  result = (Neo::OSound *)new Neo::OSound((Neo::OSound const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSound_getType(void * jarg1) {
  int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  int result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setSoundRef(void * jarg1, void * jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (Neo::SoundRef *)jarg2; 
  (arg1)->setSoundRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSound_getSoundRef(void * jarg1) {
  void * jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (Neo::SoundRef *)(arg1)->getSoundRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_getSourceId(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (unsigned int)(arg1)->getSourceId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setLooping(void * jarg1, unsigned int jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLooping(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setRelative(void * jarg1, unsigned int jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRelative(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setPitch(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setPitch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setGain(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setGain(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setRadius(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setRolloff(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRolloff(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_isPlaying(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (bool)(arg1)->isPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_isLooping(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (bool)(arg1)->isLooping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_isRelative(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (bool)(arg1)->isRelative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getPitch(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getGain(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getGain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getRadius(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getRolloff(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getRolloff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getTimePos(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getTimePos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getSoundDuration(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getSoundDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_play(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->play();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_pause(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_stop(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_update(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OText__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::FontRef *)jarg1; 
  result = (Neo::OText *)new Neo::OText(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OText(void * jarg1) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OText__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OText const & type is null", 0);
    return 0;
  } 
  result = (Neo::OText *)new Neo::OText((Neo::OText const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OText_getType(void * jarg1) {
  int jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  int result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setFontRef(void * jarg1, void * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (Neo::FontRef *)jarg2; 
  (arg1)->setFontRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getFont(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Font *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Font *)(arg1)->getFont();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getFontRef(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Neo::FontRef *)(arg1)->getFontRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setText(void * jarg1, char * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setText((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OText_getText(void * jarg1) {
  char * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (char *)(arg1)->getText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getLinesOffset(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  vector< float > *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (vector< float > *)(arg1)->getLinesOffset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setAlign(void * jarg1, int jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES arg2 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (Neo::TEXT_ALIGN_MODES)jarg2; 
  (arg1)->setAlign(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OText_getAlign(void * jarg1) {
  int jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Neo::TEXT_ALIGN_MODES)(arg1)->getAlign();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setSize(void * jarg1, float jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OText_getSize(void * jarg1) {
  float jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (float)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setColor(void * jarg1, void * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (Neo::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor((Neo::Vector4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getColor(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Vector4 result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = ((Neo::OText const *)arg1)->getColor();
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getBoundingBox(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Box3d *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Box3d *)(arg1)->getBoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_updateVisibility(void * jarg1, void * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OCamera__SWIG_0() {
  void * jresult ;
  Neo::OCamera *result = 0 ;
  
  result = (Neo::OCamera *)new Neo::OCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OCamera(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OCamera__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OCamera const & type is null", 0);
    return 0;
  } 
  result = (Neo::OCamera *)new Neo::OCamera((Neo::OCamera const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OCamera_getType(void * jarg1) {
  int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_enableFog(void * jarg1, unsigned int jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableFog(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getFogColor(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (arg1)->getFogColor();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setFogColor(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  argp2 = (Neo::Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setFogColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_enableOrtho(void * jarg1, unsigned int jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableOrtho(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setFov(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFov(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setFogDistance(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFogDistance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setClippingNear(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setClippingNear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setClippingFar(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setClippingFar(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OCamera_isOrtho(void * jarg1) {
  unsigned int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (bool)(arg1)->isOrtho();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OCamera_hasFog(void * jarg1) {
  unsigned int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (bool)(arg1)->hasFog();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getClippingNear(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getClippingNear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getClippingFar(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getClippingFar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getFov(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getFov();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getFogDistance(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getFogDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setClearColor(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  argp2 = (Neo::Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setClearColor(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getClearColor(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = ((Neo::OCamera const *)arg1)->getClearColor();
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getProjectedPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::OCamera const *)arg1)->getProjectedPoint((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getUnProjectedPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::OCamera const *)arg1)->getUnProjectedPoint((Neo::Vector3 const &)*arg2);
  jresult = new Neo::Vector3((const Neo::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getCurrentViewMatrix(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Neo::Matrix4x4 *)(arg1)->getCurrentViewMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getCurrentProjMatrix(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Neo::Matrix4x4 *)(arg1)->getCurrentProjMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getCurrentViewport(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (int *)(arg1)->getCurrentViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getFrustum(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Frustum *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Frustum *)(arg1)->getFrustum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setSceneLayer(void * jarg1, unsigned int jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setSceneLayer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OCamera_getSceneLayer(void * jarg1) {
  unsigned int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (unsigned int)(arg1)->getSceneLayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setRenderColorTexture(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (Neo::TextureRef *)jarg2; 
  (arg1)->setRenderColorTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setRenderDepthTexture(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (Neo::TextureRef *)jarg2; 
  (arg1)->setRenderDepthTexture(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getRenderColorTexture(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Neo::TextureRef *)(arg1)->getRenderColorTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getRenderDepthTexture(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Neo::TextureRef *)(arg1)->getRenderDepthTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_drawSkybox(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  (arg1)->drawSkybox();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_loadSkybox(void * jarg1, char * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->loadSkybox((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getSkybox(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Skybox *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Skybox *)(arg1)->getSkybox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_updateListener(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  (arg1)->updateListener();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_enable(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  (arg1)->enable();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Texture__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  Neo::Texture *result = 0 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  result = (Neo::Texture *)new Neo::Texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Texture__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::Texture *arg1 = 0 ;
  Neo::Texture *result = 0 ;
  
  arg1 = (Neo::Texture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Texture const & type is null", 0);
    return 0;
  } 
  result = (Neo::Texture *)new Neo::Texture((Neo::Texture const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_setTextureRef(void * jarg1, void * jarg2) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  arg2 = (Neo::TextureRef *)jarg2; 
  (arg1)->setTextureRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_getTextureRef(void * jarg1) {
  void * jresult ;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  result = (Neo::TextureRef *)(arg1)->getTextureRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_setGenMode(void * jarg1, int jarg2) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TEX_GEN_MODES arg2 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  arg2 = (Neo::TEX_GEN_MODES)jarg2; 
  (arg1)->setGenMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_getGenMode(void * jarg1) {
  int jresult ;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TEX_GEN_MODES result;
  
  arg1 = (Neo::Texture *)jarg1; 
  result = (Neo::TEX_GEN_MODES)(arg1)->getGenMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_setUWrapMode(void * jarg1, int jarg2) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  arg2 = (Neo::WRAP_MODES)jarg2; 
  (arg1)->setUWrapMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_setVWrapMode(void * jarg1, int jarg2) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  arg2 = (Neo::WRAP_MODES)jarg2; 
  (arg1)->setVWrapMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_getUWrapMode(void * jarg1) {
  int jresult ;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES result;
  
  arg1 = (Neo::Texture *)jarg1; 
  result = (Neo::WRAP_MODES)(arg1)->getUWrapMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_getVWrapMode(void * jarg1) {
  int jresult ;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES result;
  
  arg1 = (Neo::Texture *)jarg1; 
  result = (Neo::WRAP_MODES)(arg1)->getVWrapMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_setTexTranslate(void * jarg1, void * jarg2) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->setTexTranslate((Neo::Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_setTexScale(void * jarg1, void * jarg2) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  arg2 = (Neo::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->setTexScale((Neo::Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_setTexRotate(void * jarg1, float jarg2) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setTexRotate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_getTexTranslate(void * jarg1) {
  void * jresult ;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Texture *)jarg1; 
  result = ((Neo::Texture const *)arg1)->getTexTranslate();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_getTexScale(void * jarg1) {
  void * jresult ;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo::Texture *)jarg1; 
  result = ((Neo::Texture const *)arg1)->getTexScale();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Texture_getTexRotate(void * jarg1) {
  float jresult ;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  float result;
  
  arg1 = (Neo::Texture *)jarg1; 
  result = (float)(arg1)->getTexRotate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Texture(void * jarg1) {
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  
  arg1 = (Neo::Texture *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureRef(unsigned int jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::TextureRef *)new Neo::TextureRef(arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TextureRef(void * jarg1) {
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureRef_clear(void * jarg1) {
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureRef_destroy(void * jarg1) {
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureRef_getNew(unsigned int jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::TextureRef *)Neo::TextureRef::getNew(arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureRef_update(void * jarg1) {
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextureRef_getType(void * jarg1) {
  int jresult ;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  int result;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextureRef_isMipmapEnabled(void * jarg1) {
  unsigned int jresult ;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  bool result;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  result = (bool)(arg1)->isMipmapEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextureRef_getComponents(void * jarg1) {
  unsigned int jresult ;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  result = (unsigned int)(arg1)->getComponents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextureRef_getWidth(void * jarg1) {
  unsigned int jresult ;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  result = (unsigned int)(arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextureRef_getHeight(void * jarg1) {
  unsigned int jresult ;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  result = (unsigned int)(arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureRef_setWidth(void * jarg1, unsigned int jarg2) {
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureRef_setHeight(void * jarg1, unsigned int jarg2) {
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureRef_setTextureId(void * jarg1, unsigned int jarg2) {
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setTextureId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextureRef_getTextureId(void * jarg1) {
  unsigned int jresult ;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::TextureRef *)jarg1; 
  result = (unsigned int)(arg1)->getTextureId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3d__SWIG_0() {
  void * jresult ;
  Neo::Box3d *result = 0 ;
  
  result = (Neo::Box3d *)new Neo::Box3d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3d__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::Box3d *arg1 = 0 ;
  Neo::Box3d *result = 0 ;
  
  arg1 = (Neo::Box3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Box3d const & type is null", 0);
    return 0;
  } 
  result = (Neo::Box3d *)new Neo::Box3d((Neo::Box3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Box3d__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Box3d *result = 0 ;
  
  arg1 = (Neo::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Neo::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Neo::Box3d *)new Neo::Box3d((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3d_min_set(void * jarg1, void * jarg2) {
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::Box3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  if (arg1) (arg1)->min = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3d_min_get(void * jarg1) {
  void * jresult ;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::Box3d *)jarg1; 
  result = (Neo::Vector3 *)& ((arg1)->min);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3d_max_set(void * jarg1, void * jarg2) {
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  arg1 = (Neo::Box3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  if (arg1) (arg1)->max = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Box3d_max_get(void * jarg1) {
  void * jresult ;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  arg1 = (Neo::Box3d *)jarg1; 
  result = (Neo::Vector3 *)& ((arg1)->max);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Box3d_initFromPoints(void * jarg1, void * jarg2, unsigned int jarg3) {
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::Box3d *)jarg1; 
  arg2 = (Neo::Vector3 *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->initFromPoints((Neo::Vector3 const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Box3d_isInCollisionWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Box3d *arg2 = 0 ;
  bool result;
  
  arg1 = (Neo::Box3d *)jarg1; 
  arg2 = (Neo::Box3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Box3d const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->isInCollisionWith((Neo::Box3d const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Box3d(void * jarg1) {
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  
  arg1 = (Neo::Box3d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Armature() {
  void * jresult ;
  Neo::Armature *result = 0 ;
  
  result = (Neo::Armature *)new Neo::Armature();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Armature(void * jarg1) {
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Armature_clearBones(void * jarg1) {
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  (arg1)->clearBones();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Armature_allocBones(void * jarg1, unsigned int jarg2) {
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->allocBones(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Armature_getBoneId(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (Neo::Armature *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->getBoneId((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Armature_addNewBone(void * jarg1) {
  void * jresult ;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  Neo::OBone *result = 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  result = (Neo::OBone *)(arg1)->addNewBone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Armature_getBoneByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OBone *result = 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OBone *)(arg1)->getBoneByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Armature_getBonesNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Armature *)jarg1; 
  result = (unsigned int)(arg1)->getBonesNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Armature_getBone(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int arg2 ;
  Neo::OBone *result = 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OBone *)(arg1)->getBone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Armature_constructBonesInversePoseMatrix(void * jarg1) {
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  (arg1)->constructBonesInversePoseMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Armature_updateBonesSkinMatrix(void * jarg1) {
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  (arg1)->updateBonesSkinMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Armature_processBonesLinking(void * jarg1) {
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  arg1 = (Neo::Armature *)jarg1; 
  (arg1)->processBonesLinking();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Widget_getFontSize(void * jarg1) {
  float jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float result;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (float)(arg1)->getFontSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setFontSize(void * jarg1, float jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float arg2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFontSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_draw__SWIG_0(void * jarg1) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_draw__SWIG_1(void * jarg1, void * jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_update(void * jarg1) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setScriptCallback(void * jarg1, char * jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setScriptCallback((char const *)arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_Widget_getUserData(void * jarg1) {
  long jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  long result;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (long)(arg1)->getUserData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setUserData(void * jarg1, long jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  long arg2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->setUserData(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Widget_getLabel(void * jarg1) {
  char * jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (char *)(arg1)->getLabel();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setLabel(void * jarg1, char * jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setLabel((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setPosition(void * jarg1, void * jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPosition(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Widget_getPosition(void * jarg1) {
  void * jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (arg1)->getPosition();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setRotation(void * jarg1, float jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float arg2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRotation(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Widget_getRotation(void * jarg1) {
  float jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float result;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (float)(arg1)->getRotation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_translate(void * jarg1, void * jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->translate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_rotate(void * jarg1, float jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float arg2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->rotate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_doCallback(void * jarg1) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  (arg1)->doCallback();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Widget_isVisible(void * jarg1) {
  unsigned int jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  bool result;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (bool)(arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setVisible(void * jarg1, unsigned int jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setScale(void * jarg1, void * jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setScale(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Widget_getScale(void * jarg1) {
  void * jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (arg1)->getScale();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Widget_setFlip(void * jarg1, void * jarg2) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setFlip(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Widget_getFlip(void * jarg1) {
  void * jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (arg1)->getFlip();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Widget_getStaticName(void * jarg1) {
  char * jresult ;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  result = (char *)(arg1)->getStaticName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Widget(void * jarg1) {
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  
  arg1 = (Neo2D::Widget *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBatch_addSprite(void * jarg1, void * jarg2) {
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  Neo2D::Widget *arg2 = (Neo2D::Widget *) 0 ;
  
  arg1 = (Neo2D::SpriteBatch *)jarg1; 
  arg2 = (Neo2D::Widget *)jarg2; 
  (arg1)->addSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBatch_draw(void * jarg1) {
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  
  arg1 = (Neo2D::SpriteBatch *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpriteBatch() {
  void * jresult ;
  Neo2D::SpriteBatch *result = 0 ;
  
  result = (Neo2D::SpriteBatch *)new Neo2D::SpriteBatch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpriteBatch(void * jarg1) {
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  
  arg1 = (Neo2D::SpriteBatch *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Canvas_getInstance() {
  void * jresult ;
  Neo2D::Canvas *result = 0 ;
  
  result = (Neo2D::Canvas *)Neo2D::Canvas::getInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Canvas(void * jarg1) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Canvas() {
  void * jresult ;
  Neo2D::Canvas *result = 0 ;
  
  result = (Neo2D::Canvas *)new Neo2D::Canvas();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_addSpriteBatch(void * jarg1, void * jarg2) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo2D::SpriteBatch *arg2 = (Neo2D::SpriteBatch *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  arg2 = (Neo2D::SpriteBatch *)jarg2; 
  (arg1)->addSpriteBatch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_draw(void * jarg1) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_update(void * jarg1) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_clear(void * jarg1) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Canvas_getLayer(void * jarg1) {
  int jresult ;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  int result;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  result = (int)(arg1)->getLayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_setLayer(void * jarg1, int jarg2) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  int arg2 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_addWidget(void * jarg1, int jarg2) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  int arg2 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addWidget(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Canvas_getClearColor(void * jarg1) {
  void * jresult ;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector4 result;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  result = (arg1)->getClearColor();
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_setClearColor(void * jarg1, void * jarg2) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  argp2 = (Neo::Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setClearColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_enableRenderToTexture__SWIG_0(void * jarg1, char * jarg2) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->enableRenderToTexture((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_enableRenderToTexture__SWIG_1(void * jarg1) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  (arg1)->enableRenderToTexture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_disableRenderToTexture(void * jarg1) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  (arg1)->disableRenderToTexture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Canvas_setCameraOffset(void * jarg1, void * jarg2) {
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setCameraOffset(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Canvas_getCameraOffset(void * jarg1) {
  void * jresult ;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo2D::Canvas *)jarg1; 
  result = (arg1)->getCameraOffset();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Neo2DEngine() {
  void * jresult ;
  Neo2D::Neo2DEngine *result = 0 ;
  
  result = (Neo2D::Neo2DEngine *)new Neo2D::Neo2DEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Neo2DEngine(void * jarg1) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBorderH(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBorderH();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBorderV(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBorderV();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBody(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBody();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeEdge(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeEdge();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBorderHHover(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBorderHHover();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBorderVHover(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBorderVHover();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBodyHover(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBodyHover();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeEdgeHover(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeEdgeHover();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBorderHPressed(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBorderHPressed();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBorderVPressed(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBorderVPressed();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeBodyPressed(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeBodyPressed();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getThemeEdgePressed(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getThemeEdgePressed();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_setThemeDirectory(void * jarg1, char * jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setThemeDirectory((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neo2DEngine_getInstance() {
  void * jresult ;
  Neo2D::Neo2DEngine *result = 0 ;
  
  result = (Neo2D::Neo2DEngine *)Neo2D::Neo2DEngine::getInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_setupLuaInterface(void * jarg1, void * jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::ScriptContext *arg2 = (Neo::ScriptContext *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (Neo::ScriptContext *)jarg2; 
  (arg1)->setupLuaInterface(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_setEnabled(void * jarg1, unsigned int jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_draw(void * jarg1) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_update(void * jarg1) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Neo2DEngine_getDefaultFont(void * jarg1) {
  char * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (char *)(arg1)->getDefaultFont();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Neo2DEngine_getDefaultFontSize(void * jarg1) {
  float jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  float result;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (float)(arg1)->getDefaultFontSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_setDefaultFontSize(void * jarg1, float jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  float arg2 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setDefaultFontSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neo2DEngine_getNormalBackground(void * jarg1) {
  void * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 result;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (arg1)->getNormalBackground();
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neo2DEngine_getHoverBackground(void * jarg1) {
  void * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 result;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (arg1)->getHoverBackground();
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neo2DEngine_getHighlightBackground(void * jarg1) {
  void * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 result;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (arg1)->getHighlightBackground();
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_setNormalBackground(void * jarg1, void * jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  argp2 = (Neo::Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setNormalBackground(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_setHoverBackground(void * jarg1, void * jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  argp2 = (Neo::Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setHoverBackground(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_setHighlightBackground(void * jarg1, void * jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  argp2 = (Neo::Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setHighlightBackground(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neo2DEngine_getWidget(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  unsigned int arg2 ;
  Neo2D::Widget *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo2D::Widget *)(arg1)->getWidget(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Neo2DEngine_addWidget(void * jarg1, void * jarg2) {
  int jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo2D::Widget *arg2 = (Neo2D::Widget *) 0 ;
  int result;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (Neo2D::Widget *)jarg2; 
  result = (int)(arg1)->addWidget(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Neo2DEngine_getNumWidgets(void * jarg1) {
  unsigned long jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  size_t result;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  result = (arg1)->getNumWidgets();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_addCanvas(void * jarg1, void * jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo2D::Canvas *arg2 = (Neo2D::Canvas *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (Neo2D::Canvas *)jarg2; 
  (arg1)->addCanvas(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neo2DEngine_getCanvas(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  unsigned int arg2 ;
  Neo2D::Canvas *result = 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo2D::Canvas *)(arg1)->getCanvas(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_updateLayers(void * jarg1) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  (arg1)->updateLayers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_destroyWidget(void * jarg1, int jarg2) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  int arg2 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->destroyWidget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_clear(void * jarg1) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Neo2DEngine_scheduleClear(void * jarg1) {
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  arg1 = (Neo2D::Neo2DEngine *)jarg1; 
  (arg1)->scheduleClear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Button(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::Button *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (Neo2D::Gui::Button *)new Neo2D::Gui::Button(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_draw__SWIG_0(void * jarg1) {
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  
  arg1 = (Neo2D::Gui::Button *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_draw__SWIG_1(void * jarg1, void * jarg2) {
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Gui::Button *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_update(void * jarg1) {
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  
  arg1 = (Neo2D::Gui::Button *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Button(void * jarg1) {
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  
  arg1 = (Neo2D::Gui::Button *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sprite(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  Neo2D::Sprite *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  result = (Neo2D::Sprite *)new Neo2D::Sprite(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_draw(void * jarg1, void * jarg2) {
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Sprite *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_update(void * jarg1) {
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  
  arg1 = (Neo2D::Sprite *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_getSize(void * jarg1) {
  void * jresult ;
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  Neo::Vector2 result;
  
  arg1 = (Neo2D::Sprite *)jarg1; 
  result = (arg1)->getSize();
  jresult = new Neo::Vector2((const Neo::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sprite(void * jarg1) {
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  
  arg1 = (Neo2D::Sprite *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TileSheet() {
  void * jresult ;
  Neo2D::TileSheet *result = 0 ;
  
  result = (Neo2D::TileSheet *)new Neo2D::TileSheet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSheet_loadImage(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (Neo2D::TileSheet *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->loadImage((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSheet_getTexCoords(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Neo::Vector4 result;
  
  arg1 = (Neo2D::TileSheet *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (arg1)->getTexCoords(arg2,arg3);
  jresult = new Neo::Vector4((const Neo::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileSheet_getImage(void * jarg1) {
  int jresult ;
  Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) 0 ;
  int result;
  
  arg1 = (Neo2D::TileSheet *)jarg1; 
  result = (int)(arg1)->getImage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TileSheet(void * jarg1) {
  Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) 0 ;
  
  arg1 = (Neo2D::TileSheet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tile(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  Neo2D::Tile *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  result = (Neo2D::Tile *)new Neo2D::Tile(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Tile_getStaticName(void * jarg1) {
  char * jresult ;
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Tile *)jarg1; 
  result = (char *)(arg1)->getStaticName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tile_setTileSheet(void * jarg1, void * jarg2) {
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  Neo2D::TileSheet *arg2 = (Neo2D::TileSheet *) 0 ;
  
  arg1 = (Neo2D::Tile *)jarg1; 
  arg2 = (Neo2D::TileSheet *)jarg2; 
  (arg1)->setTileSheet(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tile_setOffset(void * jarg1, void * jarg2) {
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Tile *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tile_draw(void * jarg1, void * jarg2) {
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Tile *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tile_update(void * jarg1) {
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  
  arg1 = (Neo2D::Tile *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Tile(void * jarg1) {
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  
  arg1 = (Neo2D::Tile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InputField(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::InputField *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (Neo2D::Gui::InputField *)new Neo2D::Gui::InputField(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputField_draw__SWIG_0(void * jarg1) {
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  
  arg1 = (Neo2D::Gui::InputField *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputField_draw__SWIG_1(void * jarg1, void * jarg2) {
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Gui::InputField *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputField_update(void * jarg1) {
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  
  arg1 = (Neo2D::Gui::InputField *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InputField(void * jarg1) {
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  
  arg1 = (Neo2D::Gui::InputField *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SPRITES_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ThemedButton(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::ThemedButton *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (Neo2D::Gui::ThemedButton *)new Neo2D::Gui::ThemedButton(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThemedButton_draw(void * jarg1) {
  Neo2D::Gui::ThemedButton *arg1 = (Neo2D::Gui::ThemedButton *) 0 ;
  
  arg1 = (Neo2D::Gui::ThemedButton *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ThemedButton(void * jarg1) {
  Neo2D::Gui::ThemedButton *arg1 = (Neo2D::Gui::ThemedButton *) 0 ;
  
  arg1 = (Neo2D::Gui::ThemedButton *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Label(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  void * jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::Label *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (Neo2D::Gui::Label *)new Neo2D::Gui::Label(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_setAlignment(void * jarg1, int jarg2) {
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  int arg2 ;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_getAlignment(void * jarg1) {
  int jresult ;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  Neo::TEXT_ALIGN_MODES result;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  result = (Neo::TEXT_ALIGN_MODES)(arg1)->getAlignment();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_setFont(void * jarg1, char * jarg2) {
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setFont((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Label_getFont(void * jarg1) {
  char * jresult ;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  result = (char *)(arg1)->getFont();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_draw__SWIG_0(void * jarg1) {
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_draw__SWIG_1(void * jarg1, void * jarg2) {
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  argp2 = (Neo::Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Neo::Vector2", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_update(void * jarg1) {
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Label(void * jarg1) {
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  
  arg1 = (Neo2D::Gui::Label *)jarg1; 
  delete arg1;
}


SWIGEXPORT Neo::Range * SWIGSTDCALL CSharp_AnimRange_SWIGUpcast(Neo::AnimRange *jarg1) {
    return (Neo::Range *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OEntity_SWIGUpcast(Neo::OEntity *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OLight_SWIGUpcast(Neo::OLight *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OSound_SWIGUpcast(Neo::OSound *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OText_SWIGUpcast(Neo::OText *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OCamera_SWIGUpcast(Neo::OCamera *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::DataRef * SWIGSTDCALL CSharp_TextureRef_SWIGUpcast(Neo::TextureRef *jarg1) {
    return (Neo::DataRef *)jarg1;
}

SWIGEXPORT Neo2D::Widget * SWIGSTDCALL CSharp_Button_SWIGUpcast(Neo2D::Gui::Button *jarg1) {
    return (Neo2D::Widget *)jarg1;
}

SWIGEXPORT Neo2D::Widget * SWIGSTDCALL CSharp_Sprite_SWIGUpcast(Neo2D::Sprite *jarg1) {
    return (Neo2D::Widget *)jarg1;
}

SWIGEXPORT Neo2D::Widget * SWIGSTDCALL CSharp_Tile_SWIGUpcast(Neo2D::Tile *jarg1) {
    return (Neo2D::Widget *)jarg1;
}

SWIGEXPORT Neo2D::Widget * SWIGSTDCALL CSharp_InputField_SWIGUpcast(Neo2D::Gui::InputField *jarg1) {
    return (Neo2D::Widget *)jarg1;
}

SWIGEXPORT Neo2D::Gui::Button * SWIGSTDCALL CSharp_ThemedButton_SWIGUpcast(Neo2D::Gui::ThemedButton *jarg1) {
    return (Neo2D::Gui::Button *)jarg1;
}

SWIGEXPORT Neo2D::Widget * SWIGSTDCALL CSharp_Label_SWIGUpcast(Neo2D::Gui::Label *jarg1) {
    return (Neo2D::Widget *)jarg1;
}

#ifdef __cplusplus
}
#endif

