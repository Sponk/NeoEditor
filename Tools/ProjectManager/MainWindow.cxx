// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "MainWindow.h"
#include <FL/fl_message.H>
#include <FL/Fl_Native_File_Chooser.H>
#include <MCore.h>
#include <fstream>
#include <algorithm>
extern std::string currentDirectory;
extern const char* fl_native_file_chooser(const char* title, const char* files, const char* dir, int type);
#if WIN32
#include <windows.h>
#endif

Fl_Double_Window* MainWindow::create_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(510, 450, "Project Manager");
    w = o;
    o->user_data((void*)(this));
    { project_browser = new Fl_Browser(5, 20, 190, 425, "Projects:");
      project_browser->type(2);
      project_browser->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* project_browser
    { Fl_Group* o = new Fl_Group(200, 20, 305, 275, "Packages:");
      o->box(FL_ENGRAVED_FRAME);
      { package_browser = new Fl_Browser(205, 45, 155, 245, "Available:");
        package_browser->type(2);
        package_browser->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Browser* package_browser
      { Fl_Button* o = new Fl_Button(370, 260, 130, 25, "Install Package");
        o->callback((Fl_Callback*)install_package, (void*)(this));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(370, 230, 130, 25, "Open Neo Store");
        o->callback((Fl_Callback*)open_neo_store, (void*)(this));
      } // Fl_Button* o
      { Fl_Group* o = new Fl_Group(365, 35, 135, 185);
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(200, 315, 305, 130, "Projects:");
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Button* o = new Fl_Button(205, 360, 150, 25, "Import Project");
        o->callback((Fl_Callback*)import_project, (void*)(this));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 330, 150, 25, "Create Project");
        o->callback((Fl_Callback*)create_project, (void*)(this));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(357, 359, 143, 25, "Copy C++ SDK");
        o->callback((Fl_Callback*)copy_cpp_sdk, (void*)(this));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(357, 329, 143, 25, "Copy Lua SDK");
        o->callback((Fl_Callback*)copy_lua_sdk, (void*)(this));
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Double_Window* MainWindow::createNewProjectDlg() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(555, 185, "New Project");
    w = o;
    o->user_data((void*)(this));
    { project_name_edit = new Fl_Input(140, 15, 145, 25, "Project Name:");
    } // Fl_Input* project_name_edit
    { project_directory_edit = new Fl_Input(140, 45, 365, 25, "Project Directory:");
      project_directory_edit->tooltip("Will create a directory with the same name as the project in here.");
    } // Fl_Input* project_directory_edit
    { Fl_Button* o = new Fl_Button(510, 45, 30, 25, "...");
      o->callback((Fl_Callback*)find_project_directory, (void*)(this));
    } // Fl_Button* o
    { install_lua_check = new Fl_Check_Button(140, 85, 145, 25, "Install Lua SDK");
      install_lua_check->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* install_lua_check
    { create_initial_scene_check = new Fl_Check_Button(140, 110, 165, 25, "Create initial scene");
      create_initial_scene_check->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* create_initial_scene_check
    { Fl_Button* o = new Fl_Button(370, 145, 135, 25, "Create Project");
      o->callback((Fl_Callback*)generate_project, (void*)(this));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(140, 145, 135, 25, "Cancel");
      o->callback((Fl_Callback*)cancel_np_dialog);
    } // Fl_Button* o
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}
