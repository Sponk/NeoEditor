/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_File swig_types[0]
#define SWIGTYPE_p_FileOpenHook swig_types[1]
#define SWIGTYPE_p_Neo2D__Canvas swig_types[2]
#define SWIGTYPE_p_Neo2D__CulledSpriteBatch swig_types[3]
#define SWIGTYPE_p_Neo2D__Gui__Button swig_types[4]
#define SWIGTYPE_p_Neo2D__Gui__CheckButton swig_types[5]
#define SWIGTYPE_p_Neo2D__Gui__Container swig_types[6]
#define SWIGTYPE_p_Neo2D__Gui__InputField swig_types[7]
#define SWIGTYPE_p_Neo2D__Gui__Label swig_types[8]
#define SWIGTYPE_p_Neo2D__Gui__List swig_types[9]
#define SWIGTYPE_p_Neo2D__Gui__Menu swig_types[10]
#define SWIGTYPE_p_Neo2D__Gui__MenuBar swig_types[11]
#define SWIGTYPE_p_Neo2D__Gui__ScaleLayout swig_types[12]
#define SWIGTYPE_p_Neo2D__Gui__ScrollBar swig_types[13]
#define SWIGTYPE_p_Neo2D__Gui__ScrollPane swig_types[14]
#define SWIGTYPE_p_Neo2D__Gui__Slider swig_types[15]
#define SWIGTYPE_p_Neo2D__Gui__ThemedButton swig_types[16]
#define SWIGTYPE_p_Neo2D__Gui__ThemedInputField swig_types[17]
#define SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t swig_types[18]
#define SWIGTYPE_p_Neo2D__Gui__TreeView swig_types[19]
#define SWIGTYPE_p_Neo2D__Gui__Window swig_types[20]
#define SWIGTYPE_p_Neo2D__Gui__WindowManager swig_types[21]
#define SWIGTYPE_p_Neo2D__Neo2DEngine swig_types[22]
#define SWIGTYPE_p_Neo2D__Sprite swig_types[23]
#define SWIGTYPE_p_Neo2D__SpriteBatch swig_types[24]
#define SWIGTYPE_p_Neo2D__Tile swig_types[25]
#define SWIGTYPE_p_Neo2D__TileSheet swig_types[26]
#define SWIGTYPE_p_Neo2D__Widget swig_types[27]
#define SWIGTYPE_p_Neo__AnimRange swig_types[28]
#define SWIGTYPE_p_Neo__Armature swig_types[29]
#define SWIGTYPE_p_Neo__ArmatureAnim swig_types[30]
#define SWIGTYPE_p_Neo__ArmatureAnimRef swig_types[31]
#define SWIGTYPE_p_Neo__Behavior swig_types[32]
#define SWIGTYPE_p_Neo__BehaviorCreator swig_types[33]
#define SWIGTYPE_p_Neo__BehaviorManager swig_types[34]
#define SWIGTYPE_p_Neo__Box3d swig_types[35]
#define SWIGTYPE_p_Neo__Character swig_types[36]
#define SWIGTYPE_p_Neo__Color swig_types[37]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__ArmatureAnim_t swig_types[38]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__Font_t swig_types[39]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__Image_t swig_types[40]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__Level_t swig_types[41]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__MaterialsAnim_t swig_types[42]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__Mesh_t swig_types[43]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__Sound_t swig_types[44]
#define SWIGTYPE_p_Neo__DataLoaderT_Neo__TexturesAnim_t swig_types[45]
#define SWIGTYPE_p_Neo__DataManager swig_types[46]
#define SWIGTYPE_p_Neo__DataRef swig_types[47]
#define SWIGTYPE_p_Neo__FRAME_BUFFER_ATTACHMENT swig_types[48]
#define SWIGTYPE_p_Neo__FXManager swig_types[49]
#define SWIGTYPE_p_Neo__FXRef swig_types[50]
#define SWIGTYPE_p_Neo__Font swig_types[51]
#define SWIGTYPE_p_Neo__FontRef swig_types[52]
#define SWIGTYPE_p_Neo__Frustum swig_types[53]
#define SWIGTYPE_p_Neo__Image swig_types[54]
#define SWIGTYPE_p_Neo__InputContext swig_types[55]
#define SWIGTYPE_p_Neo__Key swig_types[56]
#define SWIGTYPE_p_Neo__Level swig_types[57]
#define SWIGTYPE_p_Neo__Material swig_types[58]
#define SWIGTYPE_p_Neo__MaterialAnim swig_types[59]
#define SWIGTYPE_p_Neo__MaterialDisplay swig_types[60]
#define SWIGTYPE_p_Neo__MaterialsAnim swig_types[61]
#define SWIGTYPE_p_Neo__MaterialsAnimRef swig_types[62]
#define SWIGTYPE_p_Neo__Matrix4x4 swig_types[63]
#define SWIGTYPE_p_Neo__Mesh swig_types[64]
#define SWIGTYPE_p_Neo__MeshRef swig_types[65]
#define SWIGTYPE_p_Neo__Message swig_types[66]
#define SWIGTYPE_p_Neo__Messenger swig_types[67]
#define SWIGTYPE_p_Neo__MorphingData swig_types[68]
#define SWIGTYPE_p_Neo__MorphingPoint swig_types[69]
#define SWIGTYPE_p_Neo__MorphingPose swig_types[70]
#define SWIGTYPE_p_Neo__NeoEngine swig_types[71]
#define SWIGTYPE_p_Neo__NeoGame swig_types[72]
#define SWIGTYPE_p_Neo__NeoVariable swig_types[73]
#define SWIGTYPE_p_Neo__OBone swig_types[74]
#define SWIGTYPE_p_Neo__OCamera swig_types[75]
#define SWIGTYPE_p_Neo__OEntity swig_types[76]
#define SWIGTYPE_p_Neo__OLight swig_types[77]
#define SWIGTYPE_p_Neo__OSound swig_types[78]
#define SWIGTYPE_p_Neo__OText swig_types[79]
#define SWIGTYPE_p_Neo__Object3d swig_types[80]
#define SWIGTYPE_p_Neo__Object3dAnim swig_types[81]
#define SWIGTYPE_p_Neo__Object3d__AdditionalData swig_types[82]
#define SWIGTYPE_p_Neo__PackageManager swig_types[83]
#define SWIGTYPE_p_Neo__PhysicsConstraint swig_types[84]
#define SWIGTYPE_p_Neo__PhysicsContext swig_types[85]
#define SWIGTYPE_p_Neo__PhysicsProperties swig_types[86]
#define SWIGTYPE_p_Neo__PostProcessor swig_types[87]
#define SWIGTYPE_p_Neo__Profiler swig_types[88]
#define SWIGTYPE_p_Neo__Profiler__FunctionProfile swig_types[89]
#define SWIGTYPE_p_Neo__Quaternion swig_types[90]
#define SWIGTYPE_p_Neo__Range swig_types[91]
#define SWIGTYPE_p_Neo__Renderer swig_types[92]
#define SWIGTYPE_p_Neo__RendererCreator swig_types[93]
#define SWIGTYPE_p_Neo__RendererManager swig_types[94]
#define SWIGTYPE_p_Neo__RenderingContext swig_types[95]
#define SWIGTYPE_p_Neo__Scene swig_types[96]
#define SWIGTYPE_p_Neo__Scene__AdditionalData swig_types[97]
#define SWIGTYPE_p_Neo__ScriptContext swig_types[98]
#define SWIGTYPE_p_Neo__ShaderRef swig_types[99]
#define SWIGTYPE_p_Neo__SkinData swig_types[100]
#define SWIGTYPE_p_Neo__SkinPoint swig_types[101]
#define SWIGTYPE_p_Neo__Skybox swig_types[102]
#define SWIGTYPE_p_Neo__Sound swig_types[103]
#define SWIGTYPE_p_Neo__SoundContext swig_types[104]
#define SWIGTYPE_p_Neo__SoundRef swig_types[105]
#define SWIGTYPE_p_Neo__String swig_types[106]
#define SWIGTYPE_p_Neo__SubGame swig_types[107]
#define SWIGTYPE_p_Neo__SubMesh swig_types[108]
#define SWIGTYPE_p_Neo__SystemContext swig_types[109]
#define SWIGTYPE_p_Neo__Texture swig_types[110]
#define SWIGTYPE_p_Neo__TextureAnim swig_types[111]
#define SWIGTYPE_p_Neo__TexturePass swig_types[112]
#define SWIGTYPE_p_Neo__TextureRef swig_types[113]
#define SWIGTYPE_p_Neo__TexturesAnim swig_types[114]
#define SWIGTYPE_p_Neo__TexturesAnimRef swig_types[115]
#define SWIGTYPE_p_Neo__Vector2 swig_types[116]
#define SWIGTYPE_p_Neo__Vector3 swig_types[117]
#define SWIGTYPE_p_Neo__Vector4 swig_types[118]
#define SWIGTYPE_p_Stringp swig_types[119]
#define SWIGTYPE_p_Vector3p swig_types[120]
#define SWIGTYPE_p___int64 swig_types[121]
#define SWIGTYPE_p_char swig_types[122]
#define SWIGTYPE_p_double swig_types[123]
#define SWIGTYPE_p_doublep swig_types[124]
#define SWIGTYPE_p_f_p_Neo__Object3d__p_Neo__Behavior swig_types[125]
#define SWIGTYPE_p_f_void__int swig_types[126]
#define SWIGTYPE_p_f_void__intp swig_types[127]
#define SWIGTYPE_p_f_void__p_Neo__Renderer swig_types[128]
#define SWIGTYPE_p_float swig_types[129]
#define SWIGTYPE_p_floatp swig_types[130]
#define SWIGTYPE_p_int swig_types[131]
#define SWIGTYPE_p_intp swig_types[132]
#define SWIGTYPE_p_long swig_types[133]
#define SWIGTYPE_p_mapT_unsigned_int_Neo__Character_t swig_types[134]
#define SWIGTYPE_p_mapT_unsigned_int_unsigned_int_t swig_types[135]
#define SWIGTYPE_p_p_char swig_types[136]
#define SWIGTYPE_p_p_unsigned_long swig_types[137]
#define SWIGTYPE_p_short swig_types[138]
#define SWIGTYPE_p_signed___int64 swig_types[139]
#define SWIGTYPE_p_signed_char swig_types[140]
#define SWIGTYPE_p_std__functionT_void_fWidget_p_longF_t swig_types[141]
#define SWIGTYPE_p_std__string swig_types[142]
#define SWIGTYPE_p_uintp swig_types[143]
#define SWIGTYPE_p_unsigned___int64 swig_types[144]
#define SWIGTYPE_p_unsigned_char swig_types[145]
#define SWIGTYPE_p_unsigned_int swig_types[146]
#define SWIGTYPE_p_unsigned_long swig_types[147]
#define SWIGTYPE_p_unsigned_short swig_types[148]
#define SWIGTYPE_p_vectorT_float_t swig_types[149]
#define SWIGTYPE_p_vectorT_std__string_t swig_types[150]
#define SWIGTYPE_p_void swig_types[151]
static swig_type_info *swig_types[153];
static swig_module_info swig_module = {swig_types, 152, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "NeoLua"
#define SWIG_init      luaopen_NeoLua
#define SWIG_init_user luaopen_NeoLua_user

#define SWIG_LUACODE   luaopen_NeoLua_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <NeoEngine.h>
#include <NeoCore.h>
#include <Neo2DEngine.h>
#include <Widget.h>
#include <Button.h>

#include <ThemedButton.h>
#include <Sprite.h>
#include <Tile.h>
#include <InputField.h>
#include <ThemedInputField.h>
#include <Canvas.h>
#include <Label.h>
#include <SpriteBatch.h>
#include <CulledSpriteBatch.h>

#include <Container.h>
#include <Window.h>
#include <WindowManager.h>
#include <List.h>
#include <Tree.h>

#include <Menu.h>
#include <MenuBar.h>
	
#include <Slider.h>
#include <ScrollPane.h>
#include <ScaleLayout.h>
#include <CheckButton.h>
	
	using namespace Neo;
	using namespace Neo2D;
	using namespace Gui;

	// #define Canvas Neo::Gui::Canvas


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


typedef int intp;

SWIGINTERN intp *new_intp(){
  return new int();
}
SWIGINTERN void delete_intp(intp *self){
  if (self) delete self;
}
SWIGINTERN void intp_assign(intp *self,int value){
  *self = value;
}
SWIGINTERN int intp_value(intp *self){
  return *self;
}
SWIGINTERN int *intp_cast(intp *self){
  return self;
}
SWIGINTERN intp *intp_frompointer(int *t){
  return (intp *) t;
}

typedef unsigned int uintp;

SWIGINTERN uintp *new_uintp(){
  return new unsigned int();
}
SWIGINTERN void delete_uintp(uintp *self){
  if (self) delete self;
}
SWIGINTERN void uintp_assign(uintp *self,unsigned int value){
  *self = value;
}
SWIGINTERN unsigned int uintp_value(uintp *self){
  return *self;
}
SWIGINTERN unsigned int *uintp_cast(uintp *self){
  return self;
}
SWIGINTERN uintp *uintp_frompointer(unsigned int *t){
  return (uintp *) t;
}

typedef float floatp;

SWIGINTERN floatp *new_floatp(){
  return new float();
}
SWIGINTERN void delete_floatp(floatp *self){
  if (self) delete self;
}
SWIGINTERN void floatp_assign(floatp *self,float value){
  *self = value;
}
SWIGINTERN float floatp_value(floatp *self){
  return *self;
}
SWIGINTERN float *floatp_cast(floatp *self){
  return self;
}
SWIGINTERN floatp *floatp_frompointer(float *t){
  return (floatp *) t;
}

typedef double doublep;

SWIGINTERN doublep *new_doublep(){
  return new double();
}
SWIGINTERN void delete_doublep(doublep *self){
  if (self) delete self;
}
SWIGINTERN void doublep_assign(doublep *self,double value){
  *self = value;
}
SWIGINTERN double doublep_value(doublep *self){
  return *self;
}
SWIGINTERN double *doublep_cast(doublep *self){
  return self;
}
SWIGINTERN doublep *doublep_frompointer(double *t){
  return (doublep *) t;
}

Neo::String* Voidp2String(void* x) {
   return (Neo::String*) x;
}


float* Voidp2Float(void* x) {
   return (float*) x;
}


typedef Neo::String Stringp;

SWIGINTERN Stringp *new_Stringp(){
  return new Neo::String();
}
SWIGINTERN void delete_Stringp(Stringp *self){
  if (self) delete self;
}
SWIGINTERN void Stringp_assign(Stringp *self,Neo::String value){
  *self = value;
}
SWIGINTERN Neo::String Stringp_value(Stringp *self){
  return *self;
}
SWIGINTERN Neo::String *Stringp_cast(Stringp *self){
  return self;
}
SWIGINTERN Stringp *Stringp_frompointer(Neo::String *t){
  return (Stringp *) t;
}

typedef Neo::Vector3 Vector3p;

SWIGINTERN Vector3p *new_Vector3p(){
  return new Neo::Vector3();
}
SWIGINTERN void delete_Vector3p(Vector3p *self){
  if (self) delete self;
}
SWIGINTERN void Vector3p_assign(Vector3p *self,Neo::Vector3 value){
  *self = value;
}
SWIGINTERN Neo::Vector3 Vector3p_value(Vector3p *self){
  return *self;
}
SWIGINTERN Neo::Vector3 *Vector3p_cast(Vector3p *self){
  return self;
}
SWIGINTERN Vector3p *Vector3p_frompointer(Neo::Vector3 *t){
  return (Vector3p *) t;
}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_String__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::String *result = 0 ;
  
  SWIG_check_num_args("Neo::String::String",0,0)
  result = (Neo::String *)new Neo::String();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Neo::String *result = 0 ;
  
  SWIG_check_num_args("Neo::String::String",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Neo::String::String",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Neo::String *)new Neo::String((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::String *arg1 = 0 ;
  Neo::String *result = 0 ;
  
  SWIG_check_num_args("Neo::String::String",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::String::String",1,"Neo::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("new_String",1,SWIGTYPE_p_Neo__String);
  }
  
  result = (Neo::String *)new Neo::String((Neo::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_String(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_String__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__String, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_String__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_String__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_String'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::String::String()\n"
    "    Neo::String::String(char const *)\n"
    "    Neo::String::String(Neo::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_String_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::String *arg1 = (Neo::String *) 0 ;
  
  SWIG_check_num_args("Neo::String::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::String::clear",1,"Neo::String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("String_clear",1,SWIGTYPE_p_Neo__String);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::String *arg1 = (Neo::String *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::String::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::String::set",1,"Neo::String *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::String::set",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("String_set",1,SWIGTYPE_p_Neo__String);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->set((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_getSafeString(lua_State* L) {
  int SWIG_arg = 0;
  Neo::String *arg1 = (Neo::String *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::String::getSafeString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::String::getSafeString",1,"Neo::String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("String_getSafeString",1,SWIGTYPE_p_Neo__String);
  }
  
  result = (char *)(arg1)->getSafeString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_getData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::String *arg1 = (Neo::String *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::String::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::String::getData",1,"Neo::String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("String_getData",1,SWIGTYPE_p_Neo__String);
  }
  
  result = (char *)(arg1)->getData();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_String(void *obj) {
Neo::String *arg1 = (Neo::String *) obj;
delete arg1;
}
static int _proxy__wrap_new_String(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_String);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_String_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_String_methods[]= {
    { "clear", _wrap_String_clear},
    { "set", _wrap_String_set},
    { "getSafeString", _wrap_String_getSafeString},
    { "getData", _wrap_String_getData},
    {0,0}
};
static swig_lua_method swig_String_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_String_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_String_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_String_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_String_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_String_Sf_SwigStatic = {
    "String",
    swig_String_Sf_SwigStatic_methods,
    swig_String_Sf_SwigStatic_attributes,
    swig_String_Sf_SwigStatic_constants,
    swig_String_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_String_bases[] = {0};
static const char *swig_String_base_names[] = {0};
static swig_lua_class _wrap_class_String = { "String", "String", &SWIGTYPE_p_Neo__String,_proxy__wrap_new_String, swig_delete_String, swig_String_methods, swig_String_attributes, &swig_String_Sf_SwigStatic, swig_String_meta, swig_String_bases, swig_String_base_names };

static int _wrap_copyFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("copyFile",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("copyFile",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("copyFile",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)copyFile((char const *)arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createDirectory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("createDirectory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("createDirectory",1,"char const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("createDirectory",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)createDirectory((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createDirectory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("createDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("createDirectory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)createDirectory((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createDirectory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_createDirectory__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_createDirectory__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'createDirectory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    createDirectory(char const *,bool)\n"
    "    createDirectory(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_isDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("isDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("isDirectory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)isDirectory((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEmptyDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEmptyDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("isEmptyDirectory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)isEmptyDirectory((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clearDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("clearDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("clearDirectory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)clearDirectory((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_removeDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("removeDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("removeDirectory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)removeDirectory((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isFileExist(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("isFileExist",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("isFileExist",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)isFileExist((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("copyDirectory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("copyDirectory",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("copyDirectory",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)copyDirectory((char const *)arg1,(char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_readDirectory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  vector< std::string > *arg2 = (vector< std::string > *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("readDirectory",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("readDirectory",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("readDirectory",2,"vector< std::string > *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("readDirectory",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("readDirectory",4,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vectorT_std__string_t,0))){
    SWIG_fail_ptr("readDirectory",2,SWIGTYPE_p_vectorT_std__string_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)readDirectory((char const *)arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_readDirectory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  vector< std::string > *arg2 = (vector< std::string > *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("readDirectory",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("readDirectory",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("readDirectory",2,"vector< std::string > *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("readDirectory",3,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vectorT_std__string_t,0))){
    SWIG_fail_ptr("readDirectory",2,SWIGTYPE_p_vectorT_std__string_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)readDirectory((char const *)arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_readDirectory__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  vector< std::string > *arg2 = (vector< std::string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("readDirectory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("readDirectory",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("readDirectory",2,"vector< std::string > *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vectorT_std__string_t,0))){
    SWIG_fail_ptr("readDirectory",2,SWIGTYPE_p_vectorT_std__string_t);
  }
  
  result = (bool)readDirectory((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_readDirectory(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vectorT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_readDirectory__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vectorT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_readDirectory__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vectorT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_readDirectory__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'readDirectory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    readDirectory(char const *,vector< std::string > *,bool,bool)\n"
    "    readDirectory(char const *,vector< std::string > *,bool)\n"
    "    readDirectory(char const *,vector< std::string > *)\n");
  lua_error(L);return 0;
}


static int _wrap_copyDirFiles(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("copyDirFiles",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("copyDirFiles",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("copyDirFiles",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("copyDirFiles",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  copyDirFiles((char const *)arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_registerFileOpenHook(lua_State* L) {
  int SWIG_arg = 0;
  FileOpenHook *arg1 = (FileOpenHook *) 0 ;
  
  SWIG_check_num_args("Neo::M_registerFileOpenHook",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_registerFileOpenHook",1,"FileOpenHook *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FileOpenHook,0))){
    SWIG_fail_ptr("M_registerFileOpenHook",1,SWIGTYPE_p_FileOpenHook);
  }
  
  Neo::M_registerFileOpenHook(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_getFileOpenHook(lua_State* L) {
  int SWIG_arg = 0;
  FileOpenHook *result = 0 ;
  
  SWIG_check_num_args("Neo::M_getFileOpenHook",0,0)
  result = (FileOpenHook *)Neo::M_getFileOpenHook();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FileOpenHook,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_fopen(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  File *result = 0 ;
  
  SWIG_check_num_args("Neo::M_fopen",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Neo::M_fopen",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::M_fopen",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (File *)Neo::M_fopen((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_File,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_fclose(lua_State* L) {
  int SWIG_arg = 0;
  File *arg1 = (File *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::M_fclose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_fclose",1,"File *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_File,0))){
    SWIG_fail_ptr("M_fclose",1,SWIGTYPE_p_File);
  }
  
  result = (int)Neo::M_fclose(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_fread(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  File *arg4 = (File *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Neo::M_fread",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_fread",1,"void *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::M_fread",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::M_fread",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::M_fread",4,"File *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"M_fread");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_File,0))){
    SWIG_fail_ptr("M_fread",4,SWIGTYPE_p_File);
  }
  
  result = Neo::M_fread(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_fwrite(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  File *arg4 = (File *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Neo::M_fwrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_fwrite",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::M_fwrite",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::M_fwrite",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::M_fwrite",4,"File *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"M_fwrite");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_File,0))){
    SWIG_fail_ptr("M_fwrite",4,SWIGTYPE_p_File);
  }
  
  result = Neo::M_fwrite((void const *)arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_fprintf(lua_State* L) {
  int SWIG_arg = 0;
  File *arg1 = (File *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("Neo::M_fprintf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_fprintf",1,"File *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::M_fprintf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_File,0))){
    SWIG_fail_ptr("M_fprintf",1,SWIGTYPE_p_File);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)Neo::M_fprintf(arg1,(char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_fseek(lua_State* L) {
  int SWIG_arg = 0;
  File *arg1 = (File *) 0 ;
  long arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("Neo::M_fseek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_fseek",1,"File *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::M_fseek",2,"long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::M_fseek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_File,0))){
    SWIG_fail_ptr("M_fseek",1,SWIGTYPE_p_File);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)Neo::M_fseek(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_ftell(lua_State* L) {
  int SWIG_arg = 0;
  File *arg1 = (File *) 0 ;
  long result;
  
  SWIG_check_num_args("Neo::M_ftell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_ftell",1,"File *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_File,0))){
    SWIG_fail_ptr("M_ftell",1,SWIGTYPE_p_File);
  }
  
  result = (long)Neo::M_ftell(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_M_rewind(lua_State* L) {
  int SWIG_arg = 0;
  File *arg1 = (File *) 0 ;
  
  SWIG_check_num_args("Neo::M_rewind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::M_rewind",1,"File *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_File,0))){
    SWIG_fail_ptr("M_rewind",1,SWIGTYPE_p_File);
  }
  
  Neo::M_rewind(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getNextPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::getNextPowerOfTwo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::getNextPowerOfTwo",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (unsigned int)Neo::getNextPowerOfTwo(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loopFloat(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Neo::loopFloat",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::loopFloat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::loopFloat",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::loopFloat",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)Neo::loopFloat(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_start_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Range::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::start",1,"Neo::Range *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Range::start",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_start_set",1,SWIGTYPE_p_Neo__Range);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->start = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_start_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Range::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::start",1,"Neo::Range *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_start_get",1,SWIGTYPE_p_Neo__Range);
  }
  
  result = (int) ((arg1)->start);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_c_end_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Range::end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::end",1,"Neo::Range *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Range::end",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_c_end_set",1,SWIGTYPE_p_Neo__Range);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Range_c_end_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *arg1 = (Neo::Range *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Range::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Range::end",1,"Neo::Range *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Range,0))){
    SWIG_fail_ptr("Range_c_end_get",1,SWIGTYPE_p_Neo__Range);
  }
  
  result = (int) ((arg1)->end);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Range(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Range *result = 0 ;
  
  SWIG_check_num_args("Neo::Range::Range",0,0)
  result = (Neo::Range *)new Neo::Range();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Range,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Range(void *obj) {
Neo::Range *arg1 = (Neo::Range *) obj;
delete arg1;
}
static int _proxy__wrap_new_Range(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Range);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Range_attributes[] = {
    { "start", _wrap_Range_start_get, _wrap_Range_start_set },
    { "c_end", _wrap_Range_c_end_get, _wrap_Range_c_end_set },
    {0,0,0}
};
static swig_lua_method swig_Range_methods[]= {
    {0,0}
};
static swig_lua_method swig_Range_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Range_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Range_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Range_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Range_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Range_Sf_SwigStatic = {
    "Range",
    swig_Range_Sf_SwigStatic_methods,
    swig_Range_Sf_SwigStatic_attributes,
    swig_Range_Sf_SwigStatic_constants,
    swig_Range_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Range_bases[] = {0};
static const char *swig_Range_base_names[] = {0};
static swig_lua_class _wrap_class_Range = { "Range", "Range", &SWIGTYPE_p_Neo__Range,_proxy__wrap_new_Range, swig_delete_Range, swig_Range_methods, swig_Range_attributes, &swig_Range_Sf_SwigStatic, swig_Range_meta, swig_Range_bases, swig_Range_base_names };

static int _wrap_sortFloatList__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 ;
  float *arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Neo::sortFloatList",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::sortFloatList",1,"int []");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::sortFloatList",2,"float []");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::sortFloatList",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::sortFloatList",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("sortFloatList",1,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sortFloatList",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  Neo::sortFloatList(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sortFloatList__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::sortFloatList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::sortFloatList",1,"float []");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::sortFloatList",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::sortFloatList",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("sortFloatList",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  Neo::sortFloatList(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sortFloatList(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sortFloatList__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sortFloatList__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sortFloatList'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::sortFloatList(int [],float [],int,int)\n"
    "    Neo::sortFloatList(float [],int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_isBoxToBoxCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isBoxToBoxCollision",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isBoxToBoxCollision",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isBoxToBoxCollision",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isBoxToBoxCollision",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isBoxToBoxCollision",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isBoxToBoxCollision",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isBoxToBoxCollision((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isBoxToBox2dCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  Neo::Vector2 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isBoxToBox2dCollision",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",3,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isBoxToBox2dCollision",4,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isBoxToBox2dCollision",4,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)Neo::isBoxToBox2dCollision((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,(Neo::Vector2 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isPointInBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isPointInBox",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isPointInBox",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isPointInBox",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isPointInBox",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInBox",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInBox",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInBox",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isPointInBox((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isPointInBox2d(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isPointInBox2d",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isPointInBox2d",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isPointInBox2d",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isPointInBox2d",3,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isPointInBox2d",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isPointInBox2d",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isPointInBox2d",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)Neo::isPointInBox2d((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgeToBoxCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgeToBoxCollision",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgeToBoxCollision",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeToBoxCollision",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isEdgeToBoxCollision((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgeToEdge2dIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  Neo::Vector2 *arg4 = 0 ;
  Neo::Vector2 *arg5 = (Neo::Vector2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgeToEdge2dIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",3,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",4,"Neo::Vector2 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isEdgeToEdge2dIntersection",5,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",4,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isEdgeToEdge2dIntersection",5,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)Neo::isEdgeToEdge2dIntersection((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,(Neo::Vector2 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isPointInTriangle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isPointInTriangle",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isPointInTriangle",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isPointInTriangle",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isPointInTriangle",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isPointInTriangle",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::isPointInTriangle",5,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isPointInTriangle",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isPointInTriangle((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,(Neo::Vector3 const &)*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isLineCircleIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  SWIG_check_num_args("Neo::isLineCircleIntersection",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isLineCircleIntersection",1,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isLineCircleIntersection",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isLineCircleIntersection",3,"Neo::Vector2 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::isLineCircleIntersection",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isLineCircleIntersection",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isLineCircleIntersection",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("isLineCircleIntersection",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  result = (bool)Neo::isLineCircleIntersection((Neo::Vector2 const &)*arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isRaySphereIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  float arg4 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isRaySphereIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isRaySphereIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isRaySphereIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isRaySphereIntersection",3,"Neo::Vector3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::isRaySphereIntersection",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isRaySphereIntersection",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaySphereIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isRaySphereIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isRayPlaneIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isRayPlaneIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isRayPlaneIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isRayPlaneIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isRayPlaneIntersection",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isRayPlaneIntersection",4,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isRayPlaneIntersection",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRayPlaneIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isRayPlaneIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgePlaneIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgePlaneIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",4,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isEdgePlaneIntersection",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgePlaneIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isEdgePlaneIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isEdgeTriangleIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Vector3 *arg5 = 0 ;
  Neo::Vector3 *arg6 = 0 ;
  Neo::Vector3 *arg7 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::isEdgeTriangleIntersection",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",5,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",6,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Neo::isEdgeTriangleIntersection",7,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",6,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isEdgeTriangleIntersection",7,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::isEdgeTriangleIntersection((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4,(Neo::Vector3 const &)*arg5,(Neo::Vector3 const &)*arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getTriangleNormal(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::getTriangleNormal",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::getTriangleNormal",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::getTriangleNormal",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::getTriangleNormal",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getTriangleNormal",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getTriangleNormal",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getTriangleNormal",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = Neo::getTriangleNormal((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_simplifyDP(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::simplifyDP",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::simplifyDP",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::simplifyDP",2,"Neo::Vector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::simplifyDP",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::simplifyDP",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::simplifyDP",5,"int *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("simplifyDP",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("simplifyDP",5,SWIGTYPE_p_int);
  }
  
  Neo::simplifyDP(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linearInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Neo::linearInterpolation",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::linearInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::linearInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::linearInterpolation",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)Neo::linearInterpolation(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubicInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  SWIG_check_num_args("Neo::cubicInterpolation",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::cubicInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::cubicInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::cubicInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::cubicInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::cubicInterpolation",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (float)Neo::cubicInterpolation(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CatmullRomInterpolation(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  SWIG_check_num_args("Neo::CatmullRomInterpolation",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::CatmullRomInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::CatmullRomInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::CatmullRomInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::CatmullRomInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::CatmullRomInterpolation",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (float)Neo::CatmullRomInterpolation(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool arg9 ;
  float result;
  
  SWIG_check_num_args("Neo::HermiteInterpolation",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HermiteInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HermiteInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HermiteInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::HermiteInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::HermiteInterpolation",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::HermiteInterpolation",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::HermiteInterpolation",7,"float");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Neo::HermiteInterpolation",8,"bool");
  if(!lua_isboolean(L,9)) SWIG_fail_arg("Neo::HermiteInterpolation",9,"bool");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (lua_toboolean(L, 8)!=0);
  arg9 = (lua_toboolean(L, 9)!=0);
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  float result;
  
  SWIG_check_num_args("Neo::HermiteInterpolation",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HermiteInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HermiteInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HermiteInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::HermiteInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::HermiteInterpolation",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::HermiteInterpolation",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::HermiteInterpolation",7,"float");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Neo::HermiteInterpolation",8,"bool");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (lua_toboolean(L, 8)!=0);
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float result;
  
  SWIG_check_num_args("Neo::HermiteInterpolation",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HermiteInterpolation",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HermiteInterpolation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HermiteInterpolation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::HermiteInterpolation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::HermiteInterpolation",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::HermiteInterpolation",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::HermiteInterpolation",7,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (float)Neo::HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HermiteInterpolation(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_HermiteInterpolation__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_HermiteInterpolation__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isboolean(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_HermiteInterpolation__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HermiteInterpolation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::HermiteInterpolation(float,float,float,float,float,float,float,bool,bool)\n"
    "    Neo::HermiteInterpolation(float,float,float,float,float,float,float,bool)\n"
    "    Neo::HermiteInterpolation(float,float,float,float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_HueToRGB(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("Neo::HueToRGB",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::HueToRGB",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::HueToRGB",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::HueToRGB",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)Neo::HueToRGB(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RGBToHSV(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::RGBToHSV",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::RGBToHSV",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RGBToHSV",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::RGBToHSV(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HSVToRGB(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::HSVToRGB",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::HSVToRGB",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("HSVToRGB",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::HSVToRGB(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RGBToHSL(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::RGBToHSL",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::RGBToHSL",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RGBToHSL",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::RGBToHSL(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HSLToRGB(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 arg1 ;
  Neo::Vector3 *argp1 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::HSLToRGB",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::HSLToRGB",1,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("HSLToRGB",1,SWIGTYPE_p_Neo__Vector3);
  }
  arg1 = *argp1;
  
  result = Neo::HSLToRGB(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::x",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::x",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_x_get",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::y",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::y",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_y_get",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",0,0)
  result = (Neo::Vector2 *)new Neo::Vector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::Vector2",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (Neo::Vector2 *)new Neo::Vector2(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector2 *)new Neo::Vector2(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((Neo::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector2::Vector2",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector2 *)new Neo::Vector2((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::Vector2()\n"
    "    Neo::Vector2::Vector2(float,float)\n"
    "    Neo::Vector2::Vector2(float const)\n"
    "    Neo::Vector2::Vector2(float const *)\n"
    "    Neo::Vector2::Vector2(Neo::Vector2 const &)\n"
    "    Neo::Vector2::Vector2(Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_add(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::add",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::add",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_add",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->add((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_substract(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::substract",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::substract",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::substract",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_substract",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_substract",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->substract((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_multiply(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::multiply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::multiply",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::multiply",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_multiply",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->multiply(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_divide(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::divide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::divide",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::divide",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_divide",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->divide(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_equals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector2::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::equals",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::equals",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_equals",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_equals",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)((Neo::Vector2 const *)arg1)->equals((Neo::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator +(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator -(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator +",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator +((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator -",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator -((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___sub__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator -(float const) const\n"
    "    Neo::Vector2::operator -(Neo::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator *",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator *(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator *",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator *",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator *((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator *(float const) const\n"
    "    Neo::Vector2::operator *(Neo::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator /",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator /",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator /((Neo::Vector2 const &)*arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator /",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->operator /(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator /(Neo::Vector2 const &) const\n"
    "    Neo::Vector2::operator /(float const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator ==",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::operator ==",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)((Neo::Vector2 const *)arg1)->operator ==((Neo::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator -",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___unm",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator -();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::operator +",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->operator +();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector2___add__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector2::operator +(float const) const\n"
    "    Neo::Vector2::operator +(Neo::Vector2 const &) const\n"
    "    Neo::Vector2::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Vector2::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::set",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector2::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_set",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector2::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::loadIdentity",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_loadIdentity",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector2::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::normalize",1,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_normalize",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector2::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::rotate",1,"Neo::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::rotate",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_rotate",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->rotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getNormalized",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getNormalized",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = ((Neo::Vector2 const *)arg1)->getNormalized();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getRotated(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::getRotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getRotated",1,"Neo::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector2::getRotated",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getRotated",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector2 const *)arg1)->getRotated(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getAngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getAngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getAngleBetween",1,"Neo::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::getAngleBetween",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getAngleBetween",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getAngleBetween",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)(arg1)->getAngleBetween((Neo::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getLength",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getLength",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_getSquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::getSquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::getSquaredLength",1,"Neo::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_getSquaredLength",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->getSquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector2::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::dotProduct",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::dotProduct",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_dotProduct",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_dotProduct",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (float)((Neo::Vector2 const *)arg1)->dotProduct((Neo::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = (Neo::Vector2 *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Vector2::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector2::lerp",1,"Neo::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector2::lerp",2,"Neo::Vector2 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector2::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_lerp",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Vector2_lerp",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector2 const *)arg1)->lerp((Neo::Vector2 const &)*arg2,arg3);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2(void *obj) {
Neo::Vector2 *arg1 = (Neo::Vector2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector2_attributes[] = {
    { "x", _wrap_Vector2_x_get, _wrap_Vector2_x_set },
    { "y", _wrap_Vector2_y_get, _wrap_Vector2_y_set },
    {0,0,0}
};
static swig_lua_method swig_Vector2_methods[]= {
    { "add", _wrap_Vector2_add},
    { "substract", _wrap_Vector2_substract},
    { "multiply", _wrap_Vector2_multiply},
    { "divide", _wrap_Vector2_divide},
    { "equals", _wrap_Vector2_equals},
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    { "__eq", _wrap_Vector2___eq},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    { "set", _wrap_Vector2_set},
    { "loadIdentity", _wrap_Vector2_loadIdentity},
    { "normalize", _wrap_Vector2_normalize},
    { "rotate", _wrap_Vector2_rotate},
    { "getNormalized", _wrap_Vector2_getNormalized},
    { "getRotated", _wrap_Vector2_getRotated},
    { "getAngleBetween", _wrap_Vector2_getAngleBetween},
    { "getLength", _wrap_Vector2_getLength},
    { "getSquaredLength", _wrap_Vector2_getSquaredLength},
    { "dotProduct", _wrap_Vector2_dotProduct},
    { "lerp", _wrap_Vector2_lerp},
    {0,0}
};
static swig_lua_method swig_Vector2_meta[] = {
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    { "__eq", _wrap_Vector2___eq},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    {0,0}
};

static swig_lua_attribute swig_Vector2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector2_Sf_SwigStatic = {
    "Vector2",
    swig_Vector2_Sf_SwigStatic_methods,
    swig_Vector2_Sf_SwigStatic_attributes,
    swig_Vector2_Sf_SwigStatic_constants,
    swig_Vector2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector2_bases[] = {0};
static const char *swig_Vector2_base_names[] = {0};
static swig_lua_class _wrap_class_Vector2 = { "Vector2", "Vector2", &SWIGTYPE_p_Neo__Vector2,_proxy__wrap_new_Vector2, swig_delete_Vector2, swig_Vector2_methods, swig_Vector2_attributes, &swig_Vector2_Sf_SwigStatic, swig_Vector2_meta, swig_Vector2_bases, swig_Vector2_base_names };

static int _wrap_Vector3_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::x",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::x",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_x_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::y",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::y",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_y_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::z",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::z",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_z_get",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",0,0)
  result = (Neo::Vector3 *)new Neo::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::Vector3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::Vector3",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Vector3 *)new Neo::Vector3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector3 *)new Neo::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector2 *arg1 = 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector3::Vector3",1,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (Neo::Vector3 *)new Neo::Vector3((Neo::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::Vector3()\n"
    "    Neo::Vector3::Vector3(float,float,float)\n"
    "    Neo::Vector3::Vector3(float const)\n"
    "    Neo::Vector3::Vector3(float const *)\n"
    "    Neo::Vector3::Vector3(Neo::Vector3 const &)\n"
    "    Neo::Vector3::Vector3(Neo::Vector4 const &)\n"
    "    Neo::Vector3::Vector3(Neo::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_add(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::add",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::add",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_add",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->add((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_substract(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::substract",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::substract",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::substract",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_substract",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_substract",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->substract((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_multiply(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::multiply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::multiply",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::multiply",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_multiply",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->multiply(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_divide(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::divide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::divide",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::divide",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_divide",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->divide(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_equals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector3::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::equals",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::equals",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_equals",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_equals",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)((Neo::Vector3 const *)arg1)->equals((Neo::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator +",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator +((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator -",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator -((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((Neo::Vector3 const *)arg1)->operator +((float const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((Neo::Vector3 const *)arg1)->operator -((float const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator -(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator -(float const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator *",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->operator *(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator *",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator *",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator *((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator *(float const) const\n"
    "    Neo::Vector3::operator *(Neo::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator /",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator /",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator /((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator /",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->operator /(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator /(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator /(float const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator ==",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::operator ==",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)((Neo::Vector3 const *)arg1)->operator ==((Neo::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator -",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator -();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::operator +",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->operator +();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector3___add__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector3::operator +(Neo::Vector3 const &) const\n"
    "    Neo::Vector3::operator +(float const &) const\n"
    "    Neo::Vector3::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Vector3::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::set",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::set",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::set",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector3::set",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_set",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector3::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::loadIdentity",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_loadIdentity",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_crossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::crossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::crossProduct",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::crossProduct",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_crossProduct",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_crossProduct",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->crossProduct((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::dotProduct",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::dotProduct",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_dotProduct",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_dotProduct",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->dotProduct((Neo::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector3::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::normalize",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_normalize",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getNormalized",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getNormalized",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->getNormalized();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getLength",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getLength",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getSquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector3::getSquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getSquaredLength",1,"Neo::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getSquaredLength",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (float)((Neo::Vector3 const *)arg1)->getSquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateX",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateX",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateX",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateY",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateY",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateY",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateZ",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateZ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateZ",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotateZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_rotateAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Vector3::rotateAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::rotateAxis",1,"Neo::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::rotateAxis",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Vector3::rotateAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateAxis",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_rotateAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->rotateAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedX",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedX",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedX",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedX(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedY",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedY",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedY",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedY(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedZ",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedZ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedZ",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Neo::Vector3 const *)arg1)->getRotatedZ(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_getRotatedAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  double arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::getRotatedAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",1,"Neo::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Vector3::getRotatedAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedAxis",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_getRotatedAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Vector3 const *)arg1)->getRotatedAxis(arg2,(Neo::Vector3 const &)*arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Vector3::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector3::lerp",1,"Neo::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector3::lerp",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector3::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_lerp",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3_lerp",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector3 const *)arg1)->lerp((Neo::Vector3 const &)*arg2,arg3);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Neo::Vector3 *arg1 = (Neo::Vector3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3_attributes[] = {
    { "x", _wrap_Vector3_x_get, _wrap_Vector3_x_set },
    { "y", _wrap_Vector3_y_get, _wrap_Vector3_y_set },
    { "z", _wrap_Vector3_z_get, _wrap_Vector3_z_set },
    {0,0,0}
};
static swig_lua_method swig_Vector3_methods[]= {
    { "add", _wrap_Vector3_add},
    { "substract", _wrap_Vector3_substract},
    { "multiply", _wrap_Vector3_multiply},
    { "divide", _wrap_Vector3_divide},
    { "equals", _wrap_Vector3_equals},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "__eq", _wrap_Vector3___eq},
    { "__unm", _wrap_Vector3___unm},
    { "__add", _wrap_Vector3___add},
    { "set", _wrap_Vector3_set},
    { "loadIdentity", _wrap_Vector3_loadIdentity},
    { "crossProduct", _wrap_Vector3_crossProduct},
    { "dotProduct", _wrap_Vector3_dotProduct},
    { "normalize", _wrap_Vector3_normalize},
    { "getNormalized", _wrap_Vector3_getNormalized},
    { "getLength", _wrap_Vector3_getLength},
    { "getSquaredLength", _wrap_Vector3_getSquaredLength},
    { "rotateX", _wrap_Vector3_rotateX},
    { "rotateY", _wrap_Vector3_rotateY},
    { "rotateZ", _wrap_Vector3_rotateZ},
    { "rotateAxis", _wrap_Vector3_rotateAxis},
    { "getRotatedX", _wrap_Vector3_getRotatedX},
    { "getRotatedY", _wrap_Vector3_getRotatedY},
    { "getRotatedZ", _wrap_Vector3_getRotatedZ},
    { "getRotatedAxis", _wrap_Vector3_getRotatedAxis},
    { "lerp", _wrap_Vector3_lerp},
    {0,0}
};
static swig_lua_method swig_Vector3_meta[] = {
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "__eq", _wrap_Vector3___eq},
    { "__unm", _wrap_Vector3___unm},
    { "__add", _wrap_Vector3___add},
    {0,0}
};

static swig_lua_attribute swig_Vector3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3_Sf_SwigStatic = {
    "Vector3",
    swig_Vector3_Sf_SwigStatic_methods,
    swig_Vector3_Sf_SwigStatic_attributes,
    swig_Vector3_Sf_SwigStatic_constants,
    swig_Vector3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3_bases[] = {0};
static const char *swig_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3 = { "Vector3", "Vector3", &SWIGTYPE_p_Neo__Vector3,_proxy__wrap_new_Vector3, swig_delete_Vector3, swig_Vector3_methods, swig_Vector3_attributes, &swig_Vector3_Sf_SwigStatic, swig_Vector3_meta, swig_Vector3_bases, swig_Vector3_base_names };

static int _wrap_Vector4_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::x",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_x_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::x",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_x_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::y",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_y_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::y",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_y_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::z",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_z_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::z",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_z_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_w_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Vector4::w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::w",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_w_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_w_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::w",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_w_get",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",0,0)
  result = (Neo::Vector4 *)new Neo::Vector4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::Vector4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::Vector4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector4::Vector4",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Neo::Vector4 *)new Neo::Vector4(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (Neo::Vector4 *)new Neo::Vector4(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Vector4::Vector4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Vector4::Vector4",1,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("new_Vector4",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (Neo::Vector4 *)new Neo::Vector4((Neo::Color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector4(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector4__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vector4__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector4::Vector4()\n"
    "    Neo::Vector4::Vector4(float,float,float,float)\n"
    "    Neo::Vector4::Vector4(float const)\n"
    "    Neo::Vector4::Vector4(float const *)\n"
    "    Neo::Vector4::Vector4(Neo::Vector4 const &)\n"
    "    Neo::Vector4::Vector4(Neo::Vector3 const &)\n"
    "    Neo::Vector4::Vector4(Neo::Color const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector4_add(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::add",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::add",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_add",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_add",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->add((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_substract(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::substract",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::substract",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::substract",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_substract",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_substract",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->substract((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_multiply(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::multiply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::multiply",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::multiply",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_multiply",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->multiply(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_divide(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::divide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::divide",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::divide",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_divide",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->divide(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_equals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector4::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::equals",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::equals",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_equals",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_equals",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (bool)((Neo::Vector4 const *)arg1)->equals((Neo::Vector4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator +",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator +",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator +((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___sub(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator -",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator -",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___sub",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___sub",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator -((Neo::Vector4 const &)*arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator *",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___mul",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator /",1,"Neo::Vector4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___div",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Vector4 const *)arg1)->operator /(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Vector4::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator ==",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::operator ==",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___eq",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___eq",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (bool)((Neo::Vector4 const *)arg1)->operator ==((Neo::Vector4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator -",1,"Neo::Vector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___unm",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator -();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::operator +",1,"Neo::Vector4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4___add",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = ((Neo::Vector4 const *)arg1)->operator +();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Vector4___add__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector4___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector4___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Vector4::operator +(Neo::Vector4 const &) const\n"
    "    Neo::Vector4::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector4_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("Neo::Vector4::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::set",1,"Neo::Vector4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Vector4::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Vector4::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Vector4::set",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_set",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::Vector4::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::loadIdentity",1,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_loadIdentity",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_dotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Vector4::dotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::dotProduct",1,"Neo::Vector4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::dotProduct",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_dotProduct",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_dotProduct",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (float)(arg1)->dotProduct((Neo::Vector4 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector4_lerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = (Neo::Vector4 *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  float arg3 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Vector4::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Vector4::lerp",1,"Neo::Vector4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Vector4::lerp",2,"Neo::Vector4 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Vector4::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_lerp",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Vector4_lerp",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = ((Neo::Vector4 const *)arg1)->lerp((Neo::Vector4 const &)*arg2,arg3);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector4(void *obj) {
Neo::Vector4 *arg1 = (Neo::Vector4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector4_attributes[] = {
    { "x", _wrap_Vector4_x_get, _wrap_Vector4_x_set },
    { "y", _wrap_Vector4_y_get, _wrap_Vector4_y_set },
    { "z", _wrap_Vector4_z_get, _wrap_Vector4_z_set },
    { "w", _wrap_Vector4_w_get, _wrap_Vector4_w_set },
    {0,0,0}
};
static swig_lua_method swig_Vector4_methods[]= {
    { "add", _wrap_Vector4_add},
    { "substract", _wrap_Vector4_substract},
    { "multiply", _wrap_Vector4_multiply},
    { "divide", _wrap_Vector4_divide},
    { "equals", _wrap_Vector4_equals},
    { "__sub", _wrap_Vector4___sub},
    { "__mul", _wrap_Vector4___mul},
    { "__div", _wrap_Vector4___div},
    { "__eq", _wrap_Vector4___eq},
    { "__unm", _wrap_Vector4___unm},
    { "__add", _wrap_Vector4___add},
    { "set", _wrap_Vector4_set},
    { "loadIdentity", _wrap_Vector4_loadIdentity},
    { "dotProduct", _wrap_Vector4_dotProduct},
    { "lerp", _wrap_Vector4_lerp},
    {0,0}
};
static swig_lua_method swig_Vector4_meta[] = {
    { "__sub", _wrap_Vector4___sub},
    { "__mul", _wrap_Vector4___mul},
    { "__div", _wrap_Vector4___div},
    { "__eq", _wrap_Vector4___eq},
    { "__unm", _wrap_Vector4___unm},
    { "__add", _wrap_Vector4___add},
    {0,0}
};

static swig_lua_attribute swig_Vector4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector4_Sf_SwigStatic = {
    "Vector4",
    swig_Vector4_Sf_SwigStatic_methods,
    swig_Vector4_Sf_SwigStatic_attributes,
    swig_Vector4_Sf_SwigStatic_constants,
    swig_Vector4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector4_bases[] = {0};
static const char *swig_Vector4_base_names[] = {0};
static swig_lua_class _wrap_class_Vector4 = { "Vector4", "Vector4", &SWIGTYPE_p_Neo__Vector4,_proxy__wrap_new_Vector4, swig_delete_Vector4, swig_Vector4_methods, swig_Vector4_attributes, &swig_Vector4_Sf_SwigStatic, swig_Vector4_meta, swig_Vector4_bases, swig_Vector4_base_names };

static int _wrap_Color_r_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::r",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::r",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_r_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_r_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::r",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_r_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::g",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::g",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_g_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::g",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_g_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::b",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::b",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_b_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::b",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_b_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("Neo::Color::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::a",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::a",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_a_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("Neo::Color::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::a",1,"Neo::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_a_get",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (unsigned char) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",0,0)
  result = (Neo::Color *)new Neo::Color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"unsigned char");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::Color",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Color::Color",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Color::Color",4,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  result = (Neo::Color *)new Neo::Color(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Color);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector4 *arg1 = 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::Color::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Color::Color",1,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_Neo__Vector4);
  }
  
  result = (Neo::Color *)new Neo::Color((Neo::Vector4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_4(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Color'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::Color()\n"
    "    Neo::Color::Color(unsigned char,unsigned char,unsigned char,unsigned char)\n"
    "    Neo::Color::Color(Neo::Color const &)\n"
    "    Neo::Color::Color(Neo::Vector3 const &)\n"
    "    Neo::Color::Color(Neo::Vector4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator +",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator +",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = ((Neo::Color const *)arg1)->operator +((Neo::Color const &)*arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator -",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator -",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = ((Neo::Color const *)arg1)->operator -((Neo::Color const &)*arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  int arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator +",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator +",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator +(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::operator +(Neo::Color const &) const\n"
    "    Neo::Color::operator +(int const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Color___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  int arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator -",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator -",2,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (int const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator -(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Color___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Color::operator -(Neo::Color const &) const\n"
    "    Neo::Color::operator -(int const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Color___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  float arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator *",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___mul",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator *(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  float arg2 ;
  Neo::Color result;
  
  SWIG_check_num_args("Neo::Color::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator /",1,"Neo::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___div",1,SWIGTYPE_p_Neo__Color);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Color const *)arg1)->operator /(arg2);
  {
    Neo::Color * resultptr = new Neo::Color((const Neo::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  Neo::Color *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Color::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::operator ==",1,"Neo::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Color::operator ==",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___eq",1,SWIGTYPE_p_Neo__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color___eq",2,SWIGTYPE_p_Neo__Color);
  }
  
  result = (bool)((Neo::Color const *)arg1)->operator ==((Neo::Color const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Color *arg1 = (Neo::Color *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  SWIG_check_num_args("Neo::Color::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Color::set",1,"Neo::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Color::set",2,"unsigned char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Color::set",3,"unsigned char");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Color::set",4,"unsigned char");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Color::set",5,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_Neo__Color);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned char)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color(void *obj) {
Neo::Color *arg1 = (Neo::Color *) obj;
delete arg1;
}
static int _proxy__wrap_new_Color(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Color);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Color_attributes[] = {
    { "r", _wrap_Color_r_get, _wrap_Color_r_set },
    { "g", _wrap_Color_g_get, _wrap_Color_g_set },
    { "b", _wrap_Color_b_get, _wrap_Color_b_set },
    { "a", _wrap_Color_a_get, _wrap_Color_a_set },
    {0,0,0}
};
static swig_lua_method swig_Color_methods[]= {
    { "__add", _wrap_Color___add},
    { "__sub", _wrap_Color___sub},
    { "__mul", _wrap_Color___mul},
    { "__div", _wrap_Color___div},
    { "__eq", _wrap_Color___eq},
    { "set", _wrap_Color_set},
    {0,0}
};
static swig_lua_method swig_Color_meta[] = {
    { "__add", _wrap_Color___add},
    { "__sub", _wrap_Color___sub},
    { "__mul", _wrap_Color___mul},
    { "__div", _wrap_Color___div},
    { "__eq", _wrap_Color___eq},
    {0,0}
};

static swig_lua_attribute swig_Color_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Color_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Color_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Color_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Color_Sf_SwigStatic = {
    "Color",
    swig_Color_Sf_SwigStatic_methods,
    swig_Color_Sf_SwigStatic_attributes,
    swig_Color_Sf_SwigStatic_constants,
    swig_Color_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Color_bases[] = {0};
static const char *swig_Color_base_names[] = {0};
static swig_lua_class _wrap_class_Color = { "Color", "Color", &SWIGTYPE_p_Neo__Color,_proxy__wrap_new_Color, swig_delete_Color, swig_Color_methods, swig_Color_attributes, &swig_Color_Sf_SwigStatic, swig_Color_meta, swig_Color_bases, swig_Color_base_names };

static int _wrap_Matrix4x4_entries_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::entries",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::entries",1,"Neo::Matrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Matrix4x4::entries",2,"float [16]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_entries_set",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrix4x4_entries_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->entries;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_entries_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::entries",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_entries_get",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (float *)(float *) ((arg1)->entries);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",0,0)
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",12,"float");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",13,"float");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",14,"float");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",15,"float");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",16,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12);
  arg13 = (float)lua_tonumber(L, 13);
  arg14 = (float)lua_tonumber(L, 14);
  arg15 = (float)lua_tonumber(L, 15);
  arg16 = (float)lua_tonumber(L, 16);
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_float);
  }
  
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::Matrix4x4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Matrix4x4::Matrix4x4",1,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (Neo::Matrix4x4 *)new Neo::Matrix4x4((Neo::Matrix4x4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix4x4(lua_State* L) {
  int argc;
  int argv[17]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrix4x4__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix4x4__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix4x4__SWIG_3(L);
    }
  }
  if (argc == 16) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_new_Matrix4x4__SWIG_1(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrix4x4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::Matrix4x4()\n"
    "    Neo::Matrix4x4::Matrix4x4(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n"
    "    Neo::Matrix4x4::Matrix4x4(float const *)\n"
    "    Neo::Matrix4x4::Matrix4x4(Neo::Matrix4x4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator +",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator +",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator +((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___sub(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator -",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator -",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___sub",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___sub",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator -((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *((Neo::Matrix4x4 const &)*arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___div(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator /",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___div",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->operator /(arg2);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator ==",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator ==",2,"Neo::Matrix4x4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___eq",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___eq",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = (bool)((Neo::Matrix4x4 const *)arg1)->operator ==((Neo::Matrix4x4 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator -",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___unm",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator -();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator +",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___add",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator +();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix4x4___add__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::operator +(Neo::Matrix4x4 const &) const\n"
    "    Neo::Matrix4x4::operator +() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Vector4 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator *",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator *",2,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  result = ((Neo::Matrix4x4 const *)arg1)->operator *(arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix4x4___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::operator *(Neo::Matrix4x4 const &) const\n"
    "    Neo::Matrix4x4::operator *(float const) const\n"
    "    Neo::Matrix4x4::operator *(Neo::Vector4 const) const\n"
    "    Neo::Matrix4x4::operator *(Neo::Vector3 const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4___call(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::operator ()",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___call",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::loadIdentity",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_loadIdentity",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_loadZero(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::loadZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::loadZero",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_loadZero",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->loadZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_invert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::invert",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_invert",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_transpose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::transpose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_transpose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->transpose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_affineInvert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::affineInvert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::affineInvert",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_affineInvert",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->affineInvert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_invertTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::invertTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::invertTranspose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_invertTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->invertTranspose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_affineInvertTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::affineInvertTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::affineInvertTranspose",1,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_affineInvertTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->affineInvertTranspose();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_scale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::scale",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::scale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_scale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_scale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->scale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::rotate",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::rotate",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::rotate",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_translate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::translate",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::translate",2,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translate",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_translate",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->translate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setEntry",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setEntry",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setEntry",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setEntry(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setScale",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setScale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setScale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setScale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setUniformScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setUniformScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setUniformScale",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setUniformScale",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setUniformScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setUniformScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setTranslation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setTranslation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setTranslation",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setTranslation",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setTranslation((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setTranslationPart(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setTranslationPart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setTranslationPart",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setTranslationPart",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslationPart",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslationPart",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setTranslationPart((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",2,"float const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationAxis",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setRotationAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationX",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationX",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationX",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationY(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationY",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationY",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationY",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationZ(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationZ",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationZ",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationZ",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setRotationZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationEuler(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationEuler",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::setRotationEuler",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setRotationEuler(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationPartEuler",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->setRotationPartEuler(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::setRotationPartEuler",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",1,"Neo::Matrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::setRotationPartEuler",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_setRotationPartEuler",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setRotationPartEuler((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_setRotationPartEuler(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x4_setRotationPartEuler__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix4x4_setRotationPartEuler__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_setRotationPartEuler'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Matrix4x4::setRotationPartEuler(float const,float const,float const)\n"
    "    Neo::Matrix4x4::setRotationPartEuler(Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x4_getEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getEntry",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getEntry",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getEntry",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((Neo::Matrix4x4 const *)arg1)->getEntry(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getRotatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getRotatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getRotatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getRotatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRotatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getRotatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getRotatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInverseRotatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInverseRotatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInverseRotatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getInverseRotatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverseRotatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getInverseRotatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInverseRotatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranslatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranslatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranslatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getTranslatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInversetranslatedVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInversetranslatedVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranslatedVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranslatedVector3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranslatedVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranslatedVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranslatedVector3((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranslationPart(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranslationPart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranslationPart",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslationPart",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranslationPart();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getEulerAngles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getEulerAngles",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getEulerAngles",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getEulerAngles();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getScale",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getScale",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getScale();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getRow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getRow",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getRow",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRow",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->getRow(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getColumn(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  int arg2 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getColumn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getColumn",1,"Neo::Matrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Matrix4x4::getColumn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getColumn",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Neo::Matrix4x4 const *)arg1)->getColumn(arg2);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInverse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInverse",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverse",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInverse();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getTranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getTranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getInversetranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getInversetranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getInversetranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInversetranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getInversetranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getAffineInverse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getAffineInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getAffineInverse",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getAffineInverse",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverse();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_getAffineInverseTranspose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::Matrix4x4::getAffineInverseTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::getAffineInverseTranspose",1,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getAffineInverseTranspose",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  result = ((Neo::Matrix4x4 const *)arg1)->getAffineInverseTranspose();
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_rotateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::rotateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::rotateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::rotateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_rotateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->rotateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_inverseRotateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::inverseRotateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::inverseRotateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::inverseRotateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_inverseRotateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_inverseRotateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->inverseRotateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_translateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::translateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::translateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::translateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_translateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->translateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x4_inversetranslateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Matrix4x4::inversetranslateVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Matrix4x4::inversetranslateVector3",1,"Neo::Matrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Matrix4x4::inversetranslateVector3",2,"Neo::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_inversetranslateVector3",1,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Matrix4x4_inversetranslateVector3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  ((Neo::Matrix4x4 const *)arg1)->inversetranslateVector3(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix4x4(void *obj) {
Neo::Matrix4x4 *arg1 = (Neo::Matrix4x4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Matrix4x4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Matrix4x4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Matrix4x4_attributes[] = {
    { "entries", _wrap_Matrix4x4_entries_get, _wrap_Matrix4x4_entries_set },
    {0,0,0}
};
static swig_lua_method swig_Matrix4x4_methods[]= {
    { "__sub", _wrap_Matrix4x4___sub},
    { "__div", _wrap_Matrix4x4___div},
    { "__eq", _wrap_Matrix4x4___eq},
    { "__unm", _wrap_Matrix4x4___unm},
    { "__add", _wrap_Matrix4x4___add},
    { "__mul", _wrap_Matrix4x4___mul},
    { "__call", _wrap_Matrix4x4___call},
    { "loadIdentity", _wrap_Matrix4x4_loadIdentity},
    { "loadZero", _wrap_Matrix4x4_loadZero},
    { "invert", _wrap_Matrix4x4_invert},
    { "transpose", _wrap_Matrix4x4_transpose},
    { "affineInvert", _wrap_Matrix4x4_affineInvert},
    { "invertTranspose", _wrap_Matrix4x4_invertTranspose},
    { "affineInvertTranspose", _wrap_Matrix4x4_affineInvertTranspose},
    { "scale", _wrap_Matrix4x4_scale},
    { "rotate", _wrap_Matrix4x4_rotate},
    { "translate", _wrap_Matrix4x4_translate},
    { "setEntry", _wrap_Matrix4x4_setEntry},
    { "setScale", _wrap_Matrix4x4_setScale},
    { "setUniformScale", _wrap_Matrix4x4_setUniformScale},
    { "setTranslation", _wrap_Matrix4x4_setTranslation},
    { "setTranslationPart", _wrap_Matrix4x4_setTranslationPart},
    { "setRotationAxis", _wrap_Matrix4x4_setRotationAxis},
    { "setRotationX", _wrap_Matrix4x4_setRotationX},
    { "setRotationY", _wrap_Matrix4x4_setRotationY},
    { "setRotationZ", _wrap_Matrix4x4_setRotationZ},
    { "setRotationEuler", _wrap_Matrix4x4_setRotationEuler},
    { "setRotationPartEuler", _wrap_Matrix4x4_setRotationPartEuler},
    { "getEntry", _wrap_Matrix4x4_getEntry},
    { "getRotatedVector3", _wrap_Matrix4x4_getRotatedVector3},
    { "getInverseRotatedVector3", _wrap_Matrix4x4_getInverseRotatedVector3},
    { "getTranslatedVector3", _wrap_Matrix4x4_getTranslatedVector3},
    { "getInversetranslatedVector3", _wrap_Matrix4x4_getInversetranslatedVector3},
    { "getTranslationPart", _wrap_Matrix4x4_getTranslationPart},
    { "getEulerAngles", _wrap_Matrix4x4_getEulerAngles},
    { "getScale", _wrap_Matrix4x4_getScale},
    { "getRow", _wrap_Matrix4x4_getRow},
    { "getColumn", _wrap_Matrix4x4_getColumn},
    { "getInverse", _wrap_Matrix4x4_getInverse},
    { "getTranspose", _wrap_Matrix4x4_getTranspose},
    { "getInversetranspose", _wrap_Matrix4x4_getInversetranspose},
    { "getAffineInverse", _wrap_Matrix4x4_getAffineInverse},
    { "getAffineInverseTranspose", _wrap_Matrix4x4_getAffineInverseTranspose},
    { "rotateVector3", _wrap_Matrix4x4_rotateVector3},
    { "inverseRotateVector3", _wrap_Matrix4x4_inverseRotateVector3},
    { "translateVector3", _wrap_Matrix4x4_translateVector3},
    { "inversetranslateVector3", _wrap_Matrix4x4_inversetranslateVector3},
    {0,0}
};
static swig_lua_method swig_Matrix4x4_meta[] = {
    { "__sub", _wrap_Matrix4x4___sub},
    { "__div", _wrap_Matrix4x4___div},
    { "__eq", _wrap_Matrix4x4___eq},
    { "__unm", _wrap_Matrix4x4___unm},
    { "__add", _wrap_Matrix4x4___add},
    { "__mul", _wrap_Matrix4x4___mul},
    { "__call", _wrap_Matrix4x4___call},
    {0,0}
};

static swig_lua_attribute swig_Matrix4x4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Matrix4x4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Matrix4x4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Matrix4x4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Matrix4x4_Sf_SwigStatic = {
    "Matrix4x4",
    swig_Matrix4x4_Sf_SwigStatic_methods,
    swig_Matrix4x4_Sf_SwigStatic_attributes,
    swig_Matrix4x4_Sf_SwigStatic_constants,
    swig_Matrix4x4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Matrix4x4_bases[] = {0};
static const char *swig_Matrix4x4_base_names[] = {0};
static swig_lua_class _wrap_class_Matrix4x4 = { "Matrix4x4", "Matrix4x4", &SWIGTYPE_p_Neo__Matrix4x4,_proxy__wrap_new_Matrix4x4, swig_delete_Matrix4x4, swig_Matrix4x4_methods, swig_Matrix4x4_attributes, &swig_Matrix4x4_Sf_SwigStatic, swig_Matrix4x4_meta, swig_Matrix4x4_bases, swig_Matrix4x4_base_names };

static int _wrap_Quaternion_values_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("Neo::Quaternion::values",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::values",1,"Neo::Quaternion *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Quaternion::values",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_values_set",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_values_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->values;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_values_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::values",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_values_get",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (float *)(float *) ((arg1)->values);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",0,0)
  result = (Neo::Quaternion *)new Neo::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::Quaternion",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"Neo::Vector3 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,(Neo::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Quaternion *)new Neo::Quaternion(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = 0 ;
  Neo::Quaternion arg2 ;
  float arg3 ;
  Neo::Quaternion *argp2 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::Quaternion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Quaternion::Quaternion",1,"Neo::Quaternion const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::Quaternion",2,"Neo::Quaternion");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::Quaternion",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Neo__Quaternion);
  }
  arg2 = *argp2;
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (Neo::Quaternion *)new Neo::Quaternion((Neo::Quaternion const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Quaternion::Quaternion()\n"
    "    Neo::Quaternion::Quaternion(float,float,float,float)\n"
    "    Neo::Quaternion::Quaternion(float,Neo::Vector3 const &)\n"
    "    Neo::Quaternion::Quaternion(float,float,float)\n"
    "    Neo::Quaternion::Quaternion(Neo::Quaternion const &,Neo::Quaternion,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator *",1,"Neo::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::operator *",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->operator *((Neo::Quaternion const &)*arg2);
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___unm(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator -",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___unm",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->operator -();
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::operator ==",1,"Neo::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::operator ==",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (bool)((Neo::Quaternion const *)arg1)->operator ==((Neo::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::normalize",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::loadIdentity",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_loadIdentity",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromAngles",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",1,"Neo::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::setFromAngles",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromAngles",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setFromAngles(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_slerp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  Neo::Quaternion *arg3 = 0 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::Quaternion::slerp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::slerp",1,"Neo::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::slerp",2,"Neo::Quaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::slerp",3,"Neo::Quaternion const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Quaternion::slerp",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",3,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->slerp((Neo::Quaternion const &)*arg2,(Neo::Quaternion const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_invert(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::invert",1,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_invert",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromAngleAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromAngleAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",1,"Neo::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromAngleAxis",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromAngleAxis",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromAngleAxis",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFromAngleAxis(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setFromVectors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Quaternion::setFromVectors",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",1,"Neo::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Quaternion::setFromVectors",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setFromVectors",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFromVectors((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Quaternion::getEulerAngles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getEulerAngles",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngles",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->getEulerAngles();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Quaternion::getAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getAngle",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getAngle",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (float)((Neo::Quaternion const *)arg1)->getAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Quaternion *arg1 = (Neo::Quaternion *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Quaternion::getAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Quaternion::getAxis",1,"Neo::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getAxis",1,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = ((Neo::Quaternion const *)arg1)->getAxis();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
Neo::Quaternion *arg1 = (Neo::Quaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_Quaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Quaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Quaternion_attributes[] = {
    { "values", _wrap_Quaternion_values_get, _wrap_Quaternion_values_set },
    {0,0,0}
};
static swig_lua_method swig_Quaternion_methods[]= {
    { "__mul", _wrap_Quaternion___mul},
    { "__unm", _wrap_Quaternion___unm},
    { "__eq", _wrap_Quaternion___eq},
    { "normalize", _wrap_Quaternion_normalize},
    { "loadIdentity", _wrap_Quaternion_loadIdentity},
    { "setFromAngles", _wrap_Quaternion_setFromAngles},
    { "slerp", _wrap_Quaternion_slerp},
    { "invert", _wrap_Quaternion_invert},
    { "setFromAngleAxis", _wrap_Quaternion_setFromAngleAxis},
    { "setFromVectors", _wrap_Quaternion_setFromVectors},
    { "getEulerAngles", _wrap_Quaternion_getEulerAngles},
    { "getAngle", _wrap_Quaternion_getAngle},
    { "getAxis", _wrap_Quaternion_getAxis},
    {0,0}
};
static swig_lua_method swig_Quaternion_meta[] = {
    { "__mul", _wrap_Quaternion___mul},
    { "__unm", _wrap_Quaternion___unm},
    { "__eq", _wrap_Quaternion___eq},
    {0,0}
};

static swig_lua_attribute swig_Quaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Quaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Quaternion_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Quaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Quaternion_Sf_SwigStatic = {
    "Quaternion",
    swig_Quaternion_Sf_SwigStatic_methods,
    swig_Quaternion_Sf_SwigStatic_attributes,
    swig_Quaternion_Sf_SwigStatic_constants,
    swig_Quaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Quaternion_bases[] = {0};
static const char *swig_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Quaternion = { "Quaternion", "Quaternion", &SWIGTYPE_p_Neo__Quaternion,_proxy__wrap_new_Quaternion, swig_delete_Quaternion, swig_Quaternion_methods, swig_Quaternion_attributes, &swig_Quaternion_Sf_SwigStatic, swig_Quaternion_meta, swig_Quaternion_bases, swig_Quaternion_base_names };

static int _wrap_SystemContext_getScreenSize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::getScreenSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::getScreenSize",1,"Neo::SystemContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SystemContext::getScreenSize",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SystemContext::getScreenSize",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_getScreenSize",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SystemContext_getScreenSize",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SystemContext_getScreenSize",3,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->getScreenSize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_getScreenSize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::SystemContext::getScreenSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::getScreenSize",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_getScreenSize",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  result = (arg1)->getScreenSize();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_getScreenSize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__SystemContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SystemContext_getScreenSize__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__SystemContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SystemContext_getScreenSize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SystemContext_getScreenSize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::SystemContext::getScreenSize(unsigned int *,unsigned int *)\n"
    "    Neo::SystemContext::getScreenSize()\n");
  lua_error(L);return 0;
}


static int _wrap_SystemContext_setCursorPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::SystemContext::setCursorPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::setCursorPosition",1,"Neo::SystemContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SystemContext::setCursorPosition",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SystemContext::setCursorPosition",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_setCursorPosition",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setCursorPosition(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_hideCursor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::hideCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::hideCursor",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_hideCursor",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  (arg1)->hideCursor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_showCursor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::showCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::showCursor",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_showCursor",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  (arg1)->showCursor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_getWorkingDirectory(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::getWorkingDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::getWorkingDirectory",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_getWorkingDirectory",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  result = (char *)(arg1)->getWorkingDirectory();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_getSystemTick(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Neo::SystemContext::getSystemTick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::getSystemTick",1,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_getSystemTick",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  result = (unsigned long)(arg1)->getSystemTick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_setWindowTitle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::SystemContext::setWindowTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::setWindowTitle",1,"Neo::SystemContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::SystemContext::setWindowTitle",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_setWindowTitle",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setWindowTitle((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemContext_setScreenSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SystemContext *arg1 = (Neo::SystemContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::SystemContext::setScreenSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SystemContext::setScreenSize",1,"Neo::SystemContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SystemContext::setScreenSize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SystemContext::setScreenSize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("SystemContext_setScreenSize",1,SWIGTYPE_p_Neo__SystemContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setScreenSize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SystemContext(void *obj) {
Neo::SystemContext *arg1 = (Neo::SystemContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_SystemContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SystemContext_methods[]= {
    { "getScreenSize", _wrap_SystemContext_getScreenSize},
    { "setCursorPosition", _wrap_SystemContext_setCursorPosition},
    { "hideCursor", _wrap_SystemContext_hideCursor},
    { "showCursor", _wrap_SystemContext_showCursor},
    { "getWorkingDirectory", _wrap_SystemContext_getWorkingDirectory},
    { "getSystemTick", _wrap_SystemContext_getSystemTick},
    { "setWindowTitle", _wrap_SystemContext_setWindowTitle},
    { "setScreenSize", _wrap_SystemContext_setScreenSize},
    {0,0}
};
static swig_lua_method swig_SystemContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SystemContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SystemContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SystemContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SystemContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SystemContext_Sf_SwigStatic = {
    "SystemContext",
    swig_SystemContext_Sf_SwigStatic_methods,
    swig_SystemContext_Sf_SwigStatic_attributes,
    swig_SystemContext_Sf_SwigStatic_constants,
    swig_SystemContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SystemContext_bases[] = {0};
static const char *swig_SystemContext_base_names[] = {0};
static swig_lua_class _wrap_class_SystemContext = { "SystemContext", "SystemContext", &SWIGTYPE_p_Neo__SystemContext,0, swig_delete_SystemContext, swig_SystemContext_methods, swig_SystemContext_attributes, &swig_SystemContext_Sf_SwigStatic, swig_SystemContext_meta, swig_SystemContext_bases, swig_SystemContext_base_names };

static int _wrap_InputContext_createKey(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::createKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createKey",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createKey",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->createKey((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_createAxis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Neo::InputContext::createAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createAxis",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::InputContext::createAxis",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->createAxis((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_createAxis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::createAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createAxis",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->createAxis((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_createAxis(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__InputContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_InputContext_createAxis__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__InputContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputContext_createAxis__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputContext_createAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::InputContext::createAxis(char const *,bool)\n"
    "    Neo::InputContext::createAxis(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_InputContext_createProperty(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::createProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::createProperty",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::createProperty",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_createProperty",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->createProperty((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_downKey(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::downKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::downKey",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::downKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_downKey",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->downKey((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_upKey(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::upKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::upKey",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::upKey",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_upKey",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->upKey((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_setAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::InputContext::setAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::setAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::setAxis",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::InputContext::setAxis",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_setAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setAxis((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_setProperty(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::InputContext::setProperty",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::setProperty",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::setProperty",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::InputContext::setProperty",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_setProperty",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setProperty((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_isKeyPressed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::InputContext::isKeyPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::isKeyPressed",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::isKeyPressed",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_isKeyPressed",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->isKeyPressed((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_onKeyDown(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::InputContext::onKeyDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::onKeyDown",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::onKeyDown",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_onKeyDown",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->onKeyDown((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_onKeyUp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::InputContext::onKeyUp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::onKeyUp",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::onKeyUp",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_onKeyUp",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->onKeyUp((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getAxis(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::InputContext::getAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getAxis",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::getAxis",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getAxis",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (float)(arg1)->getAxis((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getProperty(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::InputContext::getProperty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getProperty",1,"Neo::InputContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::InputContext::getProperty",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getProperty",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->getProperty((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_beginTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::beginTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::beginTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::beginTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::beginTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_beginTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_beginTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->beginTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_updateTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::updateTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::updateTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::updateTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::updateTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_updateTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_updateTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->updateTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_endTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::endTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::endTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::endTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::endTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_endTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_endTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->endTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_cancelTouch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 arg3 ;
  Neo::Vector2 *argp3 ;
  
  SWIG_check_num_args("Neo::InputContext::cancelTouch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::cancelTouch",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::cancelTouch",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::InputContext::cancelTouch",3,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_cancelTouch",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputContext_cancelTouch",3,SWIGTYPE_p_Neo__Vector2);
  }
  arg3 = *argp3;
  
  (arg1)->cancelTouch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getTouchPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::InputContext::getTouchPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getTouchPosition",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::getTouchPosition",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getTouchPosition",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getTouchPosition(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getLastTouchPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::InputContext::getLastTouchPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getLastTouchPosition",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::getLastTouchPosition",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getLastTouchPosition",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getLastTouchPosition(arg2);
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_getTouchPhase(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  int arg2 ;
  Neo::TOUCH_PHASE result;
  
  SWIG_check_num_args("Neo::InputContext::getTouchPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::getTouchPhase",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::getTouchPhase",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_getTouchPhase",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Neo::TOUCH_PHASE)(arg1)->getTouchPhase(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_flush(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  
  SWIG_check_num_args("Neo::InputContext::flush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::flush",1,"Neo::InputContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_flush",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  (arg1)->flush();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_setLastChar(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::InputContext::setLastChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::setLastChar",1,"Neo::InputContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::InputContext::setLastChar",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_setLastChar",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setLastChar(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputContext_popLastChar(lua_State* L) {
  int SWIG_arg = 0;
  Neo::InputContext *arg1 = (Neo::InputContext *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::InputContext::popLastChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::InputContext::popLastChar",1,"Neo::InputContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("InputContext_popLastChar",1,SWIGTYPE_p_Neo__InputContext);
  }
  
  result = (unsigned int)(arg1)->popLastChar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputContext(void *obj) {
Neo::InputContext *arg1 = (Neo::InputContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_InputContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InputContext_methods[]= {
    { "createKey", _wrap_InputContext_createKey},
    { "createAxis", _wrap_InputContext_createAxis},
    { "createProperty", _wrap_InputContext_createProperty},
    { "downKey", _wrap_InputContext_downKey},
    { "upKey", _wrap_InputContext_upKey},
    { "setAxis", _wrap_InputContext_setAxis},
    { "setProperty", _wrap_InputContext_setProperty},
    { "isKeyPressed", _wrap_InputContext_isKeyPressed},
    { "onKeyDown", _wrap_InputContext_onKeyDown},
    { "onKeyUp", _wrap_InputContext_onKeyUp},
    { "getAxis", _wrap_InputContext_getAxis},
    { "getProperty", _wrap_InputContext_getProperty},
    { "beginTouch", _wrap_InputContext_beginTouch},
    { "updateTouch", _wrap_InputContext_updateTouch},
    { "endTouch", _wrap_InputContext_endTouch},
    { "cancelTouch", _wrap_InputContext_cancelTouch},
    { "getTouchPosition", _wrap_InputContext_getTouchPosition},
    { "getLastTouchPosition", _wrap_InputContext_getLastTouchPosition},
    { "getTouchPhase", _wrap_InputContext_getTouchPhase},
    { "flush", _wrap_InputContext_flush},
    { "setLastChar", _wrap_InputContext_setLastChar},
    { "popLastChar", _wrap_InputContext_popLastChar},
    {0,0}
};
static swig_lua_method swig_InputContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InputContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InputContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InputContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InputContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InputContext_Sf_SwigStatic = {
    "InputContext",
    swig_InputContext_Sf_SwigStatic_methods,
    swig_InputContext_Sf_SwigStatic_attributes,
    swig_InputContext_Sf_SwigStatic_constants,
    swig_InputContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InputContext_bases[] = {0};
static const char *swig_InputContext_base_names[] = {0};
static swig_lua_class _wrap_class_InputContext = { "InputContext", "InputContext", &SWIGTYPE_p_Neo__InputContext,0, swig_delete_InputContext, swig_InputContext_methods, swig_InputContext_attributes, &swig_InputContext_Sf_SwigStatic, swig_InputContext_meta, swig_InputContext_bases, swig_InputContext_base_names };

static int _wrap_RenderingContext_getRendererVersion(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getRendererVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getRendererVersion",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getRendererVersion",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  result = (char *)(arg1)->getRendererVersion();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setOrthoView(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setOrthoView",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::RenderingContext::setOrthoView",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setOrthoView",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->setOrthoView(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setPerspectiveView(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setPerspectiveView",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setPerspectiveView",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setPerspectiveView",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setPerspectiveView(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setViewport(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setViewport",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setViewport",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setViewport",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setViewport",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setViewport",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setViewport",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setViewport",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->setViewport(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::clear",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::clear",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_clear",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setClearColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setClearColor",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setClearColor",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setClearColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setClearColor",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setClearColor((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_init(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::init",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_init",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableTexture",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableTexture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableTexture",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableTexture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureGenMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_GEN_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureGenMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureGenMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureGenMode",2,"Neo::TEX_GEN_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureGenMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::TEX_GEN_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureGenMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureFilterMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_FILTER_MODES arg2 ;
  Neo::TEX_FILTER_MODES arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureFilterMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureFilterMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureFilterMode",2,"Neo::TEX_FILTER_MODES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setTextureFilterMode",3,"Neo::TEX_FILTER_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureFilterMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::TEX_FILTER_MODES)(int)lua_tonumber(L, 2);
  arg3 = (Neo::TEX_FILTER_MODES)(int)lua_tonumber(L, 3);
  (arg1)->setTextureFilterMode(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureUWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureUWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureUWrapMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureUWrapMode",2,"Neo::WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureUWrapMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::WRAP_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureUWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureVWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureVWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureVWrapMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureVWrapMode",2,"Neo::WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureVWrapMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::WRAP_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureVWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTextureCombineMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::TEX_COMBINE_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTextureCombineMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTextureCombineMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTextureCombineMode",2,"Neo::TEX_COMBINE_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTextureCombineMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::TEX_COMBINE_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setTextureCombineMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",3,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int const)lua_tonumber(L, 3);
  (arg1)->bindTexture(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindTexture",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindTexture(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RenderingContext_bindTexture__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderingContext_bindTexture__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_bindTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::bindTexture(unsigned int,unsigned int const)\n"
    "    Neo::RenderingContext::bindTexture(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_createTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createTexture",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createTexture",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createTexture",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteTexture",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteTexture",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteTexture",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendTextureImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Image *arg2 = (Neo::Image *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendTextureImage",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",2,"Neo::Image *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendTextureImage",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendTextureImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("RenderingContext_sendTextureImage",2,SWIGTYPE_p_Neo__Image);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->sendTextureImage(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_texImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::VAR_TYPES arg5 ;
  Neo::TEX_MODES arg6 ;
  void *arg7 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::texImage",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::texImage",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::texImage",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::texImage",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::texImage",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::texImage",5,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::RenderingContext::texImage",6,"Neo::TEX_MODES");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Neo::RenderingContext::texImage",7,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_texImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 5);
  arg6 = (Neo::TEX_MODES)(int)lua_tonumber(L, 6);
  arg7=(void *)SWIG_MustGetPtr(L,7,0,0,7,"RenderingContext_texImage");
  (arg1)->texImage(arg2,arg3,arg4,arg5,arg6,(void const *)arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_texSubImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  Neo::TEX_MODES arg8 ;
  void *arg9 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::texSubImage",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",6,"unsigned int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",7,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",8,"Neo::TEX_MODES");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("Neo::RenderingContext::texSubImage",9,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_texSubImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  arg7 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 7);
  arg8 = (Neo::TEX_MODES)(int)lua_tonumber(L, 8);
  arg9=(void *)SWIG_MustGetPtr(L,9,0,0,9,"RenderingContext_texSubImage");
  (arg1)->texSubImage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_generateMipMap(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::generateMipMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::generateMipMap",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_generateMipMap",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->generateMipMap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getTexImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Image *arg3 = (Neo::Image *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getTexImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getTexImage",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getTexImage",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getTexImage",3,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getTexImage",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("RenderingContext_getTexImage",3,SWIGTYPE_p_Neo__Image);
  }
  
  (arg1)->getTexImage(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createFrameBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createFrameBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createFrameBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteFrameBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteFrameBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteFrameBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindFrameBuffer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindFrameBuffer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getCurrentFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getCurrentFrameBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getCurrentFrameBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getCurrentFrameBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getCurrentFrameBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_getCurrentFrameBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->getCurrentFrameBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_attachFrameBufferTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::attachFrameBufferTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferTexture",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferTexture",2,"Neo::FRAME_BUFFER_ATTACHMENT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferTexture",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_attachFrameBufferTexture",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::FRAME_BUFFER_ATTACHMENT)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->attachFrameBufferTexture(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_attachFrameBufferRB(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::attachFrameBufferRB",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferRB",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferRB",2,"Neo::FRAME_BUFFER_ATTACHMENT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::attachFrameBufferRB",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_attachFrameBufferRB",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::FRAME_BUFFER_ATTACHMENT)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->attachFrameBufferRB(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setDrawingBuffers(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::FRAME_BUFFER_ATTACHMENT *arg2 = (Neo::FRAME_BUFFER_ATTACHMENT *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setDrawingBuffers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setDrawingBuffers",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::setDrawingBuffers",2,"Neo::FRAME_BUFFER_ATTACHMENT *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setDrawingBuffers",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setDrawingBuffers",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FRAME_BUFFER_ATTACHMENT,0))){
    SWIG_fail_ptr("RenderingContext_setDrawingBuffers",2,SWIGTYPE_p_Neo__FRAME_BUFFER_ATTACHMENT);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setDrawingBuffers(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createRenderBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createRenderBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createRenderBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createRenderBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createRenderBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteRenderBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteRenderBuffer",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteRenderBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteRenderBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteRenderBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindRenderBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindRenderBuffer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindRenderBuffer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindRenderBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::RENDER_BUFFER_MODES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setRenderBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",2,"Neo::RENDER_BUFFER_MODES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setRenderBuffer",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setRenderBuffer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::RENDER_BUFFER_MODES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->setRenderBuffer(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createVertexShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createVertexShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createVertexShader",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createVertexShader",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createVertexShader",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createVertexShader",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createVertexShader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createPixelShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createPixelShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createPixelShader",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createPixelShader",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createPixelShader",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createPixelShader",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createPixelShader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteShader",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteShader",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteShader",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteShader",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteShader(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendShaderSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::RenderingContext::sendShaderSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendShaderSource",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendShaderSource",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendShaderSource",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendShaderSource",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->sendShaderSource(arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindFX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindFX",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindFX",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindFX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createFX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createFX",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createFX",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::createFX",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::createFX",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createFX",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->createFX(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_updateFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::updateFX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::updateFX",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::updateFX",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_updateFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->updateFX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteFX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteFX",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteFX",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteFX",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteFX",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteFX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformInt",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",4,"int *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",4,SWIGTYPE_p_int);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformInt",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformInt",4,SWIGTYPE_p_int);
  }
  
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformInt(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformInt__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformInt__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformInt(unsigned int,char const *,int *,int const)\n"
    "    Neo::RenderingContext::sendUniformInt(unsigned int,char const *,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformFloat",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformFloat",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformFloat",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformFloat",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformFloat(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformFloat__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformFloat__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformFloat(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformFloat(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformVec2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec2",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec2",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec2(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformVec2__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformVec2__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformVec2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformVec2(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformVec2(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformVec3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec3",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec3",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec3",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec3(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformVec3__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformVec3__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformVec3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformVec3(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformVec3(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformVec4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec4",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformVec4",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformVec4",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformVec4",4,SWIGTYPE_p_float);
  }
  
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformVec4(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformVec4__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformVec4__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformVec4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformVec4(unsigned int,char const *,float *,int const)\n"
    "    Neo::RenderingContext::sendUniformVec4(unsigned int,char const *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_sendUniformMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  int arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformMatrix",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",4,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",5,"int const");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",6,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",4,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",4,"Neo::Matrix4x4 *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",5,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",4,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  arg5 = (int const)lua_tonumber(L, 5);
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::Matrix4x4 *arg4 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::sendUniformMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::sendUniformMatrix",4,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_sendUniformMatrix",4,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_sendUniformMatrix(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_RenderingContext_sendUniformMatrix__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RenderingContext_sendUniformMatrix__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Neo__Matrix4x4, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_RenderingContext_sendUniformMatrix__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_sendUniformMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::sendUniformMatrix(unsigned int,char const *,Neo::Matrix4x4 *,int const,bool const)\n"
    "    Neo::RenderingContext::sendUniformMatrix(unsigned int,char const *,Neo::Matrix4x4 *,int const)\n"
    "    Neo::RenderingContext::sendUniformMatrix(unsigned int,char const *,Neo::Matrix4x4 *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_getAttribLocation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getAttribLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",2,"unsigned int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::getAttribLocation",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getAttribLocation",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_getAttribLocation",4,SWIGTYPE_p_int);
  }
  
  (arg1)->getAttribLocation(arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createVBO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createVBO",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createVBO",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createVBO",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createVBO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteVBO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteVBO",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteVBO",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteVBO",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteVBO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindVBO",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindVBO",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindVBO",2,"Neo::VBO_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::bindVBO",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VBO_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->bindVBO(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  Neo::VBO_MODES arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setVBO",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setVBO",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setVBO",2,"Neo::VBO_TYPES");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::setVBO",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setVBO",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setVBO",5,"Neo::VBO_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setVBO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VBO_TYPES)(int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RenderingContext_setVBO");
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Neo::VBO_MODES)(int)lua_tonumber(L, 5);
  (arg1)->setVBO(arg2,(void const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setVBOSubData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VBO_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setVBOSubData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",2,"Neo::VBO_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",4,"void const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setVBOSubData",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setVBOSubData",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VBO_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setVBOSubData");
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->setVBOSubData(arg2,arg3,(void const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableVertexArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableVertexArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableVertexArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableVertexArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableVertexArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableColorArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableColorArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableColorArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableColorArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableColorArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableNormalArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableNormalArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableNormalArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableNormalArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableNormalArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableTexCoordArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableTexCoordArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableTexCoordArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableTexCoordArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableTexCoordArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableAttribArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableAttribArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableAttribArray",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::enableAttribArray",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableAttribArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableAttribArray(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableVertexArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableVertexArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableVertexArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableVertexArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableVertexArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableColorArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableColorArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableColorArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableColorArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableColorArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableNormalArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableNormalArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableNormalArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableNormalArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableNormalArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableTexCoordArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableTexCoordArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableTexCoordArray",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableTexCoordArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableTexCoordArray();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableAttribArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableAttribArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableAttribArray",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::disableAttribArray",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableAttribArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableAttribArray(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setVertexPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setVertexPointer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setVertexPointer",4,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setVertexPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setVertexPointer");
  (arg1)->setVertexPointer(arg2,arg3,(void const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColorPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColorPointer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setColorPointer",4,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColorPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setColorPointer");
  (arg1)->setColorPointer(arg2,arg3,(void const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setNormalPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setNormalPointer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setNormalPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setNormalPointer",2,"Neo::VAR_TYPES");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::setNormalPointer",3,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setNormalPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"RenderingContext_setNormalPointer");
  (arg1)->setNormalPointer(arg2,(void const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setTexCoordPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setTexCoordPointer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::setTexCoordPointer",4,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setTexCoordPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"RenderingContext_setTexCoordPointer");
  (arg1)->setTexCoordPointer(arg2,arg3,(void const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAttribPointer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  bool arg6 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setAttribPointer",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",3,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",5,"void const *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",6,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setAttribPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"RenderingContext_setAttribPointer");
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAttribPointer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setAttribPointer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",3,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::setAttribPointer",5,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setAttribPointer",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"RenderingContext_setAttribPointer");
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAttribPointer(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_RenderingContext_setAttribPointer__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_RenderingContext_setAttribPointer__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_setAttribPointer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::setAttribPointer(unsigned int,Neo::VAR_TYPES,unsigned int,void const *,bool const)\n"
    "    Neo::RenderingContext::setAttribPointer(unsigned int,Neo::VAR_TYPES,unsigned int,void const *)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_drawArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::RenderingContext::drawArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::drawArray",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::drawArray",2,"Neo::PRIMITIVE_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::drawArray",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::drawArray",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_drawArray",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::PRIMITIVE_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->drawArray(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_drawElement(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  Neo::VAR_TYPES arg4 ;
  void *arg5 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::drawElement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::drawElement",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::drawElement",2,"Neo::PRIMITIVE_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::drawElement",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::drawElement",4,"Neo::VAR_TYPES");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::drawElement",5,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_drawElement",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::PRIMITIVE_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"RenderingContext_drawElement");
  (arg1)->drawElement(arg2,arg3,arg4,(void const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableLineAntialiasing(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableLineAntialiasing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableLineAntialiasing",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableLineAntialiasing",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableLineAntialiasing();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableLineAntialiasing(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableLineAntialiasing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableLineAntialiasing",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableLineAntialiasing",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableLineAntialiasing();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialDiffuse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialDiffuse",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialDiffuse",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialDiffuse",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialDiffuse",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialDiffuse((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialSpecular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialSpecular",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialSpecular",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialSpecular",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialSpecular",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialSpecular((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialAmbient(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialAmbient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialAmbient",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialAmbient",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialAmbient",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialAmbient",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialAmbient((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialEmit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialEmit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialEmit",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialEmit",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialEmit",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialEmit",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setMaterialEmit((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMaterialShininess(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMaterialShininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMaterialShininess",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMaterialShininess",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMaterialShininess",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMaterialShininess(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableScissorTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableScissorTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableScissorTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableScissorTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableScissorTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableScissorTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableScissorTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableScissorTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableScissorTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableScissorTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setScissor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setScissor",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setScissor",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setScissor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setScissor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setScissor",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setScissor",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setScissor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->setScissor(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Color *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColor",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColor",2,"Neo::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Color,0))){
    SWIG_fail_ptr("RenderingContext_setColor",2,SWIGTYPE_p_Neo__Color);
  }
  
  (arg1)->setColor((Neo::Color const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColor3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColor3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColor3",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColor3",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColor3",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_setColor3",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setColor3((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColor4(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColor4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColor4",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColor4",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColor4",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setColor4",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setColor4((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setColorMask(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setColorMask",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",1,"Neo::RenderingContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Neo::RenderingContext::setColorMask",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setColorMask",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setColorMask(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setDepthMask(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setDepthMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setDepthMask",1,"Neo::RenderingContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::RenderingContext::setDepthMask",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setDepthMask",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDepthMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setAlphaTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setAlphaTest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setAlphaTest",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setAlphaTest",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setAlphaTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAlphaTest(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableDepthTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableDepthTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableDepthTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableDepthTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableDepthTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableDepthTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableDepthTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableDepthTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableDepthTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableDepthTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setDepthMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::DEPTH_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setDepthMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setDepthMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setDepthMode",2,"Neo::DEPTH_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setDepthMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::DEPTH_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setDepthMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enablePolygonOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enablePolygonOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enablePolygonOffset",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::enablePolygonOffset",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::enablePolygonOffset",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enablePolygonOffset",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->enablePolygonOffset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disablePolygonOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disablePolygonOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disablePolygonOffset",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disablePolygonOffset",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disablePolygonOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableStencilTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableStencilTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableStencilTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableStencilTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableStencilTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableStencilTest(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableStencilTest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableStencilTest",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableStencilTest",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableStencilTest();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setStencilFunc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_FUNCS arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setStencilFunc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",2,"Neo::STENCIL_FUNCS");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setStencilFunc",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::STENCIL_FUNCS)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setStencilFunc(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setStencilFunc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_FUNCS arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setStencilFunc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setStencilFunc",2,"Neo::STENCIL_FUNCS");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setStencilFunc",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::STENCIL_FUNCS)(int)lua_tonumber(L, 2);
  (arg1)->setStencilFunc(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setStencilFunc(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RenderingContext_setStencilFunc__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__RenderingContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderingContext_setStencilFunc__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderingContext_setStencilFunc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::RenderingContext::setStencilFunc(Neo::STENCIL_FUNCS,int)\n"
    "    Neo::RenderingContext::setStencilFunc(Neo::STENCIL_FUNCS)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingContext_setStencilOp(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::STENCIL_OPS arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setStencilOp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setStencilOp",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setStencilOp",2,"Neo::STENCIL_OPS");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setStencilOp",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::STENCIL_OPS)(int)lua_tonumber(L, 2);
  (arg1)->setStencilOp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableCullFace(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableCullFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableCullFace",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableCullFace",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableCullFace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableCullFace(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableCullFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableCullFace",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableCullFace",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableCullFace();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setCullMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::CULL_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setCullMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setCullMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setCullMode",2,"Neo::CULL_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setCullMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::CULL_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setCullMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createQuery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createQuery",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createQuery",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createQuery",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createQuery(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteQuery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteQuery",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteQuery",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteQuery",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteQuery(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_beginQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::beginQuery",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::beginQuery",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::beginQuery",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_beginQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->beginQuery(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_endQuery(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::endQuery",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::endQuery",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_endQuery",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->endQuery();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getQueryResult(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getQueryResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getQueryResult",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getQueryResult",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getQueryResult",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getQueryResult",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_getQueryResult",3,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->getQueryResult(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_loadIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::loadIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::loadIdentity",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_loadIdentity",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->loadIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setMatrixMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::MATRIX_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setMatrixMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setMatrixMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setMatrixMode",2,"Neo::MATRIX_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setMatrixMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::MATRIX_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setMatrixMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_pushMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::pushMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::pushMatrix",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_pushMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->pushMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_popMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::popMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::popMatrix",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_popMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->popMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_multMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::multMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::multMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::multMatrix",2,"Neo::Matrix4x4 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_multMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_multMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->multMatrix((Neo::Matrix4x4 const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_translate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::translate",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::translate",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_translate",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_translate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->translate((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::rotate",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::rotate",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::rotate",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_rotate",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_rotate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_scale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::scale",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::scale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_scale",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_scale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->scale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getViewport(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getViewport",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getViewport",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getViewport",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("RenderingContext_getViewport",2,SWIGTYPE_p_int);
  }
  
  (arg1)->getViewport(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getModelViewMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getModelViewMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getModelViewMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getModelViewMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getModelViewMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_getModelViewMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->getModelViewMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getProjectionMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getProjectionMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getProjectionMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getProjectionMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getProjectionMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_getProjectionMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->getProjectionMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getTextureMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getTextureMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getTextureMatrix",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getTextureMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getTextureMatrix",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("RenderingContext_getTextureMatrix",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  (arg1)->getTextureMatrix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableFog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableFog",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableFog",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableFog();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableFog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableFog",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableFog",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableFog();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setFogColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setFogColor",1,"Neo::RenderingContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::RenderingContext::setFogColor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setFogColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_setFogColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setFogColor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setFogDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setFogDistance",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setFogDistance",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setFogDistance",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setFogDistance",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setFogDistance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getFogColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getFogColor",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getFogColor",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getFogColor",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_getFogColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getFogColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getFogDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getFogDistance",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::getFogDistance",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getFogDistance",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getFogDistance",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getFogDistance",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getFogDistance",3,SWIGTYPE_p_float);
  }
  
  (arg1)->getFogDistance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableLighting(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableLighting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableLighting",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableLighting",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableLighting();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableLighting(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableLighting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableLighting",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableLighting",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableLighting();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableLight",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::enableLight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableLight",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableLight",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::disableLight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableLight",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightPosition",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightPosition",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightPosition",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightPosition",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightPosition",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightPosition(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightDiffuse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightDiffuse",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightDiffuse",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightDiffuse",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightDiffuse",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightDiffuse",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightDiffuse(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpecular",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpecular",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpecular",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpecular",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpecular",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpecular",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightSpecular(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightAmbient(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightAmbient",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightAmbient",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightAmbient",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightAmbient",3,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightAmbient",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_setLightAmbient",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setLightAmbient(arg2,(Neo::Vector4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightAttenuation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightAttenuation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::RenderingContext::setLightAttenuation",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightAttenuation",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setLightAttenuation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpotDirection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpotDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotDirection",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotDirection",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotDirection",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotDirection",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotDirection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setLightSpotDirection(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpotAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotAngle",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotAngle",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotAngle",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotAngle",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setLightSpotAngle(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setLightSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setLightSpotExponent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotExponent",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotExponent",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::setLightSpotExponent",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setLightSpotExponent",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setLightSpotExponent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightPosition",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightPosition",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightPosition",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightPosition",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightPosition",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightPosition(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightDiffuse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightDiffuse",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightDiffuse",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightDiffuse",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightDiffuse",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightDiffuse",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightDiffuse(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpecular",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpecular",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpecular",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpecular",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpecular",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpecular",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightSpecular(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightAmbient(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector4 *arg3 = (Neo::Vector4 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightAmbient",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightAmbient",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightAmbient",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightAmbient",3,"Neo::Vector4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightAmbient",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("RenderingContext_getLightAmbient",3,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->getLightAmbient(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightAttenuation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightAttenuation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::RenderingContext::getLightAttenuation",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightAttenuation",5,SWIGTYPE_p_float);
  }
  
  (arg1)->getLightAttenuation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpotDirection(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpotDirection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotDirection",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotDirection",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotDirection",3,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotDirection",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotDirection",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getLightSpotDirection(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpotAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotAngle",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotAngle",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotAngle",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotAngle",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotAngle",3,SWIGTYPE_p_float);
  }
  
  (arg1)->getLightSpotAngle(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_getLightSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::getLightSpotExponent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotExponent",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotExponent",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RenderingContext::getLightSpotExponent",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotExponent",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RenderingContext_getLightSpotExponent",3,SWIGTYPE_p_float);
  }
  
  (arg1)->getLightSpotExponent(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_enableBlending(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::enableBlending",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::enableBlending",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_enableBlending",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->enableBlending();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_disableBlending(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::disableBlending",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::disableBlending",1,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_disableBlending",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->disableBlending();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setBlendingMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::BLENDING_MODES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setBlendingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setBlendingMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setBlendingMode",2,"Neo::BLENDING_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setBlendingMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::BLENDING_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setBlendingMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_createVAO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::createVAO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::createVAO",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::createVAO",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_createVAO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_createVAO",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createVAO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_deleteVAO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::deleteVAO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::deleteVAO",1,"Neo::RenderingContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RenderingContext::deleteVAO",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_deleteVAO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("RenderingContext_deleteVAO",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteVAO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_bindVAO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::bindVAO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::bindVAO",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::bindVAO",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_bindVAO",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->bindVAO(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_selectSubroutine(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::RenderingContext::selectSubroutine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::selectSubroutine",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::selectSubroutine",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::RenderingContext::selectSubroutine",3,"unsigned int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Neo::RenderingContext::selectSubroutine",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_selectSubroutine",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->selectSubroutine(arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setPolygonMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setPolygonMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setPolygonMode",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setPolygonMode",2,"Neo::PRIMITIVE_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setPolygonMode",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (Neo::PRIMITIVE_TYPES)(int)lua_tonumber(L, 2);
  (arg1)->setPolygonMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderingContext_setPointSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RenderingContext *arg1 = (Neo::RenderingContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::RenderingContext::setPointSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RenderingContext::setPointSize",1,"Neo::RenderingContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RenderingContext::setPointSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("RenderingContext_setPointSize",1,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPointSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderingContext(void *obj) {
Neo::RenderingContext *arg1 = (Neo::RenderingContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_RenderingContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RenderingContext_methods[]= {
    { "getRendererVersion", _wrap_RenderingContext_getRendererVersion},
    { "setOrthoView", _wrap_RenderingContext_setOrthoView},
    { "setPerspectiveView", _wrap_RenderingContext_setPerspectiveView},
    { "setViewport", _wrap_RenderingContext_setViewport},
    { "clear", _wrap_RenderingContext_clear},
    { "setClearColor", _wrap_RenderingContext_setClearColor},
    { "init", _wrap_RenderingContext_init},
    { "enableTexture", _wrap_RenderingContext_enableTexture},
    { "disableTexture", _wrap_RenderingContext_disableTexture},
    { "setTextureGenMode", _wrap_RenderingContext_setTextureGenMode},
    { "setTextureFilterMode", _wrap_RenderingContext_setTextureFilterMode},
    { "setTextureUWrapMode", _wrap_RenderingContext_setTextureUWrapMode},
    { "setTextureVWrapMode", _wrap_RenderingContext_setTextureVWrapMode},
    { "setTextureCombineMode", _wrap_RenderingContext_setTextureCombineMode},
    { "bindTexture", _wrap_RenderingContext_bindTexture},
    { "createTexture", _wrap_RenderingContext_createTexture},
    { "deleteTexture", _wrap_RenderingContext_deleteTexture},
    { "sendTextureImage", _wrap_RenderingContext_sendTextureImage},
    { "texImage", _wrap_RenderingContext_texImage},
    { "texSubImage", _wrap_RenderingContext_texSubImage},
    { "generateMipMap", _wrap_RenderingContext_generateMipMap},
    { "getTexImage", _wrap_RenderingContext_getTexImage},
    { "createFrameBuffer", _wrap_RenderingContext_createFrameBuffer},
    { "deleteFrameBuffer", _wrap_RenderingContext_deleteFrameBuffer},
    { "bindFrameBuffer", _wrap_RenderingContext_bindFrameBuffer},
    { "getCurrentFrameBuffer", _wrap_RenderingContext_getCurrentFrameBuffer},
    { "attachFrameBufferTexture", _wrap_RenderingContext_attachFrameBufferTexture},
    { "attachFrameBufferRB", _wrap_RenderingContext_attachFrameBufferRB},
    { "setDrawingBuffers", _wrap_RenderingContext_setDrawingBuffers},
    { "createRenderBuffer", _wrap_RenderingContext_createRenderBuffer},
    { "deleteRenderBuffer", _wrap_RenderingContext_deleteRenderBuffer},
    { "bindRenderBuffer", _wrap_RenderingContext_bindRenderBuffer},
    { "setRenderBuffer", _wrap_RenderingContext_setRenderBuffer},
    { "createVertexShader", _wrap_RenderingContext_createVertexShader},
    { "createPixelShader", _wrap_RenderingContext_createPixelShader},
    { "deleteShader", _wrap_RenderingContext_deleteShader},
    { "sendShaderSource", _wrap_RenderingContext_sendShaderSource},
    { "bindFX", _wrap_RenderingContext_bindFX},
    { "createFX", _wrap_RenderingContext_createFX},
    { "updateFX", _wrap_RenderingContext_updateFX},
    { "deleteFX", _wrap_RenderingContext_deleteFX},
    { "sendUniformInt", _wrap_RenderingContext_sendUniformInt},
    { "sendUniformFloat", _wrap_RenderingContext_sendUniformFloat},
    { "sendUniformVec2", _wrap_RenderingContext_sendUniformVec2},
    { "sendUniformVec3", _wrap_RenderingContext_sendUniformVec3},
    { "sendUniformVec4", _wrap_RenderingContext_sendUniformVec4},
    { "sendUniformMatrix", _wrap_RenderingContext_sendUniformMatrix},
    { "getAttribLocation", _wrap_RenderingContext_getAttribLocation},
    { "createVBO", _wrap_RenderingContext_createVBO},
    { "deleteVBO", _wrap_RenderingContext_deleteVBO},
    { "bindVBO", _wrap_RenderingContext_bindVBO},
    { "setVBO", _wrap_RenderingContext_setVBO},
    { "setVBOSubData", _wrap_RenderingContext_setVBOSubData},
    { "enableVertexArray", _wrap_RenderingContext_enableVertexArray},
    { "enableColorArray", _wrap_RenderingContext_enableColorArray},
    { "enableNormalArray", _wrap_RenderingContext_enableNormalArray},
    { "enableTexCoordArray", _wrap_RenderingContext_enableTexCoordArray},
    { "enableAttribArray", _wrap_RenderingContext_enableAttribArray},
    { "disableVertexArray", _wrap_RenderingContext_disableVertexArray},
    { "disableColorArray", _wrap_RenderingContext_disableColorArray},
    { "disableNormalArray", _wrap_RenderingContext_disableNormalArray},
    { "disableTexCoordArray", _wrap_RenderingContext_disableTexCoordArray},
    { "disableAttribArray", _wrap_RenderingContext_disableAttribArray},
    { "setVertexPointer", _wrap_RenderingContext_setVertexPointer},
    { "setColorPointer", _wrap_RenderingContext_setColorPointer},
    { "setNormalPointer", _wrap_RenderingContext_setNormalPointer},
    { "setTexCoordPointer", _wrap_RenderingContext_setTexCoordPointer},
    { "setAttribPointer", _wrap_RenderingContext_setAttribPointer},
    { "drawArray", _wrap_RenderingContext_drawArray},
    { "drawElement", _wrap_RenderingContext_drawElement},
    { "enableLineAntialiasing", _wrap_RenderingContext_enableLineAntialiasing},
    { "disableLineAntialiasing", _wrap_RenderingContext_disableLineAntialiasing},
    { "setMaterialDiffuse", _wrap_RenderingContext_setMaterialDiffuse},
    { "setMaterialSpecular", _wrap_RenderingContext_setMaterialSpecular},
    { "setMaterialAmbient", _wrap_RenderingContext_setMaterialAmbient},
    { "setMaterialEmit", _wrap_RenderingContext_setMaterialEmit},
    { "setMaterialShininess", _wrap_RenderingContext_setMaterialShininess},
    { "enableScissorTest", _wrap_RenderingContext_enableScissorTest},
    { "disableScissorTest", _wrap_RenderingContext_disableScissorTest},
    { "setScissor", _wrap_RenderingContext_setScissor},
    { "setColor", _wrap_RenderingContext_setColor},
    { "setColor3", _wrap_RenderingContext_setColor3},
    { "setColor4", _wrap_RenderingContext_setColor4},
    { "setColorMask", _wrap_RenderingContext_setColorMask},
    { "setDepthMask", _wrap_RenderingContext_setDepthMask},
    { "setAlphaTest", _wrap_RenderingContext_setAlphaTest},
    { "enableDepthTest", _wrap_RenderingContext_enableDepthTest},
    { "disableDepthTest", _wrap_RenderingContext_disableDepthTest},
    { "setDepthMode", _wrap_RenderingContext_setDepthMode},
    { "enablePolygonOffset", _wrap_RenderingContext_enablePolygonOffset},
    { "disablePolygonOffset", _wrap_RenderingContext_disablePolygonOffset},
    { "enableStencilTest", _wrap_RenderingContext_enableStencilTest},
    { "disableStencilTest", _wrap_RenderingContext_disableStencilTest},
    { "setStencilFunc", _wrap_RenderingContext_setStencilFunc},
    { "setStencilOp", _wrap_RenderingContext_setStencilOp},
    { "enableCullFace", _wrap_RenderingContext_enableCullFace},
    { "disableCullFace", _wrap_RenderingContext_disableCullFace},
    { "setCullMode", _wrap_RenderingContext_setCullMode},
    { "createQuery", _wrap_RenderingContext_createQuery},
    { "deleteQuery", _wrap_RenderingContext_deleteQuery},
    { "beginQuery", _wrap_RenderingContext_beginQuery},
    { "endQuery", _wrap_RenderingContext_endQuery},
    { "getQueryResult", _wrap_RenderingContext_getQueryResult},
    { "loadIdentity", _wrap_RenderingContext_loadIdentity},
    { "setMatrixMode", _wrap_RenderingContext_setMatrixMode},
    { "pushMatrix", _wrap_RenderingContext_pushMatrix},
    { "popMatrix", _wrap_RenderingContext_popMatrix},
    { "multMatrix", _wrap_RenderingContext_multMatrix},
    { "translate", _wrap_RenderingContext_translate},
    { "rotate", _wrap_RenderingContext_rotate},
    { "scale", _wrap_RenderingContext_scale},
    { "getViewport", _wrap_RenderingContext_getViewport},
    { "getModelViewMatrix", _wrap_RenderingContext_getModelViewMatrix},
    { "getProjectionMatrix", _wrap_RenderingContext_getProjectionMatrix},
    { "getTextureMatrix", _wrap_RenderingContext_getTextureMatrix},
    { "enableFog", _wrap_RenderingContext_enableFog},
    { "disableFog", _wrap_RenderingContext_disableFog},
    { "setFogColor", _wrap_RenderingContext_setFogColor},
    { "setFogDistance", _wrap_RenderingContext_setFogDistance},
    { "getFogColor", _wrap_RenderingContext_getFogColor},
    { "getFogDistance", _wrap_RenderingContext_getFogDistance},
    { "enableLighting", _wrap_RenderingContext_enableLighting},
    { "disableLighting", _wrap_RenderingContext_disableLighting},
    { "enableLight", _wrap_RenderingContext_enableLight},
    { "disableLight", _wrap_RenderingContext_disableLight},
    { "setLightPosition", _wrap_RenderingContext_setLightPosition},
    { "setLightDiffuse", _wrap_RenderingContext_setLightDiffuse},
    { "setLightSpecular", _wrap_RenderingContext_setLightSpecular},
    { "setLightAmbient", _wrap_RenderingContext_setLightAmbient},
    { "setLightAttenuation", _wrap_RenderingContext_setLightAttenuation},
    { "setLightSpotDirection", _wrap_RenderingContext_setLightSpotDirection},
    { "setLightSpotAngle", _wrap_RenderingContext_setLightSpotAngle},
    { "setLightSpotExponent", _wrap_RenderingContext_setLightSpotExponent},
    { "getLightPosition", _wrap_RenderingContext_getLightPosition},
    { "getLightDiffuse", _wrap_RenderingContext_getLightDiffuse},
    { "getLightSpecular", _wrap_RenderingContext_getLightSpecular},
    { "getLightAmbient", _wrap_RenderingContext_getLightAmbient},
    { "getLightAttenuation", _wrap_RenderingContext_getLightAttenuation},
    { "getLightSpotDirection", _wrap_RenderingContext_getLightSpotDirection},
    { "getLightSpotAngle", _wrap_RenderingContext_getLightSpotAngle},
    { "getLightSpotExponent", _wrap_RenderingContext_getLightSpotExponent},
    { "enableBlending", _wrap_RenderingContext_enableBlending},
    { "disableBlending", _wrap_RenderingContext_disableBlending},
    { "setBlendingMode", _wrap_RenderingContext_setBlendingMode},
    { "createVAO", _wrap_RenderingContext_createVAO},
    { "deleteVAO", _wrap_RenderingContext_deleteVAO},
    { "bindVAO", _wrap_RenderingContext_bindVAO},
    { "selectSubroutine", _wrap_RenderingContext_selectSubroutine},
    { "setPolygonMode", _wrap_RenderingContext_setPolygonMode},
    { "setPointSize", _wrap_RenderingContext_setPointSize},
    {0,0}
};
static swig_lua_method swig_RenderingContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderingContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderingContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderingContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RenderingContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderingContext_Sf_SwigStatic = {
    "RenderingContext",
    swig_RenderingContext_Sf_SwigStatic_methods,
    swig_RenderingContext_Sf_SwigStatic_attributes,
    swig_RenderingContext_Sf_SwigStatic_constants,
    swig_RenderingContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderingContext_bases[] = {0};
static const char *swig_RenderingContext_base_names[] = {0};
static swig_lua_class _wrap_class_RenderingContext = { "RenderingContext", "RenderingContext", &SWIGTYPE_p_Neo__RenderingContext,0, swig_delete_RenderingContext, swig_RenderingContext_methods, swig_RenderingContext_attributes, &swig_RenderingContext_Sf_SwigStatic, swig_RenderingContext_meta, swig_RenderingContext_bases, swig_RenderingContext_base_names };

static int _wrap_SoundContext_initContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::initContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::initContext",1,"Neo::SoundContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_initContext",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  (arg1)->initContext();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_createBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::createBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::createBuffer",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::createBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_createBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_createBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_deleteBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::deleteBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::deleteBuffer",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::deleteBuffer",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_deleteBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_deleteBuffer",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_sendBufferSound(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::Sound *arg3 = (Neo::Sound *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::sendBufferSound",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::sendBufferSound",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::sendBufferSound",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SoundContext::sendBufferSound",3,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_sendBufferSound",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("SoundContext_sendBufferSound",3,SWIGTYPE_p_Neo__Sound);
  }
  
  (arg1)->sendBufferSound(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_sendBufferData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::SOUND_FORMAT arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Neo::SoundContext::sendBufferData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",3,"Neo::SOUND_FORMAT");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::SoundContext::sendBufferData",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_sendBufferData",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (Neo::SOUND_FORMAT)(int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"SoundContext_sendBufferData");
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  (arg1)->sendBufferData(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getBufferDuration(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::SoundContext::getBufferDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getBufferDuration",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getBufferDuration",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getBufferDuration",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getBufferDuration(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_createSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::createSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::createSource",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::createSource",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::createSource",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_createSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_createSource",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->createSource(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_deleteSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::deleteSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::deleteSource",1,"Neo::SoundContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::SoundContext::deleteSource",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_deleteSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_deleteSource",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_enableSourceLoop(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::enableSourceLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::enableSourceLoop",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::enableSourceLoop",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_enableSourceLoop",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableSourceLoop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_disableSourceLoop(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::disableSourceLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::disableSourceLoop",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::disableSourceLoop",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_disableSourceLoop",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableSourceLoop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceRelative(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceRelative",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceRelative",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceRelative",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceRelative",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceRelative",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setSourceRelative(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceBufferId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceBufferId",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceBufferId",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceBufferId",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceBufferId",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceBufferId",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setSourceBufferId(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourcePosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourcePosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourcePosition",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourcePosition",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourcePosition",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourcePosition",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_setSourcePosition",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setSourcePosition(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceRadius",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceRadius",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceRadius",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceRadius",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceRadius",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceRadius(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourcePitch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourcePitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourcePitch",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourcePitch",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourcePitch",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourcePitch",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourcePitch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceGain(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceGain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceGain",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceGain",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceGain",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceGain",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceGain(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceRolloff(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceRolloff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceRolloff",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceRolloff",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceRolloff",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceRolloff",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceRolloff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_setSourceOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::SoundContext::setSourceOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::setSourceOffset",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::setSourceOffset",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SoundContext::setSourceOffset",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_setSourceOffset",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setSourceOffset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceOffset",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceOffset",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceOffset",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getSourceOffset(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_playSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::playSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::playSource",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::playSource",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_playSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->playSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_pauseSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::pauseSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::pauseSource",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::pauseSource",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_pauseSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->pauseSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_stopSource(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundContext::stopSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::stopSource",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::stopSource",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_stopSource",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->stopSource(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_isSourcePaused(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::SoundContext::isSourcePaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::isSourcePaused",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::isSourcePaused",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_isSourcePaused",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isSourcePaused(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_isSourcePlaying(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::SoundContext::isSourcePlaying",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::isSourcePlaying",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::isSourcePlaying",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_isSourcePlaying",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isSourcePlaying(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceTimePos(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceTimePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceTimePos",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceTimePos",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceTimePos",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getSourceTimePos(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_queueSourceBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::SoundContext::queueSourceBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",3,"unsigned int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::SoundContext::queueSourceBuffer",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_queueSourceBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_queueSourceBuffer",3,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->queueSourceBuffer(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_unqueueSourceBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::SoundContext::unqueueSourceBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",3,"unsigned int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::SoundContext::unqueueSourceBuffer",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_unqueueSourceBuffer",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("SoundContext_unqueueSourceBuffer",3,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->unqueueSourceBuffer(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceBuffersQueued(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceBuffersQueued",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersQueued",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersQueued",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceBuffersQueued",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getSourceBuffersQueued(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_getSourceBuffersProcessed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SoundContext::getSourceBuffersProcessed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersProcessed",1,"Neo::SoundContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundContext::getSourceBuffersProcessed",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_getSourceBuffersProcessed",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getSourceBuffersProcessed(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundContext_updateListenerPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundContext *arg1 = (Neo::SoundContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::SoundContext::updateListenerPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",1,"Neo::SoundContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::SoundContext::updateListenerPosition",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",1,SWIGTYPE_p_Neo__SoundContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("SoundContext_updateListenerPosition",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->updateListenerPosition((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundContext(void *obj) {
Neo::SoundContext *arg1 = (Neo::SoundContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_SoundContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoundContext_methods[]= {
    { "initContext", _wrap_SoundContext_initContext},
    { "createBuffer", _wrap_SoundContext_createBuffer},
    { "deleteBuffer", _wrap_SoundContext_deleteBuffer},
    { "sendBufferSound", _wrap_SoundContext_sendBufferSound},
    { "sendBufferData", _wrap_SoundContext_sendBufferData},
    { "getBufferDuration", _wrap_SoundContext_getBufferDuration},
    { "createSource", _wrap_SoundContext_createSource},
    { "deleteSource", _wrap_SoundContext_deleteSource},
    { "enableSourceLoop", _wrap_SoundContext_enableSourceLoop},
    { "disableSourceLoop", _wrap_SoundContext_disableSourceLoop},
    { "setSourceRelative", _wrap_SoundContext_setSourceRelative},
    { "setSourceBufferId", _wrap_SoundContext_setSourceBufferId},
    { "setSourcePosition", _wrap_SoundContext_setSourcePosition},
    { "setSourceRadius", _wrap_SoundContext_setSourceRadius},
    { "setSourcePitch", _wrap_SoundContext_setSourcePitch},
    { "setSourceGain", _wrap_SoundContext_setSourceGain},
    { "setSourceRolloff", _wrap_SoundContext_setSourceRolloff},
    { "setSourceOffset", _wrap_SoundContext_setSourceOffset},
    { "getSourceOffset", _wrap_SoundContext_getSourceOffset},
    { "playSource", _wrap_SoundContext_playSource},
    { "pauseSource", _wrap_SoundContext_pauseSource},
    { "stopSource", _wrap_SoundContext_stopSource},
    { "isSourcePaused", _wrap_SoundContext_isSourcePaused},
    { "isSourcePlaying", _wrap_SoundContext_isSourcePlaying},
    { "getSourceTimePos", _wrap_SoundContext_getSourceTimePos},
    { "queueSourceBuffer", _wrap_SoundContext_queueSourceBuffer},
    { "unqueueSourceBuffer", _wrap_SoundContext_unqueueSourceBuffer},
    { "getSourceBuffersQueued", _wrap_SoundContext_getSourceBuffersQueued},
    { "getSourceBuffersProcessed", _wrap_SoundContext_getSourceBuffersProcessed},
    { "updateListenerPosition", _wrap_SoundContext_updateListenerPosition},
    {0,0}
};
static swig_lua_method swig_SoundContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundContext_Sf_SwigStatic = {
    "SoundContext",
    swig_SoundContext_Sf_SwigStatic_methods,
    swig_SoundContext_Sf_SwigStatic_attributes,
    swig_SoundContext_Sf_SwigStatic_constants,
    swig_SoundContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundContext_bases[] = {0};
static const char *swig_SoundContext_base_names[] = {0};
static swig_lua_class _wrap_class_SoundContext = { "SoundContext", "SoundContext", &SWIGTYPE_p_Neo__SoundContext,0, swig_delete_SoundContext, swig_SoundContext_methods, swig_SoundContext_attributes, &swig_SoundContext_Sf_SwigStatic, swig_SoundContext_meta, swig_SoundContext_bases, swig_SoundContext_base_names };

static int _wrap_PhysicsContext_init(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::init",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::init",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::init",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_init",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_init",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_init",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->init((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::clear",1,"Neo::PhysicsContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_clear",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setSimulationQuality(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setSimulationQuality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setSimulationQuality",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setSimulationQuality",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setSimulationQuality",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setSimulationQuality(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_updateSimulation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::updateSimulation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::updateSimulation",1,"Neo::PhysicsContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_updateSimulation",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  (arg1)->updateSimulation();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setWorldGravity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setWorldGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setWorldGravity",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setWorldGravity",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setWorldGravity",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setWorldGravity",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setWorldGravity((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createGhost(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createGhost",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createGhost",5,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_createGhost",5,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->createGhost(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createRigidBody(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  float arg6 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createRigidBody",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",5,"Neo::Quaternion const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createRigidBody",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_createRigidBody",5,SWIGTYPE_p_Neo__Quaternion);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->createRigidBody(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_activateObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::activateObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::activateObject",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::activateObject",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_activateObject",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->activateObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_deactivateObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deactivateObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deactivateObject",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deactivateObject",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deactivateObject",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->deactivateObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_deleteObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deleteObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deleteObject",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deleteObject",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deleteObject",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_deleteObject",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_enableObjectKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::enableObjectKinematic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::enableObjectKinematic",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::enableObjectKinematic",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_enableObjectKinematic",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->enableObjectKinematic(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_disableObjectKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::disableObjectKinematic",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::disableObjectKinematic",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::disableObjectKinematic",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_disableObjectKinematic",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->disableObjectKinematic(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectShape",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectShape",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectShape",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setObjectShape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectMass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectMass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectMass",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectMass",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectMass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectMass",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectMass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectRestitution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectRestitution",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectRestitution",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectRestitution",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectRestitution",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectRestitution(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectFriction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectFriction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectFriction",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectFriction",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectFriction",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectFriction",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectFriction(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectLinearFactor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectLinearFactor",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectLinearFactor",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectLinearFactor",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectLinearFactor",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectLinearFactor",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setObjectLinearFactor(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectAngularFactor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectAngularFactor",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectAngularFactor",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectAngularFactor",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectAngularFactor",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setObjectAngularFactor(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectDamping",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setObjectDamping",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectDamping",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setObjectDamping(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectTransform(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Quaternion *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectTransform",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setObjectTransform",4,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectTransform",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectTransform",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectTransform",4,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->setObjectTransform(arg2,(Neo::Vector3 const &)*arg3,(Neo::Quaternion const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getObjectTransform(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  Neo::Quaternion *arg4 = (Neo::Quaternion *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getObjectTransform",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",3,"Neo::Vector3 *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::getObjectTransform",4,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectTransform",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectTransform",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectTransform",4,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->getObjectTransform(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setObjectUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *arg3 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setObjectUserPointer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setObjectUserPointer",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setObjectUserPointer",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setObjectUserPointer",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setObjectUserPointer",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"PhysicsContext_setObjectUserPointer");
  (arg1)->setObjectUserPointer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getObjectUserPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getObjectUserPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getObjectUserPointer",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getObjectUserPointer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getObjectUserPointer",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (void *)(arg1)->getObjectUserPointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_addCentralForce(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::addCentralForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::addCentralForce",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::addCentralForce",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::addCentralForce",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_addCentralForce",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_addCentralForce",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->addCentralForce(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getCentralForce(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getCentralForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getCentralForce",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getCentralForce",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::getCentralForce",3,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getCentralForce",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_getCentralForce",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getCentralForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_addTorque(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::addTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::addTorque",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::addTorque",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::addTorque",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_addTorque",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_addTorque",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->addTorque(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_getTorque(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::getTorque",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::getTorque",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::getTorque",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::getTorque",3,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_getTorque",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_getTorque",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->getTorque(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_clearForces(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::clearForces",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::clearForces",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::clearForces",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_clearForces",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->clearForces(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  int result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectInCollision",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",3,"unsigned int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",3,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (int)(arg1)->isObjectInCollision(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectInCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (int)(arg1)->isObjectInCollision(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectInCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectInCollision",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectInCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->isObjectInCollision(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isObjectInCollision(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsContext_isObjectInCollision__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContext_isObjectInCollision__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PhysicsContext_isObjectInCollision__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_isObjectInCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::isObjectInCollision(unsigned int,unsigned int *,unsigned int)\n"
    "    Neo::PhysicsContext::isObjectInCollision(unsigned int,unsigned int *)\n"
    "    Neo::PhysicsContext::isObjectInCollision(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_isObjectsCollision(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isObjectsCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isObjectsCollision",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isObjectsCollision",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isObjectsCollision",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isObjectsCollision",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->isObjectsCollision(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg6 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",4,"unsigned int *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",5,"Neo::Vector3 *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",6,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",6,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",4,"unsigned int *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",5,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",4,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",4,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsContext::isRayHit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",1,"Neo::PhysicsContext *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",2,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::isRayHit",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_isRayHit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)(arg1)->isRayHit((Neo::Vector3 const &)*arg2,(Neo::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_isRayHit(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsContext_isRayHit__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_PhysicsContext_isRayHit__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsContext_isRayHit__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_PhysicsContext_isRayHit__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_isRayHit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &,unsigned int *,Neo::Vector3 *,Neo::Vector3 *)\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &,unsigned int *,Neo::Vector3 *)\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &,unsigned int *)\n"
    "    Neo::PhysicsContext::isRayHit(Neo::Vector3 const &,Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_createMultiShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createMultiShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createMultiShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createMultiShape",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createMultiShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createMultiShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->createMultiShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createBoxShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createBoxShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createBoxShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createBoxShape",2,"unsigned int *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createBoxShape",3,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createBoxShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createBoxShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createBoxShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->createBoxShape(arg2,(Neo::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createSphereShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createSphereShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createSphereShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createSphereShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createSphereShape",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createSphereShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createSphereShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->createSphereShape(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConeShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConeShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConeShape",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConeShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConeShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->createConeShape(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createCapsuleShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createCapsuleShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createCapsuleShape",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createCapsuleShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createCapsuleShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->createCapsuleShape(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createCylinderShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createCylinderShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createCylinderShape",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createCylinderShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createCylinderShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->createCylinderShape(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConvexHullShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  Neo::Vector3 arg5 ;
  Neo::Vector3 *argp5 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConvexHullShape",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",4,"unsigned int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",5,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",5,SWIGTYPE_p_Neo__Vector3);
  }
  arg5 = *argp5;
  
  (arg1)->createConvexHullShape(arg2,(Neo::Vector3 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConvexHullShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConvexHullShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConvexHullShape",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConvexHullShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->createConvexHullShape(arg2,(Neo::Vector3 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConvexHullShape(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PhysicsContext_createConvexHullShape__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsContext_createConvexHullShape__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_createConvexHullShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::createConvexHullShape(unsigned int *,Neo::Vector3 const *,unsigned int,Neo::Vector3 const)\n"
    "    Neo::PhysicsContext::createConvexHullShape(unsigned int *,Neo::Vector3 const *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_createTriangleMeshShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  Neo::Vector3 arg8 ;
  Neo::Vector3 *argp8 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createTriangleMeshShape",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",5,"void const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",6,"unsigned int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",7,"Neo::VAR_TYPES");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",8,"Neo::Vector3 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"PhysicsContext_createTriangleMeshShape");
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  arg7 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",8,SWIGTYPE_p_Neo__Vector3);
  }
  arg8 = *argp8;
  
  (arg1)->createTriangleMeshShape(arg2,(Neo::Vector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createTriangleMeshShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  Neo::VAR_TYPES arg7 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createTriangleMeshShape",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",3,"Neo::Vector3 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",5,"void const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",6,"unsigned int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::PhysicsContext::createTriangleMeshShape",7,"Neo::VAR_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createTriangleMeshShape",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5=(void *)SWIG_MustGetPtr(L,5,0,0,5,"PhysicsContext_createTriangleMeshShape");
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  arg7 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 7);
  (arg1)->createTriangleMeshShape(arg2,(Neo::Vector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createTriangleMeshShape(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_PhysicsContext_createTriangleMeshShape__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, 0, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_PhysicsContext_createTriangleMeshShape__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsContext_createTriangleMeshShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsContext::createTriangleMeshShape(unsigned int *,Neo::Vector3 const *,unsigned int,void const *,unsigned int,Neo::VAR_TYPES,Neo::Vector3 const)\n"
    "    Neo::PhysicsContext::createTriangleMeshShape(unsigned int *,Neo::Vector3 const *,unsigned int,void const *,unsigned int,Neo::VAR_TYPES)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsContext_deleteShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deleteShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deleteShape",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deleteShape",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deleteShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_deleteShape",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_addChildShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Neo::Vector3 *arg4 = 0 ;
  Neo::Quaternion *arg5 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::addChildShape",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",4,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::addChildShape",5,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_addChildShape",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_addChildShape",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("PhysicsContext_addChildShape",5,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->addChildShape(arg2,arg3,(Neo::Vector3 const &)*arg4,(Neo::Quaternion const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_createConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::Vector3 *arg5 = 0 ;
  bool arg6 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::createConstraint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",2,"unsigned int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",4,"unsigned int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",5,"Neo::Vector3 const &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Neo::PhysicsContext::createConstraint",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_createConstraint",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_createConstraint",2,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_createConstraint",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->createConstraint(arg2,arg3,arg4,(Neo::Vector3 const &)*arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setLinearLimit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setLinearLimit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setLinearLimit",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setLinearLimit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setLinearLimit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setLinearLimit",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setLinearLimit(arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_setAngularLimit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *arg3 = 0 ;
  Neo::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::setAngularLimit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",1,"Neo::PhysicsContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",3,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::PhysicsContext::setAngularLimit",4,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_setAngularLimit",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setAngularLimit",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsContext_setAngularLimit",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setAngularLimit(arg2,(Neo::Vector3 const &)*arg3,(Neo::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsContext_deleteConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsContext::deleteConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsContext::deleteConstraint",1,"Neo::PhysicsContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsContext::deleteConstraint",2,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("PhysicsContext_deleteConstraint",1,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("PhysicsContext_deleteConstraint",2,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->deleteConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsContext(void *obj) {
Neo::PhysicsContext *arg1 = (Neo::PhysicsContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_PhysicsContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsContext_methods[]= {
    { "init", _wrap_PhysicsContext_init},
    { "clear", _wrap_PhysicsContext_clear},
    { "setSimulationQuality", _wrap_PhysicsContext_setSimulationQuality},
    { "updateSimulation", _wrap_PhysicsContext_updateSimulation},
    { "setWorldGravity", _wrap_PhysicsContext_setWorldGravity},
    { "createGhost", _wrap_PhysicsContext_createGhost},
    { "createRigidBody", _wrap_PhysicsContext_createRigidBody},
    { "activateObject", _wrap_PhysicsContext_activateObject},
    { "deactivateObject", _wrap_PhysicsContext_deactivateObject},
    { "deleteObject", _wrap_PhysicsContext_deleteObject},
    { "enableObjectKinematic", _wrap_PhysicsContext_enableObjectKinematic},
    { "disableObjectKinematic", _wrap_PhysicsContext_disableObjectKinematic},
    { "setObjectShape", _wrap_PhysicsContext_setObjectShape},
    { "setObjectMass", _wrap_PhysicsContext_setObjectMass},
    { "setObjectRestitution", _wrap_PhysicsContext_setObjectRestitution},
    { "setObjectFriction", _wrap_PhysicsContext_setObjectFriction},
    { "setObjectLinearFactor", _wrap_PhysicsContext_setObjectLinearFactor},
    { "setObjectAngularFactor", _wrap_PhysicsContext_setObjectAngularFactor},
    { "setObjectDamping", _wrap_PhysicsContext_setObjectDamping},
    { "setObjectTransform", _wrap_PhysicsContext_setObjectTransform},
    { "getObjectTransform", _wrap_PhysicsContext_getObjectTransform},
    { "setObjectUserPointer", _wrap_PhysicsContext_setObjectUserPointer},
    { "getObjectUserPointer", _wrap_PhysicsContext_getObjectUserPointer},
    { "addCentralForce", _wrap_PhysicsContext_addCentralForce},
    { "getCentralForce", _wrap_PhysicsContext_getCentralForce},
    { "addTorque", _wrap_PhysicsContext_addTorque},
    { "getTorque", _wrap_PhysicsContext_getTorque},
    { "clearForces", _wrap_PhysicsContext_clearForces},
    { "isObjectInCollision", _wrap_PhysicsContext_isObjectInCollision},
    { "isObjectsCollision", _wrap_PhysicsContext_isObjectsCollision},
    { "isRayHit", _wrap_PhysicsContext_isRayHit},
    { "createMultiShape", _wrap_PhysicsContext_createMultiShape},
    { "createBoxShape", _wrap_PhysicsContext_createBoxShape},
    { "createSphereShape", _wrap_PhysicsContext_createSphereShape},
    { "createConeShape", _wrap_PhysicsContext_createConeShape},
    { "createCapsuleShape", _wrap_PhysicsContext_createCapsuleShape},
    { "createCylinderShape", _wrap_PhysicsContext_createCylinderShape},
    { "createConvexHullShape", _wrap_PhysicsContext_createConvexHullShape},
    { "createTriangleMeshShape", _wrap_PhysicsContext_createTriangleMeshShape},
    { "deleteShape", _wrap_PhysicsContext_deleteShape},
    { "addChildShape", _wrap_PhysicsContext_addChildShape},
    { "createConstraint", _wrap_PhysicsContext_createConstraint},
    { "setLinearLimit", _wrap_PhysicsContext_setLinearLimit},
    { "setAngularLimit", _wrap_PhysicsContext_setAngularLimit},
    { "deleteConstraint", _wrap_PhysicsContext_deleteConstraint},
    {0,0}
};
static swig_lua_method swig_PhysicsContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsContext_Sf_SwigStatic = {
    "PhysicsContext",
    swig_PhysicsContext_Sf_SwigStatic_methods,
    swig_PhysicsContext_Sf_SwigStatic_attributes,
    swig_PhysicsContext_Sf_SwigStatic_constants,
    swig_PhysicsContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsContext_bases[] = {0};
static const char *swig_PhysicsContext_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsContext = { "PhysicsContext", "PhysicsContext", &SWIGTYPE_p_Neo__PhysicsContext,0, swig_delete_PhysicsContext, swig_PhysicsContext_methods, swig_PhysicsContext_attributes, &swig_PhysicsContext_Sf_SwigStatic, swig_PhysicsContext_meta, swig_PhysicsContext_bases, swig_PhysicsContext_base_names };

static int _wrap_ScriptContext_init(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::init",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_init",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_runScript(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::runScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::runScript",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::runScript",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_runScript",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->runScript((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_startCallFunction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::startCallFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::startCallFunction",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::startCallFunction",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_startCallFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->startCallFunction((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_endCallFunction__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::endCallFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::endCallFunction",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::endCallFunction",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_endCallFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->endCallFunction(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_endCallFunction__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::endCallFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::endCallFunction",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_endCallFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  result = (bool)(arg1)->endCallFunction();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_endCallFunction(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__ScriptContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ScriptContext_endCallFunction__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__ScriptContext, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScriptContext_endCallFunction__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ScriptContext_endCallFunction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::ScriptContext::endCallFunction(int)\n"
    "    Neo::ScriptContext::endCallFunction()\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptContext_callFunction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::callFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::callFunction",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::callFunction",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_callFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->callFunction((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_addFunction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int (*arg3)(void) = (int (*)(void)) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::addFunction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::addFunction",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::addFunction",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::ScriptContext::addFunction",3,"int (*)(void)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_addFunction",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_void__int,0))){
    SWIG_fail_ptr("ScriptContext_addFunction",3,SWIGTYPE_p_f_void__int);
  }
  
  (arg1)->addFunction((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_runString(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::runString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::runString",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::runString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_runString",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->runString((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getArgsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::ScriptContext::getArgsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getArgsNumber",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getArgsNumber",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  result = (unsigned int)(arg1)->getArgsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getIntArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  int *arg3 = (int *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getIntArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::ScriptContext::getIntArray",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getIntArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ScriptContext_getIntArray",3,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->getIntArray(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getFloatArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::ScriptContext::getFloatArray",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getFloatArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ScriptContext_getFloatArray",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->getFloatArray(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getString(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getString",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getString",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getString",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getString(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getInteger(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("Neo::ScriptContext::getInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getInteger",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getInteger",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getInteger",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->getInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getFloat(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::ScriptContext::getFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getFloat",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getFloat",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getFloat",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)(arg1)->getFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::getPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getPointer",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getPointer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getPointer",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (void *)(arg1)->getPointer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_getBoolean(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::getBoolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::getBoolean",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::getBoolean",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_getBoolean",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->getBoolean(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushIntArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushIntArray",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushIntArray",1,"Neo::ScriptContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushIntArray",2,"int const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::ScriptContext::pushIntArray",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushIntArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ScriptContext_pushIntArray",2,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->pushIntArray((int const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushFloatArray",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushFloatArray",1,"Neo::ScriptContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushFloatArray",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::ScriptContext::pushFloatArray",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushFloatArray",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ScriptContext_pushFloatArray",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->pushFloatArray((float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushString(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushString",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushString",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->pushString((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushBoolean(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushBoolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushBoolean",1,"Neo::ScriptContext *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushBoolean",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushBoolean",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->pushBoolean(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushInteger(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushInteger",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushInteger",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushInteger",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->pushInteger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushFloat(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushFloat",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushFloat",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->pushFloat(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_pushPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::ScriptContext::pushPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::pushPointer",1,"Neo::ScriptContext *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::ScriptContext::pushPointer",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_pushPointer",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"ScriptContext_pushPointer");
  (arg1)->pushPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_isNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::isNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::isNumber",1,"Neo::ScriptContext *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ScriptContext::isNumber",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_isNumber",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isNumber(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_isFunctionOk(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::isFunctionOk",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::isFunctionOk",1,"Neo::ScriptContext *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ScriptContext::isFunctionOk",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::ScriptContext::isFunctionOk",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_isFunctionOk",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->isFunctionOk((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptContext_isRunning(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ScriptContext *arg1 = (Neo::ScriptContext *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::ScriptContext::isRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ScriptContext::isRunning",1,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("ScriptContext_isRunning",1,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  result = (bool)(arg1)->isRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptContext(void *obj) {
Neo::ScriptContext *arg1 = (Neo::ScriptContext *) obj;
delete arg1;
}
static swig_lua_attribute swig_ScriptContext_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptContext_methods[]= {
    { "init", _wrap_ScriptContext_init},
    { "runScript", _wrap_ScriptContext_runScript},
    { "startCallFunction", _wrap_ScriptContext_startCallFunction},
    { "endCallFunction", _wrap_ScriptContext_endCallFunction},
    { "callFunction", _wrap_ScriptContext_callFunction},
    { "addFunction", _wrap_ScriptContext_addFunction},
    { "runString", _wrap_ScriptContext_runString},
    { "getArgsNumber", _wrap_ScriptContext_getArgsNumber},
    { "getIntArray", _wrap_ScriptContext_getIntArray},
    { "getFloatArray", _wrap_ScriptContext_getFloatArray},
    { "getString", _wrap_ScriptContext_getString},
    { "getInteger", _wrap_ScriptContext_getInteger},
    { "getFloat", _wrap_ScriptContext_getFloat},
    { "getPointer", _wrap_ScriptContext_getPointer},
    { "getBoolean", _wrap_ScriptContext_getBoolean},
    { "pushIntArray", _wrap_ScriptContext_pushIntArray},
    { "pushFloatArray", _wrap_ScriptContext_pushFloatArray},
    { "pushString", _wrap_ScriptContext_pushString},
    { "pushBoolean", _wrap_ScriptContext_pushBoolean},
    { "pushInteger", _wrap_ScriptContext_pushInteger},
    { "pushFloat", _wrap_ScriptContext_pushFloat},
    { "pushPointer", _wrap_ScriptContext_pushPointer},
    { "isNumber", _wrap_ScriptContext_isNumber},
    { "isFunctionOk", _wrap_ScriptContext_isFunctionOk},
    { "isRunning", _wrap_ScriptContext_isRunning},
    {0,0}
};
static swig_lua_method swig_ScriptContext_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptContext_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptContext_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptContext_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptContext_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptContext_Sf_SwigStatic = {
    "ScriptContext",
    swig_ScriptContext_Sf_SwigStatic_methods,
    swig_ScriptContext_Sf_SwigStatic_attributes,
    swig_ScriptContext_Sf_SwigStatic_constants,
    swig_ScriptContext_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptContext_bases[] = {0};
static const char *swig_ScriptContext_base_names[] = {0};
static swig_lua_class _wrap_class_ScriptContext = { "ScriptContext", "ScriptContext", &SWIGTYPE_p_Neo__ScriptContext,0, swig_delete_ScriptContext, swig_ScriptContext_methods, swig_ScriptContext_attributes, &swig_ScriptContext_Sf_SwigStatic, swig_ScriptContext_meta, swig_ScriptContext_bases, swig_ScriptContext_base_names };

static int _wrap_new_Image(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *result = 0 ;
  
  SWIG_check_num_args("Neo::Image::Image",0,0)
  result = (Neo::Image *)new Neo::Image();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Image,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_create(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  Neo::VAR_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo::Image::create",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::create",1,"Neo::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Image::create",2,"Neo::VAR_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Image::create",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Image::create",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::Image::create",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_create",1,SWIGTYPE_p_Neo__Image);
  }
  
  arg2 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->create(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::Image::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::clear",1,"Neo::Image *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Image::clear",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_clear",1,SWIGTYPE_p_Neo__Image);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Image_clear");
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_readPixel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::Image::readPixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::readPixel",1,"Neo::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Image::readPixel",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Image::readPixel",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::Image::readPixel",4,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_readPixel",1,SWIGTYPE_p_Neo__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Image_readPixel");
  (arg1)->readPixel(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_writePixel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::Image::writePixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::writePixel",1,"Neo::Image *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Image::writePixel",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Image::writePixel",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::Image::writePixel",4,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_writePixel",1,SWIGTYPE_p_Neo__Image);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Image_writePixel");
  (arg1)->writePixel(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::Image::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getData",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getData",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (void *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getDataType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  Neo::VAR_TYPES result;
  
  SWIG_check_num_args("Neo::Image::getDataType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getDataType",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getDataType",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (Neo::VAR_TYPES)(arg1)->getDataType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getComponents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getComponents",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getComponents",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getWidth",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getWidth",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getHeight",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getHeight",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Image_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Image *arg1 = (Neo::Image *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Image::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Image::getSize",1,"Neo::Image *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Image,0))){
    SWIG_fail_ptr("Image_getSize",1,SWIGTYPE_p_Neo__Image);
  }
  
  result = (unsigned int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Image(void *obj) {
Neo::Image *arg1 = (Neo::Image *) obj;
delete arg1;
}
static int _proxy__wrap_new_Image(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Image);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Image_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Image_methods[]= {
    { "create", _wrap_Image_create},
    { "clear", _wrap_Image_clear},
    { "readPixel", _wrap_Image_readPixel},
    { "writePixel", _wrap_Image_writePixel},
    { "getData", _wrap_Image_getData},
    { "getDataType", _wrap_Image_getDataType},
    { "getComponents", _wrap_Image_getComponents},
    { "getWidth", _wrap_Image_getWidth},
    { "getHeight", _wrap_Image_getHeight},
    { "getSize", _wrap_Image_getSize},
    {0,0}
};
static swig_lua_method swig_Image_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Image_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Image_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Image_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Image_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Image_Sf_SwigStatic = {
    "Image",
    swig_Image_Sf_SwigStatic_methods,
    swig_Image_Sf_SwigStatic_attributes,
    swig_Image_Sf_SwigStatic_constants,
    swig_Image_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Image_bases[] = {0};
static const char *swig_Image_base_names[] = {0};
static swig_lua_class _wrap_class_Image = { "Image", "Image", &SWIGTYPE_p_Neo__Image,_proxy__wrap_new_Image, swig_delete_Image, swig_Image_methods, swig_Image_attributes, &swig_Image_Sf_SwigStatic, swig_Image_meta, swig_Image_bases, swig_Image_base_names };

static int _wrap_new_Sound(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *result = 0 ;
  
  SWIG_check_num_args("Neo::Sound::Sound",0,0)
  result = (Neo::Sound *)new Neo::Sound();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Sound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_create(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  Neo::SOUND_FORMAT arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::Sound::create",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::create",1,"Neo::Sound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Sound::create",2,"Neo::SOUND_FORMAT");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Sound::create",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Sound::create",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_create",1,SWIGTYPE_p_Neo__Sound);
  }
  
  arg2 = (Neo::SOUND_FORMAT)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->create(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::Sound::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getData",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getData",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (void *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getFormat(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  Neo::SOUND_FORMAT result;
  
  SWIG_check_num_args("Neo::Sound::getFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getFormat",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getFormat",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (Neo::SOUND_FORMAT)(arg1)->getFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Sound::getSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getSampleRate",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getSampleRate",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (unsigned int)(arg1)->getSampleRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sound_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Sound *arg1 = (Neo::Sound *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Sound::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Sound::getSize",1,"Neo::Sound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Sound,0))){
    SWIG_fail_ptr("Sound_getSize",1,SWIGTYPE_p_Neo__Sound);
  }
  
  result = (unsigned int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sound(void *obj) {
Neo::Sound *arg1 = (Neo::Sound *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sound(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sound);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sound_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sound_methods[]= {
    { "create", _wrap_Sound_create},
    { "getData", _wrap_Sound_getData},
    { "getFormat", _wrap_Sound_getFormat},
    { "getSampleRate", _wrap_Sound_getSampleRate},
    { "getSize", _wrap_Sound_getSize},
    {0,0}
};
static swig_lua_method swig_Sound_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sound_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sound_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sound_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sound_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sound_Sf_SwigStatic = {
    "Sound",
    swig_Sound_Sf_SwigStatic_methods,
    swig_Sound_Sf_SwigStatic_attributes,
    swig_Sound_Sf_SwigStatic_constants,
    swig_Sound_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sound_bases[] = {0};
static const char *swig_Sound_base_names[] = {0};
static swig_lua_class _wrap_class_Sound = { "Sound", "Sound", &SWIGTYPE_p_Neo__Sound,_proxy__wrap_new_Sound, swig_delete_Sound, swig_Sound_methods, swig_Sound_attributes, &swig_Sound_Sf_SwigStatic, swig_Sound_meta, swig_Sound_bases, swig_Sound_base_names };

static int _wrap_getLocalFilename(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("getLocalFilename",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("getLocalFilename",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getLocalFilename",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("getLocalFilename",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  getLocalFilename(arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getGlobalFilename(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("getGlobalFilename",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("getGlobalFilename",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getGlobalFilename",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("getGlobalFilename",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  getGlobalFilename(arg1,(char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getRepertory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("getRepertory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("getRepertory",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getRepertory",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  getRepertory(arg1,(char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_readTextFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("readTextFile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("readTextFile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)readTextFile((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::clear",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_clear",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::destroy",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_destroy",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_incrScore(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::incrScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::incrScore",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_incrScore",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->incrScore();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_decrScore(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::decrScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::decrScore",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_decrScore",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->decrScore();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getScore(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::DataRef::getScore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getScore",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getScore",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (unsigned int)(arg1)->getScore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::update",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_update",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::DataRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getType",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getType",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_setTime(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("Neo::DataRef::setTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::setTime",1,"Neo::DataRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::DataRef::setTime",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_setTime",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  (arg1)->setTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getTime(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  long result;
  
  SWIG_check_num_args("Neo::DataRef::getTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getTime",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getTime",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (long)(arg1)->getTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataRef_getFilename(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataRef *arg1 = (Neo::DataRef *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::DataRef::getFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataRef::getFilename",1,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataRef_getFilename",1,SWIGTYPE_p_Neo__DataRef);
  }
  
  result = (char *)(arg1)->getFilename();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataRef(void *obj) {
Neo::DataRef *arg1 = (Neo::DataRef *) obj;
delete arg1;
}
static swig_lua_attribute swig_DataRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DataRef_methods[]= {
    { "clear", _wrap_DataRef_clear},
    { "destroy", _wrap_DataRef_destroy},
    { "incrScore", _wrap_DataRef_incrScore},
    { "decrScore", _wrap_DataRef_decrScore},
    { "getScore", _wrap_DataRef_getScore},
    { "update", _wrap_DataRef_update},
    { "getType", _wrap_DataRef_getType},
    { "setTime", _wrap_DataRef_setTime},
    { "getTime", _wrap_DataRef_getTime},
    { "getFilename", _wrap_DataRef_getFilename},
    {0,0}
};
static swig_lua_method swig_DataRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DataRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DataRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DataRef_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DataRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DataRef_Sf_SwigStatic = {
    "DataRef",
    swig_DataRef_Sf_SwigStatic_methods,
    swig_DataRef_Sf_SwigStatic_attributes,
    swig_DataRef_Sf_SwigStatic_constants,
    swig_DataRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DataRef_bases[] = {0};
static const char *swig_DataRef_base_names[] = {0};
static swig_lua_class _wrap_class_DataRef = { "DataRef", "DataRef", &SWIGTYPE_p_Neo__DataRef,0, swig_delete_DataRef, swig_DataRef_methods, swig_DataRef_attributes, &swig_DataRef_Sf_SwigStatic, swig_DataRef_meta, swig_DataRef_bases, swig_DataRef_base_names };

static int _wrap_DataManager_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  
  SWIG_check_num_args("Neo::DataManager::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::clear",1,"Neo::DataManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_clear",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataManager_addRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  Neo::DataRef *arg2 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::DataManager::addRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::addRef",1,"Neo::DataManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::DataManager::addRef",2,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_addRef",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("DataManager_addRef",2,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->addRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataManager_getRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  unsigned int arg2 ;
  Neo::DataRef *result = 0 ;
  
  SWIG_check_num_args("Neo::DataManager::getRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::getRef",1,"Neo::DataManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::DataManager::getRef",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_getRef",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::DataRef *)(arg1)->getRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataManager_getRefsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *arg1 = (Neo::DataManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::DataManager::getRefsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::DataManager::getRefsNumber",1,"Neo::DataManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__DataManager,0))){
    SWIG_fail_ptr("DataManager_getRefsNumber",1,SWIGTYPE_p_Neo__DataManager);
  }
  
  result = (unsigned int)(arg1)->getRefsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DataManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::DataManager::DataManager",0,0)
  result = (Neo::DataManager *)new Neo::DataManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataManager(void *obj) {
Neo::DataManager *arg1 = (Neo::DataManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_DataManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DataManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DataManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DataManager_methods[]= {
    { "clear", _wrap_DataManager_clear},
    { "addRef", _wrap_DataManager_addRef},
    { "getRef", _wrap_DataManager_getRef},
    { "getRefsNumber", _wrap_DataManager_getRefsNumber},
    {0,0}
};
static swig_lua_method swig_DataManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DataManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DataManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DataManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DataManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DataManager_Sf_SwigStatic = {
    "DataManager",
    swig_DataManager_Sf_SwigStatic_methods,
    swig_DataManager_Sf_SwigStatic_attributes,
    swig_DataManager_Sf_SwigStatic_constants,
    swig_DataManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DataManager_bases[] = {0};
static const char *swig_DataManager_base_names[] = {0};
static swig_lua_class _wrap_class_DataManager = { "DataManager", "DataManager", &SWIGTYPE_p_Neo__DataManager,_proxy__wrap_new_DataManager, swig_delete_DataManager, swig_DataManager_methods, swig_DataManager_attributes, &swig_DataManager_Sf_SwigStatic, swig_DataManager_meta, swig_DataManager_bases, swig_DataManager_base_names };

static int _wrap_new_Profiler(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Profiler *result = 0 ;
  
  SWIG_check_num_args("Neo::Profiler::Profiler",0,0)
  result = (Neo::Profiler *)new Neo::Profiler();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Profiler,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Profiler_getTicks(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Profiler *arg1 = (Neo::Profiler *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Neo::Profiler::getTicks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Profiler::getTicks",1,"Neo::Profiler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Profiler,0))){
    SWIG_fail_ptr("Profiler_getTicks",1,SWIGTYPE_p_Neo__Profiler);
  }
  
  result = (unsigned long)(arg1)->getTicks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Profiler_functionTimingStart(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Profiler *arg1 = (Neo::Profiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Profiler::functionTimingStart",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Profiler::functionTimingStart",1,"Neo::Profiler *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Profiler::functionTimingStart",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Profiler,0))){
    SWIG_fail_ptr("Profiler_functionTimingStart",1,SWIGTYPE_p_Neo__Profiler);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->functionTimingStart((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Profiler_functionTimingEnd(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Profiler *arg1 = (Neo::Profiler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Profiler::functionTimingEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Profiler::functionTimingEnd",1,"Neo::Profiler *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Profiler::functionTimingEnd",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Profiler,0))){
    SWIG_fail_ptr("Profiler_functionTimingEnd",1,SWIGTYPE_p_Neo__Profiler);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->functionTimingEnd((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Profiler_getFunctionProfile(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Profiler *arg1 = (Neo::Profiler *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Profiler::FunctionProfile *result = 0 ;
  
  SWIG_check_num_args("Neo::Profiler::getFunctionProfile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Profiler::getFunctionProfile",1,"Neo::Profiler *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Profiler::getFunctionProfile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Profiler,0))){
    SWIG_fail_ptr("Profiler_getFunctionProfile",1,SWIGTYPE_p_Neo__Profiler);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::Profiler::FunctionProfile *) &(arg1)->getFunctionProfile((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Profiler__FunctionProfile,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Profiler_generateReport(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Profiler *arg1 = (Neo::Profiler *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Profiler::generateReport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Profiler::generateReport",1,"Neo::Profiler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Profiler,0))){
    SWIG_fail_ptr("Profiler_generateReport",1,SWIGTYPE_p_Neo__Profiler);
  }
  
  result = (char *)(arg1)->generateReport();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Profiler(void *obj) {
Neo::Profiler *arg1 = (Neo::Profiler *) obj;
delete arg1;
}
static int _proxy__wrap_new_Profiler(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Profiler);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Profiler_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Profiler_methods[]= {
    { "getTicks", _wrap_Profiler_getTicks},
    { "functionTimingStart", _wrap_Profiler_functionTimingStart},
    { "functionTimingEnd", _wrap_Profiler_functionTimingEnd},
    { "getFunctionProfile", _wrap_Profiler_getFunctionProfile},
    { "generateReport", _wrap_Profiler_generateReport},
    {0,0}
};
static swig_lua_method swig_Profiler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Profiler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Profiler_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Profiler_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Profiler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Profiler_Sf_SwigStatic = {
    "Profiler",
    swig_Profiler_Sf_SwigStatic_methods,
    swig_Profiler_Sf_SwigStatic_attributes,
    swig_Profiler_Sf_SwigStatic_constants,
    swig_Profiler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Profiler_bases[] = {0};
static const char *swig_Profiler_base_names[] = {0};
static swig_lua_class _wrap_class_Profiler = { "Profiler", "Profiler", &SWIGTYPE_p_Neo__Profiler,_proxy__wrap_new_Profiler, swig_delete_Profiler, swig_Profiler_methods, swig_Profiler_attributes, &swig_Profiler_Sf_SwigStatic, swig_Profiler_meta, swig_Profiler_bases, swig_Profiler_base_names };

static int _wrap_infoLog(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  SWIG_check_num_args("Neo::infoLog",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Neo::infoLog",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::infoLog",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::infoLog",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::infoLog",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  Neo::infoLog((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_init(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  
  SWIG_check_num_args("Neo::PackageManager::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::init",1,"Neo::PackageManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_init",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  (arg1)->init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_cleanup(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  
  SWIG_check_num_args("Neo::PackageManager::cleanup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::cleanup",1,"Neo::PackageManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_cleanup",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  (arg1)->cleanup();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_loadPackage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Package result;
  
  SWIG_check_num_args("Neo::PackageManager::loadPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::loadPackage",1,"Neo::PackageManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PackageManager::loadPackage",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_loadPackage",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::Package)(arg1)->loadPackage((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_findEntity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::PackageEnt result;
  
  SWIG_check_num_args("Neo::PackageManager::findEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::findEntity",1,"Neo::PackageManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PackageManager::findEntity",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_findEntity",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::PackageEnt)(arg1)->findEntity((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_offlinePackage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  Neo::Package arg2 = (Neo::Package) 0 ;
  
  SWIG_check_num_args("Neo::PackageManager::offlinePackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::offlinePackage",1,"Neo::PackageManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PackageManager::offlinePackage",2,"Neo::Package");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_offlinePackage",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2=(Neo::Package)SWIG_MustGetPtr(L,2,0,0,2,"PackageManager_offlinePackage");
  (arg1)->offlinePackage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_unloadPackage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  Neo::Package arg2 = (Neo::Package) 0 ;
  
  SWIG_check_num_args("Neo::PackageManager::unloadPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::unloadPackage",1,"Neo::PackageManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PackageManager::unloadPackage",2,"Neo::Package");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_unloadPackage",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2=(Neo::Package)SWIG_MustGetPtr(L,2,0,0,2,"PackageManager_unloadPackage");
  (arg1)->unloadPackage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_openPackage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Package result;
  
  SWIG_check_num_args("Neo::PackageManager::openPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::openPackage",1,"Neo::PackageManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PackageManager::openPackage",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_openPackage",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::Package)(arg1)->openPackage((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_closePackage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  Neo::Package arg2 = (Neo::Package) 0 ;
  
  SWIG_check_num_args("Neo::PackageManager::closePackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::closePackage",1,"Neo::PackageManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PackageManager::closePackage",2,"Neo::Package");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_closePackage",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2=(Neo::Package)SWIG_MustGetPtr(L,2,0,0,2,"PackageManager_closePackage");
  (arg1)->closePackage(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_addFileToPackage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Package arg3 = (Neo::Package) 0 ;
  char *arg4 = (char *) 0 ;
  Neo::PackageEnt result;
  
  SWIG_check_num_args("Neo::PackageManager::addFileToPackage",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::addFileToPackage",1,"Neo::PackageManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PackageManager::addFileToPackage",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::PackageManager::addFileToPackage",3,"Neo::Package");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Neo::PackageManager::addFileToPackage",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_addFileToPackage",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3=(Neo::Package)SWIG_MustGetPtr(L,3,0,0,3,"PackageManager_addFileToPackage");
  arg4 = (char *)lua_tostring(L, 4);
  result = (Neo::PackageEnt)(arg1)->addFileToPackage((char const *)arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PackageManager_mountPackage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PackageManager *arg1 = (Neo::PackageManager *) 0 ;
  Neo::Package arg2 = (Neo::Package) 0 ;
  Neo::Package result;
  
  SWIG_check_num_args("Neo::PackageManager::mountPackage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PackageManager::mountPackage",1,"Neo::PackageManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PackageManager::mountPackage",2,"Neo::Package");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("PackageManager_mountPackage",1,SWIGTYPE_p_Neo__PackageManager);
  }
  
  arg2=(Neo::Package)SWIG_MustGetPtr(L,2,0,0,2,"PackageManager_mountPackage");
  result = (Neo::Package)(arg1)->mountPackage(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PackageManager(void *obj) {
Neo::PackageManager *arg1 = (Neo::PackageManager *) obj;
delete arg1;
}
static swig_lua_attribute swig_PackageManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PackageManager_methods[]= {
    { "init", _wrap_PackageManager_init},
    { "cleanup", _wrap_PackageManager_cleanup},
    { "loadPackage", _wrap_PackageManager_loadPackage},
    { "findEntity", _wrap_PackageManager_findEntity},
    { "offlinePackage", _wrap_PackageManager_offlinePackage},
    { "unloadPackage", _wrap_PackageManager_unloadPackage},
    { "openPackage", _wrap_PackageManager_openPackage},
    { "closePackage", _wrap_PackageManager_closePackage},
    { "addFileToPackage", _wrap_PackageManager_addFileToPackage},
    { "mountPackage", _wrap_PackageManager_mountPackage},
    {0,0}
};
static swig_lua_method swig_PackageManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PackageManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PackageManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PackageManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PackageManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PackageManager_Sf_SwigStatic = {
    "PackageManager",
    swig_PackageManager_Sf_SwigStatic_methods,
    swig_PackageManager_Sf_SwigStatic_attributes,
    swig_PackageManager_Sf_SwigStatic_constants,
    swig_PackageManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PackageManager_bases[] = {0};
static const char *swig_PackageManager_base_names[] = {0};
static swig_lua_class _wrap_class_PackageManager = { "PackageManager", "PackageManager", &SWIGTYPE_p_Neo__PackageManager,0, swig_delete_PackageManager, swig_PackageManager_methods, swig_PackageManager_attributes, &swig_PackageManager_Sf_SwigStatic, swig_PackageManager_meta, swig_PackageManager_bases, swig_PackageManager_base_names };

static int _wrap_new_Key(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::Key::Key",0,0)
  result = (Neo::Key *)new Neo::Key();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_setT(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Key::setT",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::setT",1,"Neo::Key *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Key::setT",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_setT",1,SWIGTYPE_p_Neo__Key);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setT(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_getT(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Key::getT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::getT",1,"Neo::Key *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_getT",1,SWIGTYPE_p_Neo__Key);
  }
  
  result = (int)(arg1)->getT();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_createFloatData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::Key::createFloatData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::createFloatData",1,"Neo::Key *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_createFloatData",1,SWIGTYPE_p_Neo__Key);
  }
  
  result = (float *)(arg1)->createFloatData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_createVector2Data(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::Key::createVector2Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::createVector2Data",1,"Neo::Key *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_createVector2Data",1,SWIGTYPE_p_Neo__Key);
  }
  
  result = (Neo::Vector2 *)(arg1)->createVector2Data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_createVector3Data(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Key::createVector3Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::createVector3Data",1,"Neo::Key *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_createVector3Data",1,SWIGTYPE_p_Neo__Key);
  }
  
  result = (Neo::Vector3 *)(arg1)->createVector3Data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_createVector4Data(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  Neo::Vector4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Key::createVector4Data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::createVector4Data",1,"Neo::Key *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_createVector4Data",1,SWIGTYPE_p_Neo__Key);
  }
  
  result = (Neo::Vector4 *)(arg1)->createVector4Data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_createQuaternionData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  Neo::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Neo::Key::createQuaternionData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::createQuaternionData",1,"Neo::Key *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_createQuaternionData",1,SWIGTYPE_p_Neo__Key);
  }
  
  result = (Neo::Quaternion *)(arg1)->createQuaternionData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Key_getData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::Key::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Key::getData",1,"Neo::Key *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("Key_getData",1,SWIGTYPE_p_Neo__Key);
  }
  
  result = (void *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Key(void *obj) {
Neo::Key *arg1 = (Neo::Key *) obj;
delete arg1;
}
static int _proxy__wrap_new_Key(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Key);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Key_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Key_methods[]= {
    { "setT", _wrap_Key_setT},
    { "getT", _wrap_Key_getT},
    { "createFloatData", _wrap_Key_createFloatData},
    { "createVector2Data", _wrap_Key_createVector2Data},
    { "createVector3Data", _wrap_Key_createVector3Data},
    { "createVector4Data", _wrap_Key_createVector4Data},
    { "createQuaternionData", _wrap_Key_createQuaternionData},
    { "getData", _wrap_Key_getData},
    {0,0}
};
static swig_lua_method swig_Key_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Key_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Key_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Key_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Key_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Key_Sf_SwigStatic = {
    "Key",
    swig_Key_Sf_SwigStatic_methods,
    swig_Key_Sf_SwigStatic_attributes,
    swig_Key_Sf_SwigStatic_constants,
    swig_Key_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Key_bases[] = {0};
static const char *swig_Key_base_names[] = {0};
static swig_lua_class _wrap_class_Key = { "Key", "Key", &SWIGTYPE_p_Neo__Key,_proxy__wrap_new_Key, swig_delete_Key, swig_Key_methods, swig_Key_attributes, &swig_Key_Sf_SwigStatic, swig_Key_meta, swig_Key_bases, swig_Key_base_names };

static int _wrap_new_Object3dAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::Object3dAnim",0,0)
  result = (Neo::Object3dAnim *)new Neo::Object3dAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3dAnim,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_allocPositionKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::allocPositionKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::allocPositionKeys",1,"Neo::Object3dAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3dAnim::allocPositionKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_allocPositionKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocPositionKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_allocScaleKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::allocScaleKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::allocScaleKeys",1,"Neo::Object3dAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3dAnim::allocScaleKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_allocScaleKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocScaleKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_allocRotationKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::allocRotationKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::allocRotationKeys",1,"Neo::Object3dAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3dAnim::allocRotationKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_allocRotationKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocRotationKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_clearPositionKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::clearPositionKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::clearPositionKeys",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_clearPositionKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  (arg1)->clearPositionKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_clearScaleKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::clearScaleKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::clearScaleKeys",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_clearScaleKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  (arg1)->clearScaleKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_clearRotationKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::clearRotationKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::clearRotationKeys",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_clearRotationKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  (arg1)->clearRotationKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_getPositionKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Object3dAnim::getPositionKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::getPositionKeysNumber",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_getPositionKeysNumber",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  result = (unsigned int)(arg1)->getPositionKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_getScaleKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Object3dAnim::getScaleKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::getScaleKeysNumber",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_getScaleKeysNumber",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  result = (unsigned int)(arg1)->getScaleKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_getRotationKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Object3dAnim::getRotationKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::getRotationKeysNumber",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_getRotationKeysNumber",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  result = (unsigned int)(arg1)->getRotationKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_getPositionKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::getPositionKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::getPositionKeys",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_getPositionKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  result = (Neo::Key *)(arg1)->getPositionKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_getScaleKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::getScaleKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::getScaleKeys",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_getScaleKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  result = (Neo::Key *)(arg1)->getScaleKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3dAnim_getRotationKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3dAnim::getRotationKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3dAnim::getRotationKeys",1,"Neo::Object3dAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3dAnim,0))){
    SWIG_fail_ptr("Object3dAnim_getRotationKeys",1,SWIGTYPE_p_Neo__Object3dAnim);
  }
  
  result = (Neo::Key *)(arg1)->getRotationKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Object3dAnim(void *obj) {
Neo::Object3dAnim *arg1 = (Neo::Object3dAnim *) obj;
delete arg1;
}
static int _proxy__wrap_new_Object3dAnim(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Object3dAnim);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Object3dAnim_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Object3dAnim_methods[]= {
    { "allocPositionKeys", _wrap_Object3dAnim_allocPositionKeys},
    { "allocScaleKeys", _wrap_Object3dAnim_allocScaleKeys},
    { "allocRotationKeys", _wrap_Object3dAnim_allocRotationKeys},
    { "clearPositionKeys", _wrap_Object3dAnim_clearPositionKeys},
    { "clearScaleKeys", _wrap_Object3dAnim_clearScaleKeys},
    { "clearRotationKeys", _wrap_Object3dAnim_clearRotationKeys},
    { "getPositionKeysNumber", _wrap_Object3dAnim_getPositionKeysNumber},
    { "getScaleKeysNumber", _wrap_Object3dAnim_getScaleKeysNumber},
    { "getRotationKeysNumber", _wrap_Object3dAnim_getRotationKeysNumber},
    { "getPositionKeys", _wrap_Object3dAnim_getPositionKeys},
    { "getScaleKeys", _wrap_Object3dAnim_getScaleKeys},
    { "getRotationKeys", _wrap_Object3dAnim_getRotationKeys},
    {0,0}
};
static swig_lua_method swig_Object3dAnim_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Object3dAnim_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Object3dAnim_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Object3dAnim_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Object3dAnim_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Object3dAnim_Sf_SwigStatic = {
    "Object3dAnim",
    swig_Object3dAnim_Sf_SwigStatic_methods,
    swig_Object3dAnim_Sf_SwigStatic_attributes,
    swig_Object3dAnim_Sf_SwigStatic_constants,
    swig_Object3dAnim_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Object3dAnim_bases[] = {0};
static const char *swig_Object3dAnim_base_names[] = {0};
static swig_lua_class _wrap_class_Object3dAnim = { "Object3dAnim", "Object3dAnim", &SWIGTYPE_p_Neo__Object3dAnim,_proxy__wrap_new_Object3dAnim, swig_delete_Object3dAnim, swig_Object3dAnim_methods, swig_Object3dAnim_attributes, &swig_Object3dAnim_Sf_SwigStatic, swig_Object3dAnim_meta, swig_Object3dAnim_bases, swig_Object3dAnim_base_names };

static int _wrap_new_TextureAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::TextureAnim",0,0)
  result = (Neo::TextureAnim *)new Neo::TextureAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureAnim,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_allocTranslateKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::allocTranslateKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::allocTranslateKeys",1,"Neo::TextureAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureAnim::allocTranslateKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_allocTranslateKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocTranslateKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_allocScaleKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::allocScaleKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::allocScaleKeys",1,"Neo::TextureAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureAnim::allocScaleKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_allocScaleKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocScaleKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_allocRotationKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::allocRotationKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::allocRotationKeys",1,"Neo::TextureAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureAnim::allocRotationKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_allocRotationKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocRotationKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_clearTranslateKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::clearTranslateKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::clearTranslateKeys",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_clearTranslateKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  (arg1)->clearTranslateKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_clearScaleKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::clearScaleKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::clearScaleKeys",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_clearScaleKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  (arg1)->clearScaleKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_clearRotationKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::clearRotationKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::clearRotationKeys",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_clearRotationKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  (arg1)->clearRotationKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_getTranslateKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureAnim::getTranslateKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::getTranslateKeysNumber",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_getTranslateKeysNumber",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  result = (unsigned int)(arg1)->getTranslateKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_getScaleKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureAnim::getScaleKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::getScaleKeysNumber",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_getScaleKeysNumber",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  result = (unsigned int)(arg1)->getScaleKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_getRotationKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureAnim::getRotationKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::getRotationKeysNumber",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_getRotationKeysNumber",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  result = (unsigned int)(arg1)->getRotationKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_getTranslateKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::getTranslateKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::getTranslateKeys",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_getTranslateKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  result = (Neo::Key *)(arg1)->getTranslateKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_getScaleKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::getScaleKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::getScaleKeys",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_getScaleKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  result = (Neo::Key *)(arg1)->getScaleKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureAnim_getRotationKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureAnim *arg1 = (Neo::TextureAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureAnim::getRotationKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureAnim::getRotationKeys",1,"Neo::TextureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureAnim,0))){
    SWIG_fail_ptr("TextureAnim_getRotationKeys",1,SWIGTYPE_p_Neo__TextureAnim);
  }
  
  result = (Neo::Key *)(arg1)->getRotationKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextureAnim(void *obj) {
Neo::TextureAnim *arg1 = (Neo::TextureAnim *) obj;
delete arg1;
}
static int _proxy__wrap_new_TextureAnim(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TextureAnim);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TextureAnim_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextureAnim_methods[]= {
    { "allocTranslateKeys", _wrap_TextureAnim_allocTranslateKeys},
    { "allocScaleKeys", _wrap_TextureAnim_allocScaleKeys},
    { "allocRotationKeys", _wrap_TextureAnim_allocRotationKeys},
    { "clearTranslateKeys", _wrap_TextureAnim_clearTranslateKeys},
    { "clearScaleKeys", _wrap_TextureAnim_clearScaleKeys},
    { "clearRotationKeys", _wrap_TextureAnim_clearRotationKeys},
    { "getTranslateKeysNumber", _wrap_TextureAnim_getTranslateKeysNumber},
    { "getScaleKeysNumber", _wrap_TextureAnim_getScaleKeysNumber},
    { "getRotationKeysNumber", _wrap_TextureAnim_getRotationKeysNumber},
    { "getTranslateKeys", _wrap_TextureAnim_getTranslateKeys},
    { "getScaleKeys", _wrap_TextureAnim_getScaleKeys},
    { "getRotationKeys", _wrap_TextureAnim_getRotationKeys},
    {0,0}
};
static swig_lua_method swig_TextureAnim_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TextureAnim_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TextureAnim_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TextureAnim_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TextureAnim_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TextureAnim_Sf_SwigStatic = {
    "TextureAnim",
    swig_TextureAnim_Sf_SwigStatic_methods,
    swig_TextureAnim_Sf_SwigStatic_attributes,
    swig_TextureAnim_Sf_SwigStatic_constants,
    swig_TextureAnim_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TextureAnim_bases[] = {0};
static const char *swig_TextureAnim_base_names[] = {0};
static swig_lua_class _wrap_class_TextureAnim = { "TextureAnim", "TextureAnim", &SWIGTYPE_p_Neo__TextureAnim,_proxy__wrap_new_TextureAnim, swig_delete_TextureAnim, swig_TextureAnim_methods, swig_TextureAnim_attributes, &swig_TextureAnim_Sf_SwigStatic, swig_TextureAnim_meta, swig_TextureAnim_bases, swig_TextureAnim_base_names };

static int _wrap_new_MaterialAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::MaterialAnim",0,0)
  result = (Neo::MaterialAnim *)new Neo::MaterialAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialAnim,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_allocOpacityKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::allocOpacityKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::allocOpacityKeys",1,"Neo::MaterialAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialAnim::allocOpacityKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_allocOpacityKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocOpacityKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_allocShininessKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::allocShininessKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::allocShininessKeys",1,"Neo::MaterialAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialAnim::allocShininessKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_allocShininessKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocShininessKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_allocCustomValueKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::allocCustomValueKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::allocCustomValueKeys",1,"Neo::MaterialAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialAnim::allocCustomValueKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_allocCustomValueKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocCustomValueKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_allocDiffuseKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::allocDiffuseKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::allocDiffuseKeys",1,"Neo::MaterialAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialAnim::allocDiffuseKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_allocDiffuseKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocDiffuseKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_allocSpecularKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::allocSpecularKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::allocSpecularKeys",1,"Neo::MaterialAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialAnim::allocSpecularKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_allocSpecularKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocSpecularKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_allocEmitKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::allocEmitKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::allocEmitKeys",1,"Neo::MaterialAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialAnim::allocEmitKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_allocEmitKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocEmitKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_allocCustomColorKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::allocCustomColorKeys",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::allocCustomColorKeys",1,"Neo::MaterialAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialAnim::allocCustomColorKeys",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_allocCustomColorKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Key *)(arg1)->allocCustomColorKeys(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_clearOpacityKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::clearOpacityKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::clearOpacityKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_clearOpacityKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  (arg1)->clearOpacityKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_clearShininessKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::clearShininessKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::clearShininessKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_clearShininessKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  (arg1)->clearShininessKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_clearCustomValueKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::clearCustomValueKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::clearCustomValueKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_clearCustomValueKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  (arg1)->clearCustomValueKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_clearDiffuseKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::clearDiffuseKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::clearDiffuseKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_clearDiffuseKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  (arg1)->clearDiffuseKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_clearSpecularKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::clearSpecularKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::clearSpecularKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_clearSpecularKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  (arg1)->clearSpecularKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_clearEmitKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::clearEmitKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::clearEmitKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_clearEmitKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  (arg1)->clearEmitKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_clearCustomColorKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::clearCustomColorKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::clearCustomColorKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_clearCustomColorKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  (arg1)->clearCustomColorKeys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getOpacityKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialAnim::getOpacityKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getOpacityKeysNumber",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getOpacityKeysNumber",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (unsigned int)(arg1)->getOpacityKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getShininessKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialAnim::getShininessKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getShininessKeysNumber",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getShininessKeysNumber",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (unsigned int)(arg1)->getShininessKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getCustomValueKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialAnim::getCustomValueKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getCustomValueKeysNumber",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getCustomValueKeysNumber",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (unsigned int)(arg1)->getCustomValueKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getDiffuseKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialAnim::getDiffuseKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getDiffuseKeysNumber",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getDiffuseKeysNumber",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (unsigned int)(arg1)->getDiffuseKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getSpecularKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialAnim::getSpecularKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getSpecularKeysNumber",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getSpecularKeysNumber",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (unsigned int)(arg1)->getSpecularKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getEmitKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialAnim::getEmitKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getEmitKeysNumber",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getEmitKeysNumber",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (unsigned int)(arg1)->getEmitKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getCustomColorKeysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialAnim::getCustomColorKeysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getCustomColorKeysNumber",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getCustomColorKeysNumber",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (unsigned int)(arg1)->getCustomColorKeysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getOpacityKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::getOpacityKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getOpacityKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getOpacityKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (Neo::Key *)(arg1)->getOpacityKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getShininessKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::getShininessKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getShininessKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getShininessKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (Neo::Key *)(arg1)->getShininessKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getCustomValueKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::getCustomValueKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getCustomValueKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getCustomValueKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (Neo::Key *)(arg1)->getCustomValueKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getDiffuseKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::getDiffuseKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getDiffuseKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getDiffuseKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (Neo::Key *)(arg1)->getDiffuseKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getSpecularKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::getSpecularKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getSpecularKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getSpecularKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (Neo::Key *)(arg1)->getSpecularKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getEmitKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::getEmitKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getEmitKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getEmitKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (Neo::Key *)(arg1)->getEmitKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialAnim_getCustomColorKeys(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) 0 ;
  Neo::Key *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialAnim::getCustomColorKeys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialAnim::getCustomColorKeys",1,"Neo::MaterialAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialAnim,0))){
    SWIG_fail_ptr("MaterialAnim_getCustomColorKeys",1,SWIGTYPE_p_Neo__MaterialAnim);
  }
  
  result = (Neo::Key *)(arg1)->getCustomColorKeys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Key,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MaterialAnim(void *obj) {
Neo::MaterialAnim *arg1 = (Neo::MaterialAnim *) obj;
delete arg1;
}
static int _proxy__wrap_new_MaterialAnim(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MaterialAnim);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MaterialAnim_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaterialAnim_methods[]= {
    { "allocOpacityKeys", _wrap_MaterialAnim_allocOpacityKeys},
    { "allocShininessKeys", _wrap_MaterialAnim_allocShininessKeys},
    { "allocCustomValueKeys", _wrap_MaterialAnim_allocCustomValueKeys},
    { "allocDiffuseKeys", _wrap_MaterialAnim_allocDiffuseKeys},
    { "allocSpecularKeys", _wrap_MaterialAnim_allocSpecularKeys},
    { "allocEmitKeys", _wrap_MaterialAnim_allocEmitKeys},
    { "allocCustomColorKeys", _wrap_MaterialAnim_allocCustomColorKeys},
    { "clearOpacityKeys", _wrap_MaterialAnim_clearOpacityKeys},
    { "clearShininessKeys", _wrap_MaterialAnim_clearShininessKeys},
    { "clearCustomValueKeys", _wrap_MaterialAnim_clearCustomValueKeys},
    { "clearDiffuseKeys", _wrap_MaterialAnim_clearDiffuseKeys},
    { "clearSpecularKeys", _wrap_MaterialAnim_clearSpecularKeys},
    { "clearEmitKeys", _wrap_MaterialAnim_clearEmitKeys},
    { "clearCustomColorKeys", _wrap_MaterialAnim_clearCustomColorKeys},
    { "getOpacityKeysNumber", _wrap_MaterialAnim_getOpacityKeysNumber},
    { "getShininessKeysNumber", _wrap_MaterialAnim_getShininessKeysNumber},
    { "getCustomValueKeysNumber", _wrap_MaterialAnim_getCustomValueKeysNumber},
    { "getDiffuseKeysNumber", _wrap_MaterialAnim_getDiffuseKeysNumber},
    { "getSpecularKeysNumber", _wrap_MaterialAnim_getSpecularKeysNumber},
    { "getEmitKeysNumber", _wrap_MaterialAnim_getEmitKeysNumber},
    { "getCustomColorKeysNumber", _wrap_MaterialAnim_getCustomColorKeysNumber},
    { "getOpacityKeys", _wrap_MaterialAnim_getOpacityKeys},
    { "getShininessKeys", _wrap_MaterialAnim_getShininessKeys},
    { "getCustomValueKeys", _wrap_MaterialAnim_getCustomValueKeys},
    { "getDiffuseKeys", _wrap_MaterialAnim_getDiffuseKeys},
    { "getSpecularKeys", _wrap_MaterialAnim_getSpecularKeys},
    { "getEmitKeys", _wrap_MaterialAnim_getEmitKeys},
    { "getCustomColorKeys", _wrap_MaterialAnim_getCustomColorKeys},
    {0,0}
};
static swig_lua_method swig_MaterialAnim_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaterialAnim_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaterialAnim_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaterialAnim_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MaterialAnim_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaterialAnim_Sf_SwigStatic = {
    "MaterialAnim",
    swig_MaterialAnim_Sf_SwigStatic_methods,
    swig_MaterialAnim_Sf_SwigStatic_attributes,
    swig_MaterialAnim_Sf_SwigStatic_constants,
    swig_MaterialAnim_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaterialAnim_bases[] = {0};
static const char *swig_MaterialAnim_base_names[] = {0};
static swig_lua_class _wrap_class_MaterialAnim = { "MaterialAnim", "MaterialAnim", &SWIGTYPE_p_Neo__MaterialAnim,_proxy__wrap_new_MaterialAnim, swig_delete_MaterialAnim, swig_MaterialAnim_methods, swig_MaterialAnim_attributes, &swig_MaterialAnim_Sf_SwigStatic, swig_MaterialAnim_meta, swig_MaterialAnim_bases, swig_MaterialAnim_base_names };

static int _wrap_new_ArmatureAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnim::ArmatureAnim",0,0)
  result = (Neo::ArmatureAnim *)new Neo::ArmatureAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnim,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnim_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnim::getNew",0,0)
  result = (Neo::ArmatureAnim *)Neo::ArmatureAnim::getNew();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnim_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnim::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnim::destroy",1,"Neo::ArmatureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("ArmatureAnim_destroy",1,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnim_allocBonesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) 0 ;
  unsigned int arg2 ;
  Neo::Object3dAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnim::allocBonesAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnim::allocBonesAnim",1,"Neo::ArmatureAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ArmatureAnim::allocBonesAnim",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("ArmatureAnim_allocBonesAnim",1,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Object3dAnim *)(arg1)->allocBonesAnim(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3dAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnim_clearBonesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnim::clearBonesAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnim::clearBonesAnim",1,"Neo::ArmatureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("ArmatureAnim_clearBonesAnim",1,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  (arg1)->clearBonesAnim();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnim_getBonesAnimNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::ArmatureAnim::getBonesAnimNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnim::getBonesAnimNumber",1,"Neo::ArmatureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("ArmatureAnim_getBonesAnimNumber",1,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  result = (unsigned int)(arg1)->getBonesAnimNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnim_getBonesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) 0 ;
  Neo::Object3dAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnim::getBonesAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnim::getBonesAnim",1,"Neo::ArmatureAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("ArmatureAnim_getBonesAnim",1,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  result = (Neo::Object3dAnim *)(arg1)->getBonesAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3dAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArmatureAnim(void *obj) {
Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) obj;
delete arg1;
}
static int _proxy__wrap_new_ArmatureAnim(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ArmatureAnim);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ArmatureAnim_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ArmatureAnim_methods[]= {
    { "destroy", _wrap_ArmatureAnim_destroy},
    { "allocBonesAnim", _wrap_ArmatureAnim_allocBonesAnim},
    { "clearBonesAnim", _wrap_ArmatureAnim_clearBonesAnim},
    { "getBonesAnimNumber", _wrap_ArmatureAnim_getBonesAnimNumber},
    { "getBonesAnim", _wrap_ArmatureAnim_getBonesAnim},
    {0,0}
};
static swig_lua_method swig_ArmatureAnim_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ArmatureAnim_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ArmatureAnim_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ArmatureAnim_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_ArmatureAnim_getNew},
    {0,0}
};
static swig_lua_class* swig_ArmatureAnim_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ArmatureAnim_Sf_SwigStatic = {
    "ArmatureAnim",
    swig_ArmatureAnim_Sf_SwigStatic_methods,
    swig_ArmatureAnim_Sf_SwigStatic_attributes,
    swig_ArmatureAnim_Sf_SwigStatic_constants,
    swig_ArmatureAnim_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ArmatureAnim_bases[] = {0};
static const char *swig_ArmatureAnim_base_names[] = {0};
static swig_lua_class _wrap_class_ArmatureAnim = { "ArmatureAnim", "ArmatureAnim", &SWIGTYPE_p_Neo__ArmatureAnim,_proxy__wrap_new_ArmatureAnim, swig_delete_ArmatureAnim, swig_ArmatureAnim_methods, swig_ArmatureAnim_attributes, &swig_ArmatureAnim_Sf_SwigStatic, swig_ArmatureAnim_meta, swig_ArmatureAnim_bases, swig_ArmatureAnim_base_names };

static int _wrap_new_TexturesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnim::TexturesAnim",0,0)
  result = (Neo::TexturesAnim *)new Neo::TexturesAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnim,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnim_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnim::getNew",0,0)
  result = (Neo::TexturesAnim *)Neo::TexturesAnim::getNew();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnim_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnim::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnim::destroy",1,"Neo::TexturesAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("TexturesAnim_destroy",1,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnim_allocTexturesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) 0 ;
  unsigned int arg2 ;
  Neo::TextureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnim::allocTexturesAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnim::allocTexturesAnim",1,"Neo::TexturesAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TexturesAnim::allocTexturesAnim",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("TexturesAnim_allocTexturesAnim",1,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::TextureAnim *)(arg1)->allocTexturesAnim(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnim_clearTexturesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnim::clearTexturesAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnim::clearTexturesAnim",1,"Neo::TexturesAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("TexturesAnim_clearTexturesAnim",1,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  (arg1)->clearTexturesAnim();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnim_getTexturesAnimNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TexturesAnim::getTexturesAnimNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnim::getTexturesAnimNumber",1,"Neo::TexturesAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("TexturesAnim_getTexturesAnimNumber",1,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  result = (unsigned int)(arg1)->getTexturesAnimNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnim_getTexturesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) 0 ;
  Neo::TextureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnim::getTexturesAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnim::getTexturesAnim",1,"Neo::TexturesAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("TexturesAnim_getTexturesAnim",1,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  result = (Neo::TextureAnim *)(arg1)->getTexturesAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TexturesAnim(void *obj) {
Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) obj;
delete arg1;
}
static int _proxy__wrap_new_TexturesAnim(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TexturesAnim);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TexturesAnim_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TexturesAnim_methods[]= {
    { "destroy", _wrap_TexturesAnim_destroy},
    { "allocTexturesAnim", _wrap_TexturesAnim_allocTexturesAnim},
    { "clearTexturesAnim", _wrap_TexturesAnim_clearTexturesAnim},
    { "getTexturesAnimNumber", _wrap_TexturesAnim_getTexturesAnimNumber},
    { "getTexturesAnim", _wrap_TexturesAnim_getTexturesAnim},
    {0,0}
};
static swig_lua_method swig_TexturesAnim_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TexturesAnim_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TexturesAnim_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TexturesAnim_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_TexturesAnim_getNew},
    {0,0}
};
static swig_lua_class* swig_TexturesAnim_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TexturesAnim_Sf_SwigStatic = {
    "TexturesAnim",
    swig_TexturesAnim_Sf_SwigStatic_methods,
    swig_TexturesAnim_Sf_SwigStatic_attributes,
    swig_TexturesAnim_Sf_SwigStatic_constants,
    swig_TexturesAnim_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TexturesAnim_bases[] = {0};
static const char *swig_TexturesAnim_base_names[] = {0};
static swig_lua_class _wrap_class_TexturesAnim = { "TexturesAnim", "TexturesAnim", &SWIGTYPE_p_Neo__TexturesAnim,_proxy__wrap_new_TexturesAnim, swig_delete_TexturesAnim, swig_TexturesAnim_methods, swig_TexturesAnim_attributes, &swig_TexturesAnim_Sf_SwigStatic, swig_TexturesAnim_meta, swig_TexturesAnim_bases, swig_TexturesAnim_base_names };

static int _wrap_new_MaterialsAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnim::MaterialsAnim",0,0)
  result = (Neo::MaterialsAnim *)new Neo::MaterialsAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnim,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnim_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnim::getNew",0,0)
  result = (Neo::MaterialsAnim *)Neo::MaterialsAnim::getNew();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnim_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnim::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnim::destroy",1,"Neo::MaterialsAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("MaterialsAnim_destroy",1,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnim_allocMaterialsAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) 0 ;
  unsigned int arg2 ;
  Neo::MaterialAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnim::allocMaterialsAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnim::allocMaterialsAnim",1,"Neo::MaterialsAnim *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialsAnim::allocMaterialsAnim",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("MaterialsAnim_allocMaterialsAnim",1,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::MaterialAnim *)(arg1)->allocMaterialsAnim(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnim_clearMaterialsAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnim::clearMaterialsAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnim::clearMaterialsAnim",1,"Neo::MaterialsAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("MaterialsAnim_clearMaterialsAnim",1,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  (arg1)->clearMaterialsAnim();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnim_getMaterialsAnimNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialsAnim::getMaterialsAnimNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnim::getMaterialsAnimNumber",1,"Neo::MaterialsAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("MaterialsAnim_getMaterialsAnimNumber",1,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  result = (unsigned int)(arg1)->getMaterialsAnimNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnim_getMaterialsAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) 0 ;
  Neo::MaterialAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnim::getMaterialsAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnim::getMaterialsAnim",1,"Neo::MaterialsAnim *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("MaterialsAnim_getMaterialsAnim",1,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  result = (Neo::MaterialAnim *)(arg1)->getMaterialsAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MaterialsAnim(void *obj) {
Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) obj;
delete arg1;
}
static int _proxy__wrap_new_MaterialsAnim(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MaterialsAnim);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MaterialsAnim_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaterialsAnim_methods[]= {
    { "destroy", _wrap_MaterialsAnim_destroy},
    { "allocMaterialsAnim", _wrap_MaterialsAnim_allocMaterialsAnim},
    { "clearMaterialsAnim", _wrap_MaterialsAnim_clearMaterialsAnim},
    { "getMaterialsAnimNumber", _wrap_MaterialsAnim_getMaterialsAnimNumber},
    { "getMaterialsAnim", _wrap_MaterialsAnim_getMaterialsAnim},
    {0,0}
};
static swig_lua_method swig_MaterialsAnim_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaterialsAnim_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaterialsAnim_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaterialsAnim_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_MaterialsAnim_getNew},
    {0,0}
};
static swig_lua_class* swig_MaterialsAnim_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaterialsAnim_Sf_SwigStatic = {
    "MaterialsAnim",
    swig_MaterialsAnim_Sf_SwigStatic_methods,
    swig_MaterialsAnim_Sf_SwigStatic_attributes,
    swig_MaterialsAnim_Sf_SwigStatic_constants,
    swig_MaterialsAnim_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaterialsAnim_bases[] = {0};
static const char *swig_MaterialsAnim_base_names[] = {0};
static swig_lua_class _wrap_class_MaterialsAnim = { "MaterialsAnim", "MaterialsAnim", &SWIGTYPE_p_Neo__MaterialsAnim,_proxy__wrap_new_MaterialsAnim, swig_delete_MaterialsAnim, swig_MaterialsAnim_methods, swig_MaterialsAnim_attributes, &swig_MaterialsAnim_Sf_SwigStatic, swig_MaterialsAnim_meta, swig_MaterialsAnim_bases, swig_MaterialsAnim_base_names };

static int _wrap_new_FXRef(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  Neo::ShaderRef *arg2 = (Neo::ShaderRef *) 0 ;
  Neo::ShaderRef *arg3 = (Neo::ShaderRef *) 0 ;
  Neo::FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::FXRef::FXRef",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::FXRef::FXRef",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::FXRef::FXRef",2,"Neo::ShaderRef *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::FXRef::FXRef",3,"Neo::ShaderRef *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("new_FXRef",2,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("new_FXRef",3,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (Neo::FXRef *)new Neo::FXRef(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXRef_getFXId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXRef *arg1 = (Neo::FXRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::FXRef::getFXId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXRef::getFXId",1,"Neo::FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXRef,0))){
    SWIG_fail_ptr("FXRef_getFXId",1,SWIGTYPE_p_Neo__FXRef);
  }
  
  result = (unsigned int)(arg1)->getFXId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXRef_getVertexShaderRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXRef *arg1 = (Neo::FXRef *) 0 ;
  Neo::ShaderRef *result = 0 ;
  
  SWIG_check_num_args("Neo::FXRef::getVertexShaderRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXRef::getVertexShaderRef",1,"Neo::FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXRef,0))){
    SWIG_fail_ptr("FXRef_getVertexShaderRef",1,SWIGTYPE_p_Neo__FXRef);
  }
  
  result = (Neo::ShaderRef *)(arg1)->getVertexShaderRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ShaderRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXRef_getPixelShaderRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXRef *arg1 = (Neo::FXRef *) 0 ;
  Neo::ShaderRef *result = 0 ;
  
  SWIG_check_num_args("Neo::FXRef::getPixelShaderRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXRef::getPixelShaderRef",1,"Neo::FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXRef,0))){
    SWIG_fail_ptr("FXRef_getPixelShaderRef",1,SWIGTYPE_p_Neo__FXRef);
  }
  
  result = (Neo::ShaderRef *)(arg1)->getPixelShaderRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ShaderRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXRef_isImportant(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXRef *arg1 = (Neo::FXRef *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::FXRef::isImportant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXRef::isImportant",1,"Neo::FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXRef,0))){
    SWIG_fail_ptr("FXRef_isImportant",1,SWIGTYPE_p_Neo__FXRef);
  }
  
  result = (bool)(arg1)->isImportant();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXRef_setImportant(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXRef *arg1 = (Neo::FXRef *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::FXRef::setImportant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXRef::setImportant",1,"Neo::FXRef *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::FXRef::setImportant",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXRef,0))){
    SWIG_fail_ptr("FXRef_setImportant",1,SWIGTYPE_p_Neo__FXRef);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setImportant(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FXRef(void *obj) {
Neo::FXRef *arg1 = (Neo::FXRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_FXRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FXRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FXRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FXRef_methods[]= {
    { "getFXId", _wrap_FXRef_getFXId},
    { "getVertexShaderRef", _wrap_FXRef_getVertexShaderRef},
    { "getPixelShaderRef", _wrap_FXRef_getPixelShaderRef},
    { "isImportant", _wrap_FXRef_isImportant},
    { "setImportant", _wrap_FXRef_setImportant},
    {0,0}
};
static swig_lua_method swig_FXRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FXRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FXRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FXRef_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FXRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FXRef_Sf_SwigStatic = {
    "FXRef",
    swig_FXRef_Sf_SwigStatic_methods,
    swig_FXRef_Sf_SwigStatic_attributes,
    swig_FXRef_Sf_SwigStatic_constants,
    swig_FXRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FXRef_bases[] = {0};
static const char *swig_FXRef_base_names[] = {0};
static swig_lua_class _wrap_class_FXRef = { "FXRef", "FXRef", &SWIGTYPE_p_Neo__FXRef,_proxy__wrap_new_FXRef, swig_delete_FXRef, swig_FXRef_methods, swig_FXRef_attributes, &swig_FXRef_Sf_SwigStatic, swig_FXRef_meta, swig_FXRef_bases, swig_FXRef_base_names };

static int _wrap_FXManager_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXManager *arg1 = (Neo::FXManager *) 0 ;
  
  SWIG_check_num_args("Neo::FXManager::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXManager::clear",1,"Neo::FXManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXManager,0))){
    SWIG_fail_ptr("FXManager_clear",1,SWIGTYPE_p_Neo__FXManager);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXManager_addFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXManager *arg1 = (Neo::FXManager *) 0 ;
  unsigned int arg2 ;
  Neo::ShaderRef *arg3 = (Neo::ShaderRef *) 0 ;
  Neo::ShaderRef *arg4 = (Neo::ShaderRef *) 0 ;
  Neo::FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::FXManager::addFXRef",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXManager::addFXRef",1,"Neo::FXManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::FXManager::addFXRef",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::FXManager::addFXRef",3,"Neo::ShaderRef *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::FXManager::addFXRef",4,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXManager,0))){
    SWIG_fail_ptr("FXManager_addFXRef",1,SWIGTYPE_p_Neo__FXManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("FXManager_addFXRef",3,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("FXManager_addFXRef",4,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (Neo::FXRef *)(arg1)->addFXRef(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXManager_getFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXManager *arg1 = (Neo::FXManager *) 0 ;
  unsigned int arg2 ;
  Neo::FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::FXManager::getFXRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXManager::getFXRef",1,"Neo::FXManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::FXManager::getFXRef",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXManager,0))){
    SWIG_fail_ptr("FXManager_getFXRef",1,SWIGTYPE_p_Neo__FXManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::FXRef *)(arg1)->getFXRef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FXManager_getFXRefsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXManager *arg1 = (Neo::FXManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::FXManager::getFXRefsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FXManager::getFXRefsNumber",1,"Neo::FXManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FXManager,0))){
    SWIG_fail_ptr("FXManager_getFXRefsNumber",1,SWIGTYPE_p_Neo__FXManager);
  }
  
  result = (unsigned int)(arg1)->getFXRefsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FXManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FXManager *result = 0 ;
  
  SWIG_check_num_args("Neo::FXManager::FXManager",0,0)
  result = (Neo::FXManager *)new Neo::FXManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FXManager(void *obj) {
Neo::FXManager *arg1 = (Neo::FXManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_FXManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FXManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FXManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FXManager_methods[]= {
    { "clear", _wrap_FXManager_clear},
    { "addFXRef", _wrap_FXManager_addFXRef},
    { "getFXRef", _wrap_FXManager_getFXRef},
    { "getFXRefsNumber", _wrap_FXManager_getFXRefsNumber},
    {0,0}
};
static swig_lua_method swig_FXManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FXManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FXManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FXManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FXManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FXManager_Sf_SwigStatic = {
    "FXManager",
    swig_FXManager_Sf_SwigStatic_methods,
    swig_FXManager_Sf_SwigStatic_attributes,
    swig_FXManager_Sf_SwigStatic_constants,
    swig_FXManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FXManager_bases[] = {0};
static const char *swig_FXManager_base_names[] = {0};
static swig_lua_class _wrap_class_FXManager = { "FXManager", "FXManager", &SWIGTYPE_p_Neo__FXManager,_proxy__wrap_new_FXManager, swig_delete_FXManager, swig_FXManager_methods, swig_FXManager_attributes, &swig_FXManager_Sf_SwigStatic, swig_FXManager_meta, swig_FXManager_bases, swig_FXManager_base_names };

static int _wrap_new_NeoVariable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoVariable *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoVariable::NeoVariable",0,0)
  result = (Neo::NeoVariable *)new Neo::NeoVariable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoVariable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NeoVariable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  Neo::M_VARIABLE_TYPE arg3 ;
  Neo::NeoVariable *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoVariable::NeoVariable",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Neo::NeoVariable::NeoVariable",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoVariable::NeoVariable",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::NeoVariable::NeoVariable",3,"Neo::M_VARIABLE_TYPE");
  arg1 = (char *)lua_tostring(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"new_NeoVariable");
  arg3 = (Neo::M_VARIABLE_TYPE)(int)lua_tonumber(L, 3);
  result = (Neo::NeoVariable *)new Neo::NeoVariable((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoVariable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NeoVariable(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NeoVariable__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_NeoVariable__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NeoVariable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::NeoVariable::NeoVariable()\n"
    "    Neo::NeoVariable::NeoVariable(char const *,void *,Neo::M_VARIABLE_TYPE)\n");
  lua_error(L);return 0;
}


static int _wrap_NeoVariable_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoVariable *arg1 = (Neo::NeoVariable *) 0 ;
  Neo::M_VARIABLE_TYPE result;
  
  SWIG_check_num_args("Neo::NeoVariable::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoVariable::getType",1,"Neo::NeoVariable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoVariable,0))){
    SWIG_fail_ptr("NeoVariable_getType",1,SWIGTYPE_p_Neo__NeoVariable);
  }
  
  result = (Neo::M_VARIABLE_TYPE)(arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoVariable_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoVariable *arg1 = (Neo::NeoVariable *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoVariable::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoVariable::getName",1,"Neo::NeoVariable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoVariable,0))){
    SWIG_fail_ptr("NeoVariable_getName",1,SWIGTYPE_p_Neo__NeoVariable);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoVariable_getPointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoVariable *arg1 = (Neo::NeoVariable *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoVariable::getPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoVariable::getPointer",1,"Neo::NeoVariable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoVariable,0))){
    SWIG_fail_ptr("NeoVariable_getPointer",1,SWIGTYPE_p_Neo__NeoVariable);
  }
  
  result = (void *)(arg1)->getPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NeoVariable(void *obj) {
Neo::NeoVariable *arg1 = (Neo::NeoVariable *) obj;
delete arg1;
}
static int _proxy__wrap_new_NeoVariable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NeoVariable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NeoVariable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NeoVariable_methods[]= {
    { "getType", _wrap_NeoVariable_getType},
    { "getName", _wrap_NeoVariable_getName},
    { "getPointer", _wrap_NeoVariable_getPointer},
    {0,0}
};
static swig_lua_method swig_NeoVariable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NeoVariable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NeoVariable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NeoVariable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NeoVariable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NeoVariable_Sf_SwigStatic = {
    "NeoVariable",
    swig_NeoVariable_Sf_SwigStatic_methods,
    swig_NeoVariable_Sf_SwigStatic_attributes,
    swig_NeoVariable_Sf_SwigStatic_constants,
    swig_NeoVariable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NeoVariable_bases[] = {0};
static const char *swig_NeoVariable_base_names[] = {0};
static swig_lua_class _wrap_class_NeoVariable = { "NeoVariable", "NeoVariable", &SWIGTYPE_p_Neo__NeoVariable,_proxy__wrap_new_NeoVariable, swig_delete_NeoVariable, swig_NeoVariable_methods, swig_NeoVariable_attributes, &swig_NeoVariable_Sf_SwigStatic, swig_NeoVariable_meta, swig_NeoVariable_bases, swig_NeoVariable_base_names };

static int _wrap_new_PostProcessor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *result = 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::PostProcessor",0,0)
  result = (Neo::PostProcessor *)new Neo::PostProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PostProcessor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PostProcessor::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::draw",1,"Neo::PostProcessor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PostProcessor::draw",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_draw",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("PostProcessor_draw",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (bool)(arg1)->draw(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_loadShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PostProcessor::loadShader",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::loadShader",1,"Neo::PostProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PostProcessor::loadShader",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::PostProcessor::loadShader",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_loadShader",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->loadShader((char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_loadShaderFile(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PostProcessor::loadShaderFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::loadShaderFile",1,"Neo::PostProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PostProcessor::loadShaderFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::PostProcessor::loadShaderFile",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_loadShaderFile",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->loadShaderFile((char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_updateResolution(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::updateResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::updateResolution",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_updateResolution",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  (arg1)->updateResolution();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_eraseTextures(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::eraseTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::eraseTextures",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_eraseTextures",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  (arg1)->eraseTextures();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_addFloatUniform(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::addFloatUniform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::addFloatUniform",1,"Neo::PostProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PostProcessor::addFloatUniform",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_addFloatUniform",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addFloatUniform((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_setFloatUniformValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PostProcessor::setFloatUniformValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::setFloatUniformValue",1,"Neo::PostProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PostProcessor::setFloatUniformValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PostProcessor::setFloatUniformValue",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_setFloatUniformValue",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setFloatUniformValue((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getFloatUniformValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("Neo::PostProcessor::getFloatUniformValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getFloatUniformValue",1,"Neo::PostProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PostProcessor::getFloatUniformValue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getFloatUniformValue",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->getFloatUniformValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_addIntUniform(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::addIntUniform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::addIntUniform",1,"Neo::PostProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PostProcessor::addIntUniform",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_addIntUniform",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addIntUniform((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_setIntUniformValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::PostProcessor::setIntUniformValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::setIntUniformValue",1,"Neo::PostProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PostProcessor::setIntUniformValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::PostProcessor::setIntUniformValue",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_setIntUniformValue",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setIntUniformValue((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getIntUniformValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Neo::PostProcessor::getIntUniformValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getIntUniformValue",1,"Neo::PostProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PostProcessor::getIntUniformValue",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getIntUniformValue",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getIntUniformValue(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getNumUniforms(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::PostProcessor::getNumUniforms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getNumUniforms",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getNumUniforms",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  result = (int)(arg1)->getNumUniforms();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getUniformName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::getUniformName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getUniformName",1,"Neo::PostProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PostProcessor::getUniformName",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getUniformName",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getUniformName(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getUniformType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  int arg2 ;
  Neo::M_VARIABLE_TYPE result;
  
  SWIG_check_num_args("Neo::PostProcessor::getUniformType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getUniformType",1,"Neo::PostProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PostProcessor::getUniformType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getUniformType",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Neo::M_VARIABLE_TYPE)(arg1)->getUniformType(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::clear",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_clear",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getVertexShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::getVertexShader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getVertexShader",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getVertexShader",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  result = (char *)(arg1)->getVertexShader();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getFragmentShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::getFragmentShader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getFragmentShader",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getFragmentShader",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  result = (char *)(arg1)->getFragmentShader();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_setShaderPath(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::PostProcessor::setShaderPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::setShaderPath",1,"Neo::PostProcessor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::PostProcessor::setShaderPath",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::PostProcessor::setShaderPath",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_setShaderPath",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setShaderPath((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::PostProcessor::getFX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getFX",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getFX",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  result = (int)(arg1)->getFX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_getResolutionMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PostProcessor::getResolutionMultiplier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::getResolutionMultiplier",1,"Neo::PostProcessor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_getResolutionMultiplier",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  result = (float)(arg1)->getResolutionMultiplier();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PostProcessor_setResolutionMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PostProcessor *arg1 = (Neo::PostProcessor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PostProcessor::setResolutionMultiplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PostProcessor::setResolutionMultiplier",1,"Neo::PostProcessor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PostProcessor::setResolutionMultiplier",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PostProcessor,0))){
    SWIG_fail_ptr("PostProcessor_setResolutionMultiplier",1,SWIGTYPE_p_Neo__PostProcessor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setResolutionMultiplier(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PostProcessor(void *obj) {
Neo::PostProcessor *arg1 = (Neo::PostProcessor *) obj;
delete arg1;
}
static int _proxy__wrap_new_PostProcessor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PostProcessor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PostProcessor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PostProcessor_methods[]= {
    { "draw", _wrap_PostProcessor_draw},
    { "loadShader", _wrap_PostProcessor_loadShader},
    { "loadShaderFile", _wrap_PostProcessor_loadShaderFile},
    { "updateResolution", _wrap_PostProcessor_updateResolution},
    { "eraseTextures", _wrap_PostProcessor_eraseTextures},
    { "addFloatUniform", _wrap_PostProcessor_addFloatUniform},
    { "setFloatUniformValue", _wrap_PostProcessor_setFloatUniformValue},
    { "getFloatUniformValue", _wrap_PostProcessor_getFloatUniformValue},
    { "addIntUniform", _wrap_PostProcessor_addIntUniform},
    { "setIntUniformValue", _wrap_PostProcessor_setIntUniformValue},
    { "getIntUniformValue", _wrap_PostProcessor_getIntUniformValue},
    { "getNumUniforms", _wrap_PostProcessor_getNumUniforms},
    { "getUniformName", _wrap_PostProcessor_getUniformName},
    { "getUniformType", _wrap_PostProcessor_getUniformType},
    { "clear", _wrap_PostProcessor_clear},
    { "getVertexShader", _wrap_PostProcessor_getVertexShader},
    { "getFragmentShader", _wrap_PostProcessor_getFragmentShader},
    { "setShaderPath", _wrap_PostProcessor_setShaderPath},
    { "getFX", _wrap_PostProcessor_getFX},
    { "getResolutionMultiplier", _wrap_PostProcessor_getResolutionMultiplier},
    { "setResolutionMultiplier", _wrap_PostProcessor_setResolutionMultiplier},
    {0,0}
};
static swig_lua_method swig_PostProcessor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PostProcessor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PostProcessor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PostProcessor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PostProcessor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PostProcessor_Sf_SwigStatic = {
    "PostProcessor",
    swig_PostProcessor_Sf_SwigStatic_methods,
    swig_PostProcessor_Sf_SwigStatic_attributes,
    swig_PostProcessor_Sf_SwigStatic_constants,
    swig_PostProcessor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PostProcessor_bases[] = {0};
static const char *swig_PostProcessor_base_names[] = {0};
static swig_lua_class _wrap_class_PostProcessor = { "PostProcessor", "PostProcessor", &SWIGTYPE_p_Neo__PostProcessor,_proxy__wrap_new_PostProcessor, swig_delete_PostProcessor, swig_PostProcessor_methods, swig_PostProcessor_attributes, &swig_PostProcessor_Sf_SwigStatic, swig_PostProcessor_meta, swig_PostProcessor_bases, swig_PostProcessor_base_names };

static int _wrap_Behavior_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  
  SWIG_check_num_args("Neo::Behavior::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::destroy",1,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_destroy",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_getParentObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Behavior::getParentObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::getParentObject",1,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_getParentObject",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  result = (Neo::Object3d *)(arg1)->getParentObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Behavior::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::getName",1,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_getName",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_getCopy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  Neo::Behavior *result = 0 ;
  
  SWIG_check_num_args("Neo::Behavior::getCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::getCopy",1,"Neo::Behavior *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Behavior::getCopy",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_getCopy",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Behavior_getCopy",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Behavior *)(arg1)->getCopy(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Behavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  
  SWIG_check_num_args("Neo::Behavior::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::update",1,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_update",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  
  SWIG_check_num_args("Neo::Behavior::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::draw",1,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_draw",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_runEvent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Behavior::runEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::runEvent",1,"Neo::Behavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Behavior::runEvent",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_runEvent",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->runEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_getVariablesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Behavior::getVariablesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::getVariablesNumber",1,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_getVariablesNumber",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  result = (unsigned int)(arg1)->getVariablesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_getVariable(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Behavior *arg1 = (Neo::Behavior *) 0 ;
  unsigned int arg2 ;
  Neo::NeoVariable result;
  
  SWIG_check_num_args("Neo::Behavior::getVariable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Behavior::getVariable",1,"Neo::Behavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Behavior::getVariable",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Behavior_getVariable",1,SWIGTYPE_p_Neo__Behavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (arg1)->getVariable(arg2);
  {
    Neo::NeoVariable * resultptr = new Neo::NeoVariable((const Neo::NeoVariable &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__NeoVariable,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Behavior(void *obj) {
Neo::Behavior *arg1 = (Neo::Behavior *) obj;
delete arg1;
}
static swig_lua_attribute swig_Behavior_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Behavior_methods[]= {
    { "destroy", _wrap_Behavior_destroy},
    { "getParentObject", _wrap_Behavior_getParentObject},
    { "getName", _wrap_Behavior_getName},
    { "getCopy", _wrap_Behavior_getCopy},
    { "update", _wrap_Behavior_update},
    { "draw", _wrap_Behavior_draw},
    { "runEvent", _wrap_Behavior_runEvent},
    { "getVariablesNumber", _wrap_Behavior_getVariablesNumber},
    { "getVariable", _wrap_Behavior_getVariable},
    {0,0}
};
static swig_lua_method swig_Behavior_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Behavior_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Behavior_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Behavior_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Behavior_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Behavior_Sf_SwigStatic = {
    "Behavior",
    swig_Behavior_Sf_SwigStatic_methods,
    swig_Behavior_Sf_SwigStatic_attributes,
    swig_Behavior_Sf_SwigStatic_constants,
    swig_Behavior_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Behavior_bases[] = {0};
static const char *swig_Behavior_base_names[] = {0};
static swig_lua_class _wrap_class_Behavior = { "Behavior", "Behavior", &SWIGTYPE_p_Neo__Behavior,0, swig_delete_Behavior, swig_Behavior_methods, swig_Behavior_attributes, &swig_Behavior_Sf_SwigStatic, swig_Behavior_meta, swig_Behavior_bases, swig_Behavior_base_names };

static int _wrap_new_BehaviorCreator(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  Neo::Behavior *(*arg3)(Neo::Object3d *) = (Neo::Behavior *(*)(Neo::Object3d *)) 0 ;
  Neo::BehaviorCreator *result = 0 ;
  
  SWIG_check_num_args("Neo::BehaviorCreator::BehaviorCreator",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Neo::BehaviorCreator::BehaviorCreator",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::BehaviorCreator::BehaviorCreator",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::BehaviorCreator::BehaviorCreator",3,"Neo::Behavior *(*)(Neo::Object3d *)");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_p_Neo__Object3d__p_Neo__Behavior,0))){
    SWIG_fail_ptr("new_BehaviorCreator",3,SWIGTYPE_p_f_p_Neo__Object3d__p_Neo__Behavior);
  }
  
  result = (Neo::BehaviorCreator *)new Neo::BehaviorCreator((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__BehaviorCreator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorCreator_getObjectFilter(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorCreator *arg1 = (Neo::BehaviorCreator *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::BehaviorCreator::getObjectFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorCreator::getObjectFilter",1,"Neo::BehaviorCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorCreator,0))){
    SWIG_fail_ptr("BehaviorCreator_getObjectFilter",1,SWIGTYPE_p_Neo__BehaviorCreator);
  }
  
  result = (int)(arg1)->getObjectFilter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorCreator_setName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorCreator *arg1 = (Neo::BehaviorCreator *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::BehaviorCreator::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorCreator::setName",1,"Neo::BehaviorCreator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::BehaviorCreator::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorCreator,0))){
    SWIG_fail_ptr("BehaviorCreator_setName",1,SWIGTYPE_p_Neo__BehaviorCreator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorCreator_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorCreator *arg1 = (Neo::BehaviorCreator *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::BehaviorCreator::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorCreator::getName",1,"Neo::BehaviorCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorCreator,0))){
    SWIG_fail_ptr("BehaviorCreator_getName",1,SWIGTYPE_p_Neo__BehaviorCreator);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorCreator_getNewBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorCreator *arg1 = (Neo::BehaviorCreator *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  Neo::Behavior *result = 0 ;
  
  SWIG_check_num_args("Neo::BehaviorCreator::getNewBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorCreator::getNewBehavior",1,"Neo::BehaviorCreator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::BehaviorCreator::getNewBehavior",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorCreator,0))){
    SWIG_fail_ptr("BehaviorCreator_getNewBehavior",1,SWIGTYPE_p_Neo__BehaviorCreator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("BehaviorCreator_getNewBehavior",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Behavior *)(arg1)->getNewBehavior(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Behavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BehaviorCreator(void *obj) {
Neo::BehaviorCreator *arg1 = (Neo::BehaviorCreator *) obj;
delete arg1;
}
static int _proxy__wrap_new_BehaviorCreator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BehaviorCreator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BehaviorCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BehaviorCreator_methods[]= {
    { "getObjectFilter", _wrap_BehaviorCreator_getObjectFilter},
    { "setName", _wrap_BehaviorCreator_setName},
    { "getName", _wrap_BehaviorCreator_getName},
    { "getNewBehavior", _wrap_BehaviorCreator_getNewBehavior},
    {0,0}
};
static swig_lua_method swig_BehaviorCreator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BehaviorCreator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BehaviorCreator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BehaviorCreator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BehaviorCreator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BehaviorCreator_Sf_SwigStatic = {
    "BehaviorCreator",
    swig_BehaviorCreator_Sf_SwigStatic_methods,
    swig_BehaviorCreator_Sf_SwigStatic_attributes,
    swig_BehaviorCreator_Sf_SwigStatic_constants,
    swig_BehaviorCreator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BehaviorCreator_bases[] = {0};
static const char *swig_BehaviorCreator_base_names[] = {0};
static swig_lua_class _wrap_class_BehaviorCreator = { "BehaviorCreator", "BehaviorCreator", &SWIGTYPE_p_Neo__BehaviorCreator,_proxy__wrap_new_BehaviorCreator, swig_delete_BehaviorCreator, swig_BehaviorCreator_methods, swig_BehaviorCreator_attributes, &swig_BehaviorCreator_Sf_SwigStatic, swig_BehaviorCreator_meta, swig_BehaviorCreator_bases, swig_BehaviorCreator_base_names };

static int _wrap_new_BehaviorManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorManager *result = 0 ;
  
  SWIG_check_num_args("Neo::BehaviorManager::BehaviorManager",0,0)
  result = (Neo::BehaviorManager *)new Neo::BehaviorManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__BehaviorManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorManager_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorManager *arg1 = (Neo::BehaviorManager *) 0 ;
  
  SWIG_check_num_args("Neo::BehaviorManager::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorManager::clear",1,"Neo::BehaviorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorManager,0))){
    SWIG_fail_ptr("BehaviorManager_clear",1,SWIGTYPE_p_Neo__BehaviorManager);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorManager_addBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorManager *arg1 = (Neo::BehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  Neo::Behavior *(*arg4)(Neo::Object3d *) = (Neo::Behavior *(*)(Neo::Object3d *)) 0 ;
  
  SWIG_check_num_args("Neo::BehaviorManager::addBehavior",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorManager::addBehavior",1,"Neo::BehaviorManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::BehaviorManager::addBehavior",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::BehaviorManager::addBehavior",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::BehaviorManager::addBehavior",4,"Neo::Behavior *(*)(Neo::Object3d *)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorManager,0))){
    SWIG_fail_ptr("BehaviorManager_addBehavior",1,SWIGTYPE_p_Neo__BehaviorManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_f_p_Neo__Object3d__p_Neo__Behavior,0))){
    SWIG_fail_ptr("BehaviorManager_addBehavior",4,SWIGTYPE_p_f_p_Neo__Object3d__p_Neo__Behavior);
  }
  
  (arg1)->addBehavior((char const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorManager_getBehaviorByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorManager *arg1 = (Neo::BehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::BehaviorCreator *result = 0 ;
  
  SWIG_check_num_args("Neo::BehaviorManager::getBehaviorByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorManager::getBehaviorByName",1,"Neo::BehaviorManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::BehaviorManager::getBehaviorByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorManager,0))){
    SWIG_fail_ptr("BehaviorManager_getBehaviorByName",1,SWIGTYPE_p_Neo__BehaviorManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::BehaviorCreator *)(arg1)->getBehaviorByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__BehaviorCreator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorManager_getBehaviorsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorManager *arg1 = (Neo::BehaviorManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::BehaviorManager::getBehaviorsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorManager::getBehaviorsNumber",1,"Neo::BehaviorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorManager,0))){
    SWIG_fail_ptr("BehaviorManager_getBehaviorsNumber",1,SWIGTYPE_p_Neo__BehaviorManager);
  }
  
  result = (unsigned int)(arg1)->getBehaviorsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorManager_getBehaviorByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::BehaviorManager *arg1 = (Neo::BehaviorManager *) 0 ;
  unsigned int arg2 ;
  Neo::BehaviorCreator *result = 0 ;
  
  SWIG_check_num_args("Neo::BehaviorManager::getBehaviorByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::BehaviorManager::getBehaviorByIndex",1,"Neo::BehaviorManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::BehaviorManager::getBehaviorByIndex",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__BehaviorManager,0))){
    SWIG_fail_ptr("BehaviorManager_getBehaviorByIndex",1,SWIGTYPE_p_Neo__BehaviorManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  result = (Neo::BehaviorCreator *)(arg1)->getBehaviorByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__BehaviorCreator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BehaviorManager(void *obj) {
Neo::BehaviorManager *arg1 = (Neo::BehaviorManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_BehaviorManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BehaviorManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BehaviorManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BehaviorManager_methods[]= {
    { "clear", _wrap_BehaviorManager_clear},
    { "addBehavior", _wrap_BehaviorManager_addBehavior},
    { "getBehaviorByName", _wrap_BehaviorManager_getBehaviorByName},
    { "getBehaviorsNumber", _wrap_BehaviorManager_getBehaviorsNumber},
    { "getBehaviorByIndex", _wrap_BehaviorManager_getBehaviorByIndex},
    {0,0}
};
static swig_lua_method swig_BehaviorManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BehaviorManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BehaviorManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BehaviorManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BehaviorManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BehaviorManager_Sf_SwigStatic = {
    "BehaviorManager",
    swig_BehaviorManager_Sf_SwigStatic_methods,
    swig_BehaviorManager_Sf_SwigStatic_attributes,
    swig_BehaviorManager_Sf_SwigStatic_constants,
    swig_BehaviorManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BehaviorManager_bases[] = {0};
static const char *swig_BehaviorManager_base_names[] = {0};
static swig_lua_class _wrap_class_BehaviorManager = { "BehaviorManager", "BehaviorManager", &SWIGTYPE_p_Neo__BehaviorManager,_proxy__wrap_new_BehaviorManager, swig_delete_BehaviorManager, swig_BehaviorManager_methods, swig_BehaviorManager_attributes, &swig_BehaviorManager_Sf_SwigStatic, swig_BehaviorManager_meta, swig_BehaviorManager_bases, swig_BehaviorManager_base_names };

static int _wrap_Renderer_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Renderer *arg1 = (Neo::Renderer *) 0 ;
  
  SWIG_check_num_args("Neo::Renderer::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Renderer::destroy",1,"Neo::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("Renderer_destroy",1,SWIGTYPE_p_Neo__Renderer);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Renderer *arg1 = (Neo::Renderer *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Renderer::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Renderer::getName",1,"Neo::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("Renderer_getName",1,SWIGTYPE_p_Neo__Renderer);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_drawScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Renderer *arg1 = (Neo::Renderer *) 0 ;
  Neo::Scene *arg2 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg3 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::Renderer::drawScene",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Renderer::drawScene",1,"Neo::Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Renderer::drawScene",2,"Neo::Scene *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Renderer::drawScene",3,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("Renderer_drawScene",1,SWIGTYPE_p_Neo__Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Renderer_drawScene",2,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Renderer_drawScene",3,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->drawScene(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_drawText(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Renderer *arg1 = (Neo::Renderer *) 0 ;
  Neo::OText *arg2 = (Neo::OText *) 0 ;
  
  SWIG_check_num_args("Neo::Renderer::drawText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Renderer::drawText",1,"Neo::Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Renderer::drawText",2,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("Renderer_drawText",1,SWIGTYPE_p_Neo__Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("Renderer_drawText",2,SWIGTYPE_p_Neo__OText);
  }
  
  (arg1)->drawText(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_stopThreads(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Renderer *arg1 = (Neo::Renderer *) 0 ;
  
  SWIG_check_num_args("Neo::Renderer::stopThreads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Renderer::stopThreads",1,"Neo::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("Renderer_stopThreads",1,SWIGTYPE_p_Neo__Renderer);
  }
  
  (arg1)->stopThreads();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_startThreads(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Renderer *arg1 = (Neo::Renderer *) 0 ;
  
  SWIG_check_num_args("Neo::Renderer::startThreads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Renderer::startThreads",1,"Neo::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("Renderer_startThreads",1,SWIGTYPE_p_Neo__Renderer);
  }
  
  (arg1)->startThreads();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_KillThreads(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Renderer *arg1 = (Neo::Renderer *) 0 ;
  
  SWIG_check_num_args("Neo::Renderer::KillThreads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Renderer::KillThreads",1,"Neo::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("Renderer_KillThreads",1,SWIGTYPE_p_Neo__Renderer);
  }
  
  (arg1)->KillThreads();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Renderer(void *obj) {
Neo::Renderer *arg1 = (Neo::Renderer *) obj;
delete arg1;
}
static swig_lua_attribute swig_Renderer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Renderer_methods[]= {
    { "destroy", _wrap_Renderer_destroy},
    { "getName", _wrap_Renderer_getName},
    { "drawScene", _wrap_Renderer_drawScene},
    { "drawText", _wrap_Renderer_drawText},
    { "stopThreads", _wrap_Renderer_stopThreads},
    { "startThreads", _wrap_Renderer_startThreads},
    { "KillThreads", _wrap_Renderer_KillThreads},
    {0,0}
};
static swig_lua_method swig_Renderer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Renderer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Renderer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Renderer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Renderer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Renderer_Sf_SwigStatic = {
    "Renderer",
    swig_Renderer_Sf_SwigStatic_methods,
    swig_Renderer_Sf_SwigStatic_attributes,
    swig_Renderer_Sf_SwigStatic_constants,
    swig_Renderer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Renderer_bases[] = {0};
static const char *swig_Renderer_base_names[] = {0};
static swig_lua_class _wrap_class_Renderer = { "Renderer", "Renderer", &SWIGTYPE_p_Neo__Renderer,0, swig_delete_Renderer, swig_Renderer_methods, swig_Renderer_attributes, &swig_Renderer_Sf_SwigStatic, swig_Renderer_meta, swig_Renderer_bases, swig_Renderer_base_names };

static int _wrap_new_RendererCreator(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Neo::Renderer *(*arg2)(void) = (Neo::Renderer *(*)(void)) 0 ;
  Neo::RendererCreator *result = 0 ;
  
  SWIG_check_num_args("Neo::RendererCreator::RendererCreator",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Neo::RendererCreator::RendererCreator",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::RendererCreator::RendererCreator",2,"Neo::Renderer *(*)(void)");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_void__p_Neo__Renderer,0))){
    SWIG_fail_ptr("new_RendererCreator",2,SWIGTYPE_p_f_void__p_Neo__Renderer);
  }
  
  result = (Neo::RendererCreator *)new Neo::RendererCreator((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__RendererCreator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererCreator_setName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererCreator *arg1 = (Neo::RendererCreator *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::RendererCreator::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererCreator::setName",1,"Neo::RendererCreator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::RendererCreator::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererCreator,0))){
    SWIG_fail_ptr("RendererCreator_setName",1,SWIGTYPE_p_Neo__RendererCreator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererCreator_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererCreator *arg1 = (Neo::RendererCreator *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::RendererCreator::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererCreator::getName",1,"Neo::RendererCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererCreator,0))){
    SWIG_fail_ptr("RendererCreator_getName",1,SWIGTYPE_p_Neo__RendererCreator);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererCreator_getNewRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererCreator *arg1 = (Neo::RendererCreator *) 0 ;
  Neo::Renderer *result = 0 ;
  
  SWIG_check_num_args("Neo::RendererCreator::getNewRenderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererCreator::getNewRenderer",1,"Neo::RendererCreator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererCreator,0))){
    SWIG_fail_ptr("RendererCreator_getNewRenderer",1,SWIGTYPE_p_Neo__RendererCreator);
  }
  
  result = (Neo::Renderer *)(arg1)->getNewRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Renderer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RendererCreator(void *obj) {
Neo::RendererCreator *arg1 = (Neo::RendererCreator *) obj;
delete arg1;
}
static int _proxy__wrap_new_RendererCreator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RendererCreator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RendererCreator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RendererCreator_methods[]= {
    { "setName", _wrap_RendererCreator_setName},
    { "getName", _wrap_RendererCreator_getName},
    { "getNewRenderer", _wrap_RendererCreator_getNewRenderer},
    {0,0}
};
static swig_lua_method swig_RendererCreator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RendererCreator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RendererCreator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RendererCreator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RendererCreator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RendererCreator_Sf_SwigStatic = {
    "RendererCreator",
    swig_RendererCreator_Sf_SwigStatic_methods,
    swig_RendererCreator_Sf_SwigStatic_attributes,
    swig_RendererCreator_Sf_SwigStatic_constants,
    swig_RendererCreator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RendererCreator_bases[] = {0};
static const char *swig_RendererCreator_base_names[] = {0};
static swig_lua_class _wrap_class_RendererCreator = { "RendererCreator", "RendererCreator", &SWIGTYPE_p_Neo__RendererCreator,_proxy__wrap_new_RendererCreator, swig_delete_RendererCreator, swig_RendererCreator_methods, swig_RendererCreator_attributes, &swig_RendererCreator_Sf_SwigStatic, swig_RendererCreator_meta, swig_RendererCreator_bases, swig_RendererCreator_base_names };

static int _wrap_new_RendererManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererManager *result = 0 ;
  
  SWIG_check_num_args("Neo::RendererManager::RendererManager",0,0)
  result = (Neo::RendererManager *)new Neo::RendererManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__RendererManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererManager_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererManager *arg1 = (Neo::RendererManager *) 0 ;
  
  SWIG_check_num_args("Neo::RendererManager::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererManager::clear",1,"Neo::RendererManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererManager,0))){
    SWIG_fail_ptr("RendererManager_clear",1,SWIGTYPE_p_Neo__RendererManager);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererManager_addRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererManager *arg1 = (Neo::RendererManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Renderer *(*arg3)(void) = (Neo::Renderer *(*)(void)) 0 ;
  
  SWIG_check_num_args("Neo::RendererManager::addRenderer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererManager::addRenderer",1,"Neo::RendererManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::RendererManager::addRenderer",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::RendererManager::addRenderer",3,"Neo::Renderer *(*)(void)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererManager,0))){
    SWIG_fail_ptr("RendererManager_addRenderer",1,SWIGTYPE_p_Neo__RendererManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_void__p_Neo__Renderer,0))){
    SWIG_fail_ptr("RendererManager_addRenderer",3,SWIGTYPE_p_f_void__p_Neo__Renderer);
  }
  
  (arg1)->addRenderer((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererManager_getRendererByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererManager *arg1 = (Neo::RendererManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::RendererCreator *result = 0 ;
  
  SWIG_check_num_args("Neo::RendererManager::getRendererByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererManager::getRendererByName",1,"Neo::RendererManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::RendererManager::getRendererByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererManager,0))){
    SWIG_fail_ptr("RendererManager_getRendererByName",1,SWIGTYPE_p_Neo__RendererManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::RendererCreator *)(arg1)->getRendererByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__RendererCreator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererManager_getRenderersNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererManager *arg1 = (Neo::RendererManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::RendererManager::getRenderersNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererManager::getRenderersNumber",1,"Neo::RendererManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererManager,0))){
    SWIG_fail_ptr("RendererManager_getRenderersNumber",1,SWIGTYPE_p_Neo__RendererManager);
  }
  
  result = (unsigned int)(arg1)->getRenderersNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RendererManager_getRendererByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::RendererManager *arg1 = (Neo::RendererManager *) 0 ;
  unsigned int arg2 ;
  Neo::RendererCreator *result = 0 ;
  
  SWIG_check_num_args("Neo::RendererManager::getRendererByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::RendererManager::getRendererByIndex",1,"Neo::RendererManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::RendererManager::getRendererByIndex",2,"unsigned int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__RendererManager,0))){
    SWIG_fail_ptr("RendererManager_getRendererByIndex",1,SWIGTYPE_p_Neo__RendererManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int const)lua_tonumber(L, 2);
  result = (Neo::RendererCreator *)(arg1)->getRendererByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__RendererCreator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RendererManager(void *obj) {
Neo::RendererManager *arg1 = (Neo::RendererManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_RendererManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RendererManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RendererManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RendererManager_methods[]= {
    { "clear", _wrap_RendererManager_clear},
    { "addRenderer", _wrap_RendererManager_addRenderer},
    { "getRendererByName", _wrap_RendererManager_getRendererByName},
    { "getRenderersNumber", _wrap_RendererManager_getRenderersNumber},
    { "getRendererByIndex", _wrap_RendererManager_getRendererByIndex},
    {0,0}
};
static swig_lua_method swig_RendererManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RendererManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RendererManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RendererManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RendererManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RendererManager_Sf_SwigStatic = {
    "RendererManager",
    swig_RendererManager_Sf_SwigStatic_methods,
    swig_RendererManager_Sf_SwigStatic_attributes,
    swig_RendererManager_Sf_SwigStatic_constants,
    swig_RendererManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RendererManager_bases[] = {0};
static const char *swig_RendererManager_base_names[] = {0};
static swig_lua_class _wrap_class_RendererManager = { "RendererManager", "RendererManager", &SWIGTYPE_p_Neo__RendererManager,_proxy__wrap_new_RendererManager, swig_delete_RendererManager, swig_RendererManager_methods, swig_RendererManager_attributes, &swig_RendererManager_Sf_SwigStatic, swig_RendererManager_meta, swig_RendererManager_bases, swig_RendererManager_base_names };

static int _wrap_new_Box3d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::Box3d",0,0)
  result = (Neo::Box3d *)new Neo::Box3d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Box3d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::Box3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Box3d::Box3d",1,"Neo::Box3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("new_Box3d",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (Neo::Box3d *)new Neo::Box3d((Neo::Box3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Box3d__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::Box3d",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Box3d::Box3d",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Box3d::Box3d",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Box3d",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("new_Box3d",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Neo::Box3d *)new Neo::Box3d((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Box3d(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Box3d__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Box3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Box3d__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Box3d__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Box3d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Box3d::Box3d()\n"
    "    Neo::Box3d::Box3d(Neo::Box3d const &)\n"
    "    Neo::Box3d::Box3d(Neo::Vector3 const &,Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Box3d_min_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Box3d::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::min",1,"Neo::Box3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Box3d::min",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_min_set",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Box3d_min_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->min = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_min_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::min",1,"Neo::Box3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_min_get",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->min);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_max_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::Box3d::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::max",1,"Neo::Box3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Box3d::max",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_max_set",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Box3d_max_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->max = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_max_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::Box3d::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::max",1,"Neo::Box3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_max_get",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->max);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_initFromPoints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::Box3d::initFromPoints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::initFromPoints",1,"Neo::Box3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Box3d::initFromPoints",2,"Neo::Vector3 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Box3d::initFromPoints",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_initFromPoints",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Box3d_initFromPoints",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->initFromPoints((Neo::Vector3 const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Box3d_isInCollisionWith(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Box3d *arg1 = (Neo::Box3d *) 0 ;
  Neo::Box3d *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Box3d::isInCollisionWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Box3d::isInCollisionWith",1,"Neo::Box3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Box3d::isInCollisionWith",2,"Neo::Box3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_isInCollisionWith",1,SWIGTYPE_p_Neo__Box3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Box3d,0))){
    SWIG_fail_ptr("Box3d_isInCollisionWith",2,SWIGTYPE_p_Neo__Box3d);
  }
  
  result = (bool)(arg1)->isInCollisionWith((Neo::Box3d const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Box3d(void *obj) {
Neo::Box3d *arg1 = (Neo::Box3d *) obj;
delete arg1;
}
static int _proxy__wrap_new_Box3d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Box3d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Box3d_attributes[] = {
    { "min", _wrap_Box3d_min_get, _wrap_Box3d_min_set },
    { "max", _wrap_Box3d_max_get, _wrap_Box3d_max_set },
    {0,0,0}
};
static swig_lua_method swig_Box3d_methods[]= {
    { "initFromPoints", _wrap_Box3d_initFromPoints},
    { "isInCollisionWith", _wrap_Box3d_isInCollisionWith},
    {0,0}
};
static swig_lua_method swig_Box3d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Box3d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Box3d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Box3d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Box3d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Box3d_Sf_SwigStatic = {
    "Box3d",
    swig_Box3d_Sf_SwigStatic_methods,
    swig_Box3d_Sf_SwigStatic_attributes,
    swig_Box3d_Sf_SwigStatic_constants,
    swig_Box3d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Box3d_bases[] = {0};
static const char *swig_Box3d_base_names[] = {0};
static swig_lua_class _wrap_class_Box3d = { "Box3d", "Box3d", &SWIGTYPE_p_Neo__Box3d,_proxy__wrap_new_Box3d, swig_delete_Box3d, swig_Box3d_methods, swig_Box3d_attributes, &swig_Box3d_Sf_SwigStatic, swig_Box3d_meta, swig_Box3d_bases, swig_Box3d_base_names };

static int _wrap_Frustum_makeVolume(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Frustum *arg1 = (Neo::Frustum *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::Frustum::makeVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Frustum::makeVolume",1,"Neo::Frustum *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Frustum::makeVolume",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Frustum,0))){
    SWIG_fail_ptr("Frustum_makeVolume",1,SWIGTYPE_p_Neo__Frustum);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Frustum_makeVolume",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->makeVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Frustum_isVolumePointsVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Frustum *arg1 = (Neo::Frustum *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("Neo::Frustum::isVolumePointsVisible",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Frustum::isVolumePointsVisible",1,"Neo::Frustum *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Frustum::isVolumePointsVisible",2,"Neo::Vector3 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Frustum::isVolumePointsVisible",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Frustum,0))){
    SWIG_fail_ptr("Frustum_isVolumePointsVisible",1,SWIGTYPE_p_Neo__Frustum);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Frustum_isVolumePointsVisible",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->isVolumePointsVisible(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Frustum(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Frustum *result = 0 ;
  
  SWIG_check_num_args("Neo::Frustum::Frustum",0,0)
  result = (Neo::Frustum *)new Neo::Frustum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Frustum,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Frustum(void *obj) {
Neo::Frustum *arg1 = (Neo::Frustum *) obj;
delete arg1;
}
static int _proxy__wrap_new_Frustum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Frustum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Frustum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Frustum_methods[]= {
    { "makeVolume", _wrap_Frustum_makeVolume},
    { "isVolumePointsVisible", _wrap_Frustum_isVolumePointsVisible},
    {0,0}
};
static swig_lua_method swig_Frustum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Frustum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Frustum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Frustum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Frustum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Frustum_Sf_SwigStatic = {
    "Frustum",
    swig_Frustum_Sf_SwigStatic_methods,
    swig_Frustum_Sf_SwigStatic_attributes,
    swig_Frustum_Sf_SwigStatic_constants,
    swig_Frustum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Frustum_bases[] = {0};
static const char *swig_Frustum_base_names[] = {0};
static swig_lua_class _wrap_class_Frustum = { "Frustum", "Frustum", &SWIGTYPE_p_Neo__Frustum,_proxy__wrap_new_Frustum, swig_delete_Frustum, swig_Frustum_methods, swig_Frustum_attributes, &swig_Frustum_Sf_SwigStatic, swig_Frustum_meta, swig_Frustum_bases, swig_Frustum_base_names };

static int _wrap_new_Character__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Character *result = 0 ;
  
  SWIG_check_num_args("Neo::Character::Character",0,0)
  result = (Neo::Character *)new Neo::Character();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Character,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Character__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  Neo::Vector2 *arg2 = 0 ;
  Neo::Vector2 *arg3 = 0 ;
  Neo::Vector2 *arg4 = 0 ;
  Neo::Character *result = 0 ;
  
  SWIG_check_num_args("Neo::Character::Character",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::Character::Character",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Character::Character",2,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Character::Character",3,"Neo::Vector2 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Neo::Character::Character",4,"Neo::Vector2 const &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Character",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Character",3,SWIGTYPE_p_Neo__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("new_Character",4,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (Neo::Character *)new Neo::Character(arg1,(Neo::Vector2 const &)*arg2,(Neo::Vector2 const &)*arg3,(Neo::Vector2 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Character,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Character(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Character__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_Character__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Character'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Character::Character()\n"
    "    Neo::Character::Character(float,Neo::Vector2 const &,Neo::Vector2 const &,Neo::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Character_getXAdvance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Character *arg1 = (Neo::Character *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Character::getXAdvance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Character::getXAdvance",1,"Neo::Character *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Character,0))){
    SWIG_fail_ptr("Character_getXAdvance",1,SWIGTYPE_p_Neo__Character);
  }
  
  result = (float)(arg1)->getXAdvance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_getOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Character *arg1 = (Neo::Character *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Character::getOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Character::getOffset",1,"Neo::Character const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Character,0))){
    SWIG_fail_ptr("Character_getOffset",1,SWIGTYPE_p_Neo__Character);
  }
  
  result = ((Neo::Character const *)arg1)->getOffset();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_getPos(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Character *arg1 = (Neo::Character *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Character::getPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Character::getPos",1,"Neo::Character const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Character,0))){
    SWIG_fail_ptr("Character_getPos",1,SWIGTYPE_p_Neo__Character);
  }
  
  result = ((Neo::Character const *)arg1)->getPos();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Character_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Character *arg1 = (Neo::Character *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Character::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Character::getScale",1,"Neo::Character const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Character,0))){
    SWIG_fail_ptr("Character_getScale",1,SWIGTYPE_p_Neo__Character);
  }
  
  result = ((Neo::Character const *)arg1)->getScale();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Character(void *obj) {
Neo::Character *arg1 = (Neo::Character *) obj;
delete arg1;
}
static int _proxy__wrap_new_Character(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Character);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Character_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Character_methods[]= {
    { "getXAdvance", _wrap_Character_getXAdvance},
    { "getOffset", _wrap_Character_getOffset},
    { "getPos", _wrap_Character_getPos},
    { "getScale", _wrap_Character_getScale},
    {0,0}
};
static swig_lua_method swig_Character_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Character_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Character_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Character_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Character_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Character_Sf_SwigStatic = {
    "Character",
    swig_Character_Sf_SwigStatic_methods,
    swig_Character_Sf_SwigStatic_attributes,
    swig_Character_Sf_SwigStatic_constants,
    swig_Character_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Character_bases[] = {0};
static const char *swig_Character_base_names[] = {0};
static swig_lua_class _wrap_class_Character = { "Character", "Character", &SWIGTYPE_p_Neo__Character,_proxy__wrap_new_Character, swig_delete_Character, swig_Character_methods, swig_Character_attributes, &swig_Character_Sf_SwigStatic, swig_Character_meta, swig_Character_bases, swig_Character_base_names };

static int _wrap_new_Font(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *result = 0 ;
  
  SWIG_check_num_args("Neo::Font::Font",0,0)
  result = (Neo::Font *)new Neo::Font();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Font,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *result = 0 ;
  
  SWIG_check_num_args("Neo::Font::getNew",0,0)
  result = (Neo::Font *)Neo::Font::getNew();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Font,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  
  SWIG_check_num_args("Neo::Font::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::destroy",1,"Neo::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_destroy",1,SWIGTYPE_p_Neo__Font);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_setTextureId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Font::setTextureId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::setTextureId",1,"Neo::Font *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Font::setTextureId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_setTextureId",1,SWIGTYPE_p_Neo__Font);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setTextureId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_setTextureWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Font::setTextureWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::setTextureWidth",1,"Neo::Font *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Font::setTextureWidth",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_setTextureWidth",1,SWIGTYPE_p_Neo__Font);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setTextureWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_setTextureHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Font::setTextureHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::setTextureHeight",1,"Neo::Font *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Font::setTextureHeight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_setTextureHeight",1,SWIGTYPE_p_Neo__Font);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setTextureHeight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getTextureId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Font::getTextureId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getTextureId",1,"Neo::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getTextureId",1,SWIGTYPE_p_Neo__Font);
  }
  
  result = (unsigned int)(arg1)->getTextureId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getTextureWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Font::getTextureWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getTextureWidth",1,"Neo::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getTextureWidth",1,SWIGTYPE_p_Neo__Font);
  }
  
  result = (unsigned int)(arg1)->getTextureWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getTextureHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Font::getTextureHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getTextureHeight",1,"Neo::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getTextureHeight",1,SWIGTYPE_p_Neo__Font);
  }
  
  result = (unsigned int)(arg1)->getTextureHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_setFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Font::setFontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::setFontSize",1,"Neo::Font *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Font::setFontSize",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_setFontSize",1,SWIGTYPE_p_Neo__Font);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setFontSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Font::getFontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getFontSize",1,"Neo::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getFontSize",1,SWIGTYPE_p_Neo__Font);
  }
  
  result = (unsigned int)(arg1)->getFontSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_setCharacter(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int arg2 ;
  Neo::Character *arg3 = 0 ;
  
  SWIG_check_num_args("Neo::Font::setCharacter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::setCharacter",1,"Neo::Font *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Font::setCharacter",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Font::setCharacter",3,"Neo::Character const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_setCharacter",1,SWIGTYPE_p_Neo__Font);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Character,0))){
    SWIG_fail_ptr("Font_setCharacter",3,SWIGTYPE_p_Neo__Character);
  }
  
  (arg1)->setCharacter(arg2,(Neo::Character const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getCharactersNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Font::getCharactersNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getCharactersNumber",1,"Neo::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getCharactersNumber",1,SWIGTYPE_p_Neo__Font);
  }
  
  result = (unsigned int)(arg1)->getCharactersNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getCharacter(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int arg2 ;
  Neo::Character *result = 0 ;
  
  SWIG_check_num_args("Neo::Font::getCharacter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getCharacter",1,"Neo::Font *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Font::getCharacter",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getCharacter",1,SWIGTYPE_p_Neo__Font);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Character *)(arg1)->getCharacter(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Character,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getCharacterByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  unsigned int arg2 ;
  Neo::Character *result = 0 ;
  
  SWIG_check_num_args("Neo::Font::getCharacterByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getCharacterByIndex",1,"Neo::Font *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Font::getCharacterByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getCharacterByIndex",1,SWIGTYPE_p_Neo__Font);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Character *)(arg1)->getCharacterByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Character,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Font_getCharacters(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  map< unsigned int,Neo::Character > *result = 0 ;
  
  SWIG_check_num_args("Neo::Font::getCharacters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Font::getCharacters",1,"Neo::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("Font_getCharacters",1,SWIGTYPE_p_Neo__Font);
  }
  
  result = (map< unsigned int,Neo::Character > *)(arg1)->getCharacters();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mapT_unsigned_int_Neo__Character_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Font(void *obj) {
Neo::Font *arg1 = (Neo::Font *) obj;
delete arg1;
}
static int _proxy__wrap_new_Font(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Font);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Font_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Font_methods[]= {
    { "destroy", _wrap_Font_destroy},
    { "setTextureId", _wrap_Font_setTextureId},
    { "setTextureWidth", _wrap_Font_setTextureWidth},
    { "setTextureHeight", _wrap_Font_setTextureHeight},
    { "getTextureId", _wrap_Font_getTextureId},
    { "getTextureWidth", _wrap_Font_getTextureWidth},
    { "getTextureHeight", _wrap_Font_getTextureHeight},
    { "setFontSize", _wrap_Font_setFontSize},
    { "getFontSize", _wrap_Font_getFontSize},
    { "setCharacter", _wrap_Font_setCharacter},
    { "getCharactersNumber", _wrap_Font_getCharactersNumber},
    { "getCharacter", _wrap_Font_getCharacter},
    { "getCharacterByIndex", _wrap_Font_getCharacterByIndex},
    { "getCharacters", _wrap_Font_getCharacters},
    {0,0}
};
static swig_lua_method swig_Font_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Font_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Font_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Font_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_Font_getNew},
    {0,0}
};
static swig_lua_class* swig_Font_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Font_Sf_SwigStatic = {
    "Font",
    swig_Font_Sf_SwigStatic_methods,
    swig_Font_Sf_SwigStatic_attributes,
    swig_Font_Sf_SwigStatic_constants,
    swig_Font_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Font_bases[] = {0};
static const char *swig_Font_base_names[] = {0};
static swig_lua_class _wrap_class_Font = { "Font", "Font", &SWIGTYPE_p_Neo__Font,_proxy__wrap_new_Font, swig_delete_Font, swig_Font_methods, swig_Font_attributes, &swig_Font_Sf_SwigStatic, swig_Font_meta, swig_Font_bases, swig_Font_base_names };

static int _wrap_new_Texture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  Neo::Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Texture::Texture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::Texture",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("new_Texture",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (Neo::Texture *)new Neo::Texture(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Texture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Texture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = 0 ;
  Neo::Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Texture::Texture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Texture::Texture",1,"Neo::Texture const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("new_Texture",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (Neo::Texture *)new Neo::Texture((Neo::Texture const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Texture,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Texture(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__TextureRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Texture__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Texture__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Texture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Texture::Texture(Neo::TextureRef *)\n"
    "    Neo::Texture::Texture(Neo::Texture const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Texture_setTextureRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::Texture::setTextureRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTextureRef",1,"Neo::Texture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Texture::setTextureRef",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTextureRef",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("Texture_setTextureRef",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->setTextureRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTextureRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Texture::getTextureRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTextureRef",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTextureRef",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (Neo::TextureRef *)(arg1)->getTextureRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setGenMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TEX_GEN_MODES arg2 ;
  
  SWIG_check_num_args("Neo::Texture::setGenMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setGenMode",1,"Neo::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Texture::setGenMode",2,"Neo::TEX_GEN_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setGenMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  arg2 = (Neo::TEX_GEN_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setGenMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getGenMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TEX_GEN_MODES result;
  
  SWIG_check_num_args("Neo::Texture::getGenMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getGenMode",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getGenMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (Neo::TEX_GEN_MODES)(arg1)->getGenMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setUWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  SWIG_check_num_args("Neo::Texture::setUWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setUWrapMode",1,"Neo::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Texture::setUWrapMode",2,"Neo::WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setUWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  arg2 = (Neo::WRAP_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setUWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setVWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES arg2 ;
  
  SWIG_check_num_args("Neo::Texture::setVWrapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setVWrapMode",1,"Neo::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Texture::setVWrapMode",2,"Neo::WRAP_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setVWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  arg2 = (Neo::WRAP_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setVWrapMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getUWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES result;
  
  SWIG_check_num_args("Neo::Texture::getUWrapMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getUWrapMode",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getUWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (Neo::WRAP_MODES)(arg1)->getUWrapMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getVWrapMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::WRAP_MODES result;
  
  SWIG_check_num_args("Neo::Texture::getVWrapMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getVWrapMode",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getVWrapMode",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (Neo::WRAP_MODES)(arg1)->getVWrapMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setTexTranslate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Texture::setTexTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTexTranslate",1,"Neo::Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Texture::setTexTranslate",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTexTranslate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Texture_setTexTranslate",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->setTexTranslate((Neo::Vector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setTexScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Texture::setTexScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTexScale",1,"Neo::Texture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Texture::setTexScale",2,"Neo::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTexScale",1,SWIGTYPE_p_Neo__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Texture_setTexScale",2,SWIGTYPE_p_Neo__Vector2);
  }
  
  (arg1)->setTexScale((Neo::Vector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_setTexRotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Texture::setTexRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::setTexRotate",1,"Neo::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Texture::setTexRotate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_setTexRotate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setTexRotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTexTranslate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Texture::getTexTranslate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTexTranslate",1,"Neo::Texture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTexTranslate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = ((Neo::Texture const *)arg1)->getTexTranslate();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTexScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo::Texture::getTexScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTexScale",1,"Neo::Texture const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTexScale",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = ((Neo::Texture const *)arg1)->getTexScale();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Texture_getTexRotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Texture::getTexRotate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Texture::getTexRotate",1,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Texture_getTexRotate",1,SWIGTYPE_p_Neo__Texture);
  }
  
  result = (float)(arg1)->getTexRotate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Texture(void *obj) {
Neo::Texture *arg1 = (Neo::Texture *) obj;
delete arg1;
}
static int _proxy__wrap_new_Texture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Texture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Texture_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Texture_methods[]= {
    { "setTextureRef", _wrap_Texture_setTextureRef},
    { "getTextureRef", _wrap_Texture_getTextureRef},
    { "setGenMode", _wrap_Texture_setGenMode},
    { "getGenMode", _wrap_Texture_getGenMode},
    { "setUWrapMode", _wrap_Texture_setUWrapMode},
    { "setVWrapMode", _wrap_Texture_setVWrapMode},
    { "getUWrapMode", _wrap_Texture_getUWrapMode},
    { "getVWrapMode", _wrap_Texture_getVWrapMode},
    { "setTexTranslate", _wrap_Texture_setTexTranslate},
    { "setTexScale", _wrap_Texture_setTexScale},
    { "setTexRotate", _wrap_Texture_setTexRotate},
    { "getTexTranslate", _wrap_Texture_getTexTranslate},
    { "getTexScale", _wrap_Texture_getTexScale},
    { "getTexRotate", _wrap_Texture_getTexRotate},
    {0,0}
};
static swig_lua_method swig_Texture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Texture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Texture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Texture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Texture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Texture_Sf_SwigStatic = {
    "Texture",
    swig_Texture_Sf_SwigStatic_methods,
    swig_Texture_Sf_SwigStatic_attributes,
    swig_Texture_Sf_SwigStatic_constants,
    swig_Texture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Texture_bases[] = {0};
static const char *swig_Texture_base_names[] = {0};
static swig_lua_class _wrap_class_Texture = { "Texture", "Texture", &SWIGTYPE_p_Neo__Texture,_proxy__wrap_new_Texture, swig_delete_Texture, swig_Texture_methods, swig_Texture_attributes, &swig_Texture_Sf_SwigStatic, swig_Texture_meta, swig_Texture_bases, swig_Texture_base_names };

static int _wrap_new_TexturePass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Texture *arg1 = (Neo::Texture *) 0 ;
  Neo::TEX_COMBINE_MODES arg2 ;
  unsigned int arg3 ;
  Neo::TexturePass *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::TexturePass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::TexturePass",1,"Neo::Texture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TexturePass::TexturePass",2,"Neo::TEX_COMBINE_MODES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::TexturePass::TexturePass",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("new_TexturePass",1,SWIGTYPE_p_Neo__Texture);
  }
  
  arg2 = (Neo::TEX_COMBINE_MODES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Neo::TexturePass *)new Neo::TexturePass(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturePass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TexturePass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = 0 ;
  Neo::TexturePass *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::TexturePass",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::TexturePass::TexturePass",1,"Neo::TexturePass const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("new_TexturePass",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (Neo::TexturePass *)new Neo::TexturePass((Neo::TexturePass const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturePass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TexturePass(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__TexturePass, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TexturePass__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Texture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TexturePass__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TexturePass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::TexturePass::TexturePass(Neo::Texture *,Neo::TEX_COMBINE_MODES,unsigned int)\n"
    "    Neo::TexturePass::TexturePass(Neo::TexturePass const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TexturePass_setMapChannel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TexturePass::setMapChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::setMapChannel",1,"Neo::TexturePass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TexturePass::setMapChannel",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_setMapChannel",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setMapChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_setTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Neo::Texture *arg2 = (Neo::Texture *) 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::setTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::setTexture",1,"Neo::TexturePass *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::TexturePass::setTexture",2,"Neo::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_setTexture",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("TexturePass_setTexture",2,SWIGTYPE_p_Neo__Texture);
  }
  
  (arg1)->setTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_getMapChannel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TexturePass::getMapChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::getMapChannel",1,"Neo::TexturePass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_getMapChannel",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (unsigned int)(arg1)->getMapChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_getTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Neo::Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturePass::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::getTexture",1,"Neo::TexturePass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_getTexture",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (Neo::Texture *)(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_setCombineMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Neo::TEX_COMBINE_MODES arg2 ;
  
  SWIG_check_num_args("Neo::TexturePass::setCombineMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::setCombineMode",1,"Neo::TexturePass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TexturePass::setCombineMode",2,"Neo::TEX_COMBINE_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_setCombineMode",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  arg2 = (Neo::TEX_COMBINE_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setCombineMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturePass_getCombineMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturePass *arg1 = (Neo::TexturePass *) 0 ;
  Neo::TEX_COMBINE_MODES result;
  
  SWIG_check_num_args("Neo::TexturePass::getCombineMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturePass::getCombineMode",1,"Neo::TexturePass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturePass,0))){
    SWIG_fail_ptr("TexturePass_getCombineMode",1,SWIGTYPE_p_Neo__TexturePass);
  }
  
  result = (Neo::TEX_COMBINE_MODES)(arg1)->getCombineMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TexturePass(void *obj) {
Neo::TexturePass *arg1 = (Neo::TexturePass *) obj;
delete arg1;
}
static int _proxy__wrap_new_TexturePass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TexturePass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TexturePass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TexturePass_methods[]= {
    { "setMapChannel", _wrap_TexturePass_setMapChannel},
    { "setTexture", _wrap_TexturePass_setTexture},
    { "getMapChannel", _wrap_TexturePass_getMapChannel},
    { "getTexture", _wrap_TexturePass_getTexture},
    { "setCombineMode", _wrap_TexturePass_setCombineMode},
    { "getCombineMode", _wrap_TexturePass_getCombineMode},
    {0,0}
};
static swig_lua_method swig_TexturePass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TexturePass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TexturePass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TexturePass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TexturePass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TexturePass_Sf_SwigStatic = {
    "TexturePass",
    swig_TexturePass_Sf_SwigStatic_methods,
    swig_TexturePass_Sf_SwigStatic_attributes,
    swig_TexturePass_Sf_SwigStatic_constants,
    swig_TexturePass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TexturePass_bases[] = {0};
static const char *swig_TexturePass_base_names[] = {0};
static swig_lua_class _wrap_class_TexturePass = { "TexturePass", "TexturePass", &SWIGTYPE_p_Neo__TexturePass,_proxy__wrap_new_TexturePass, swig_delete_TexturePass, swig_TexturePass_methods, swig_TexturePass_attributes, &swig_TexturePass_Sf_SwigStatic, swig_TexturePass_meta, swig_TexturePass_bases, swig_TexturePass_base_names };

static int _wrap_new_Material__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::Material",0,0)
  result = (Neo::Material *)new Neo::Material();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Material__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = 0 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::Material",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Material::Material",1,"Neo::Material const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("new_Material",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (Neo::Material *)new Neo::Material((Neo::Material const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Material(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Material__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Material, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Material__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Material'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Material::Material()\n"
    "    Neo::Material::Material(Neo::Material const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Material_setType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Material::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setType",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setType",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Material::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getType",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getType",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::FXRef *arg2 = (Neo::FXRef *) 0 ;
  
  SWIG_check_num_args("Neo::Material::setFXRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setFXRef",1,"Neo::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Material::setFXRef",2,"Neo::FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FXRef,0))){
    SWIG_fail_ptr("Material_setFXRef",2,SWIGTYPE_p_Neo__FXRef);
  }
  
  (arg1)->setFXRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setZFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::FXRef *arg2 = (Neo::FXRef *) 0 ;
  
  SWIG_check_num_args("Neo::Material::setZFXRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setZFXRef",1,"Neo::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Material::setZFXRef",2,"Neo::FXRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setZFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FXRef,0))){
    SWIG_fail_ptr("Material_setZFXRef",2,SWIGTYPE_p_Neo__FXRef);
  }
  
  (arg1)->setZFXRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::getFXRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getFXRef",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (Neo::FXRef *)(arg1)->getFXRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getZFXRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::getZFXRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getZFXRef",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getZFXRef",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (Neo::FXRef *)(arg1)->getZFXRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setBlendMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::BLENDING_MODES arg2 ;
  
  SWIG_check_num_args("Neo::Material::setBlendMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setBlendMode",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setBlendMode",2,"Neo::BLENDING_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setBlendMode",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (Neo::BLENDING_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setBlendMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getBlendMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::BLENDING_MODES result;
  
  SWIG_check_num_args("Neo::Material::getBlendMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getBlendMode",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getBlendMode",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (Neo::BLENDING_MODES)(arg1)->getBlendMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setOpacity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Material::setOpacity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setOpacity",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setOpacity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setOpacity",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setOpacity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setShininess(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Material::setShininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setShininess",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setShininess",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setShininess",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShininess(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setCustomValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::Material::setCustomValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setCustomValue",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::setCustomValue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setCustomValue",1,SWIGTYPE_p_Neo__Material);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCustomValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setDiffuse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setDiffuse",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setDiffuse",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setDiffuse",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setDiffuse",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setDiffuse((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setSpecular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setSpecular",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setSpecular",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setSpecular",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setSpecular",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setSpecular((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setEmit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setEmit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setEmit",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setEmit",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setEmit",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setEmit",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setEmit((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_setCustomColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Material::setCustomColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::setCustomColor",1,"Neo::Material *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Material::setCustomColor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_setCustomColor",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Material_setCustomColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setCustomColor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getOpacity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Material::getOpacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getOpacity",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getOpacity",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (float)(arg1)->getOpacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getShininess(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Material::getShininess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getShininess",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getShininess",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (float)(arg1)->getShininess();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getCustomValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::Material::getCustomValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getCustomValue",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getCustomValue",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (float)(arg1)->getCustomValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getEmit(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getEmit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getEmit",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getEmit",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getEmit();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getDiffuse(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getDiffuse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getDiffuse",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getDiffuse",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getDiffuse();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getSpecular(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getSpecular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getSpecular",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getSpecular",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getSpecular();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getCustomColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Material::getCustomColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getCustomColor",1,"Neo::Material const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getCustomColor",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = ((Neo::Material const *)arg1)->getCustomColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_allocTexturesPass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Material::allocTexturesPass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::allocTexturesPass",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::allocTexturesPass",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_allocTexturesPass",1,SWIGTYPE_p_Neo__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocTexturesPass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_clearTexturesPass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  
  SWIG_check_num_args("Neo::Material::clearTexturesPass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::clearTexturesPass",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_clearTexturesPass",1,SWIGTYPE_p_Neo__Material);
  }
  
  (arg1)->clearTexturesPass();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_addTexturePass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  Neo::Texture *arg2 = (Neo::Texture *) 0 ;
  Neo::TEX_COMBINE_MODES arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Neo::Material::addTexturePass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::addTexturePass",1,"Neo::Material *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Material::addTexturePass",2,"Neo::Texture *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Material::addTexturePass",3,"Neo::TEX_COMBINE_MODES");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::Material::addTexturePass",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_addTexturePass",1,SWIGTYPE_p_Neo__Material);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Texture,0))){
    SWIG_fail_ptr("Material_addTexturePass",2,SWIGTYPE_p_Neo__Texture);
  }
  
  arg3 = (Neo::TEX_COMBINE_MODES)(int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->addTexturePass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getTexturesPassNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Material::getTexturesPassNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getTexturesPassNumber",1,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getTexturesPassNumber",1,SWIGTYPE_p_Neo__Material);
  }
  
  result = (unsigned int)(arg1)->getTexturesPassNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Material_getTexturePass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Material *arg1 = (Neo::Material *) 0 ;
  unsigned int arg2 ;
  Neo::TexturePass *result = 0 ;
  
  SWIG_check_num_args("Neo::Material::getTexturePass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Material::getTexturePass",1,"Neo::Material *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Material::getTexturePass",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("Material_getTexturePass",1,SWIGTYPE_p_Neo__Material);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::TexturePass *)(arg1)->getTexturePass(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturePass,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Material(void *obj) {
Neo::Material *arg1 = (Neo::Material *) obj;
delete arg1;
}
static int _proxy__wrap_new_Material(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Material);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Material_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Material_methods[]= {
    { "setType", _wrap_Material_setType},
    { "getType", _wrap_Material_getType},
    { "setFXRef", _wrap_Material_setFXRef},
    { "setZFXRef", _wrap_Material_setZFXRef},
    { "getFXRef", _wrap_Material_getFXRef},
    { "getZFXRef", _wrap_Material_getZFXRef},
    { "setBlendMode", _wrap_Material_setBlendMode},
    { "getBlendMode", _wrap_Material_getBlendMode},
    { "setOpacity", _wrap_Material_setOpacity},
    { "setShininess", _wrap_Material_setShininess},
    { "setCustomValue", _wrap_Material_setCustomValue},
    { "setDiffuse", _wrap_Material_setDiffuse},
    { "setSpecular", _wrap_Material_setSpecular},
    { "setEmit", _wrap_Material_setEmit},
    { "setCustomColor", _wrap_Material_setCustomColor},
    { "getOpacity", _wrap_Material_getOpacity},
    { "getShininess", _wrap_Material_getShininess},
    { "getCustomValue", _wrap_Material_getCustomValue},
    { "getEmit", _wrap_Material_getEmit},
    { "getDiffuse", _wrap_Material_getDiffuse},
    { "getSpecular", _wrap_Material_getSpecular},
    { "getCustomColor", _wrap_Material_getCustomColor},
    { "allocTexturesPass", _wrap_Material_allocTexturesPass},
    { "clearTexturesPass", _wrap_Material_clearTexturesPass},
    { "addTexturePass", _wrap_Material_addTexturePass},
    { "getTexturesPassNumber", _wrap_Material_getTexturesPassNumber},
    { "getTexturePass", _wrap_Material_getTexturePass},
    {0,0}
};
static swig_lua_method swig_Material_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Material_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Material_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Material_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Material_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Material_Sf_SwigStatic = {
    "Material",
    swig_Material_Sf_SwigStatic_methods,
    swig_Material_Sf_SwigStatic_attributes,
    swig_Material_Sf_SwigStatic_constants,
    swig_Material_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Material_bases[] = {0};
static const char *swig_Material_base_names[] = {0};
static swig_lua_class _wrap_class_Material = { "Material", "Material", &SWIGTYPE_p_Neo__Material,_proxy__wrap_new_Material, swig_delete_Material, swig_Material_methods, swig_Material_attributes, &swig_Material_Sf_SwigStatic, swig_Material_meta, swig_Material_bases, swig_Material_base_names };

static int _wrap_new_Armature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::Armature",0,0)
  result = (Neo::Armature *)new Neo::Armature();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Armature,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_clearBones(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::clearBones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::clearBones",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_clearBones",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->clearBones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_allocBones(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Armature::allocBones",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::allocBones",1,"Neo::Armature *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Armature::allocBones",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_allocBones",1,SWIGTYPE_p_Neo__Armature);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocBones(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBoneId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Armature::getBoneId",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBoneId",1,"Neo::Armature *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Armature::getBoneId",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Armature::getBoneId",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBoneId",1,SWIGTYPE_p_Neo__Armature);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Armature_getBoneId",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->getBoneId((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_addNewBone(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::addNewBone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::addNewBone",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_addNewBone",1,SWIGTYPE_p_Neo__Armature);
  }
  
  result = (Neo::OBone *)(arg1)->addNewBone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBoneByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::getBoneByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBoneByName",1,"Neo::Armature *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Armature::getBoneByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBoneByName",1,SWIGTYPE_p_Neo__Armature);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OBone *)(arg1)->getBoneByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBonesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Armature::getBonesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBonesNumber",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBonesNumber",1,SWIGTYPE_p_Neo__Armature);
  }
  
  result = (unsigned int)(arg1)->getBonesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_getBone(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  unsigned int arg2 ;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::Armature::getBone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::getBone",1,"Neo::Armature *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Armature::getBone",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_getBone",1,SWIGTYPE_p_Neo__Armature);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OBone *)(arg1)->getBone(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_constructBonesInversePoseMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::constructBonesInversePoseMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::constructBonesInversePoseMatrix",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_constructBonesInversePoseMatrix",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->constructBonesInversePoseMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_updateBonesSkinMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::updateBonesSkinMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::updateBonesSkinMatrix",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_updateBonesSkinMatrix",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->updateBonesSkinMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Armature_processBonesLinking(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  
  SWIG_check_num_args("Neo::Armature::processBonesLinking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Armature::processBonesLinking",1,"Neo::Armature *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("Armature_processBonesLinking",1,SWIGTYPE_p_Neo__Armature);
  }
  
  (arg1)->processBonesLinking();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Armature(void *obj) {
Neo::Armature *arg1 = (Neo::Armature *) obj;
delete arg1;
}
static int _proxy__wrap_new_Armature(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Armature);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Armature_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Armature_methods[]= {
    { "clearBones", _wrap_Armature_clearBones},
    { "allocBones", _wrap_Armature_allocBones},
    { "getBoneId", _wrap_Armature_getBoneId},
    { "addNewBone", _wrap_Armature_addNewBone},
    { "getBoneByName", _wrap_Armature_getBoneByName},
    { "getBonesNumber", _wrap_Armature_getBonesNumber},
    { "getBone", _wrap_Armature_getBone},
    { "constructBonesInversePoseMatrix", _wrap_Armature_constructBonesInversePoseMatrix},
    { "updateBonesSkinMatrix", _wrap_Armature_updateBonesSkinMatrix},
    { "processBonesLinking", _wrap_Armature_processBonesLinking},
    {0,0}
};
static swig_lua_method swig_Armature_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Armature_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Armature_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Armature_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Armature_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Armature_Sf_SwigStatic = {
    "Armature",
    swig_Armature_Sf_SwigStatic_methods,
    swig_Armature_Sf_SwigStatic_attributes,
    swig_Armature_Sf_SwigStatic_constants,
    swig_Armature_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Armature_bases[] = {0};
static const char *swig_Armature_base_names[] = {0};
static swig_lua_class _wrap_class_Armature = { "Armature", "Armature", &SWIGTYPE_p_Neo__Armature,_proxy__wrap_new_Armature, swig_delete_Armature, swig_Armature_methods, swig_Armature_attributes, &swig_Armature_Sf_SwigStatic, swig_Armature_meta, swig_Armature_bases, swig_Armature_base_names };

static int _wrap_new_MorphingPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingPoint *result = 0 ;
  
  SWIG_check_num_args("Neo::MorphingPoint::MorphingPoint",0,0)
  result = (Neo::MorphingPoint *)new Neo::MorphingPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingPoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingPoint_getVertexId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingPoint *arg1 = (Neo::MorphingPoint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MorphingPoint::getVertexId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingPoint::getVertexId",1,"Neo::MorphingPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingPoint,0))){
    SWIG_fail_ptr("MorphingPoint_getVertexId",1,SWIGTYPE_p_Neo__MorphingPoint);
  }
  
  result = (unsigned int)(arg1)->getVertexId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MorphingPoint(void *obj) {
Neo::MorphingPoint *arg1 = (Neo::MorphingPoint *) obj;
delete arg1;
}
static int _proxy__wrap_new_MorphingPoint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MorphingPoint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MorphingPoint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MorphingPoint_methods[]= {
    { "getVertexId", _wrap_MorphingPoint_getVertexId},
    {0,0}
};
static swig_lua_method swig_MorphingPoint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MorphingPoint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MorphingPoint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MorphingPoint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MorphingPoint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MorphingPoint_Sf_SwigStatic = {
    "MorphingPoint",
    swig_MorphingPoint_Sf_SwigStatic_methods,
    swig_MorphingPoint_Sf_SwigStatic_attributes,
    swig_MorphingPoint_Sf_SwigStatic_constants,
    swig_MorphingPoint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MorphingPoint_bases[] = {0};
static const char *swig_MorphingPoint_base_names[] = {0};
static swig_lua_class _wrap_class_MorphingPoint = { "MorphingPoint", "MorphingPoint", &SWIGTYPE_p_Neo__MorphingPoint,_proxy__wrap_new_MorphingPoint, swig_delete_MorphingPoint, swig_MorphingPoint_methods, swig_MorphingPoint_attributes, &swig_MorphingPoint_Sf_SwigStatic, swig_MorphingPoint_meta, swig_MorphingPoint_bases, swig_MorphingPoint_base_names };

static int _wrap_new_MorphingPose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingPose *result = 0 ;
  
  SWIG_check_num_args("Neo::MorphingPose::MorphingPose",0,0)
  result = (Neo::MorphingPose *)new Neo::MorphingPose();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingPose,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingPose_clearPoints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingPose *arg1 = (Neo::MorphingPose *) 0 ;
  
  SWIG_check_num_args("Neo::MorphingPose::clearPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingPose::clearPoints",1,"Neo::MorphingPose *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingPose,0))){
    SWIG_fail_ptr("MorphingPose_clearPoints",1,SWIGTYPE_p_Neo__MorphingPose);
  }
  
  (arg1)->clearPoints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingPose_allocPoints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingPose *arg1 = (Neo::MorphingPose *) 0 ;
  unsigned int arg2 ;
  Neo::MorphingPoint *result = 0 ;
  
  SWIG_check_num_args("Neo::MorphingPose::allocPoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingPose::allocPoints",1,"Neo::MorphingPose *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MorphingPose::allocPoints",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingPose,0))){
    SWIG_fail_ptr("MorphingPose_allocPoints",1,SWIGTYPE_p_Neo__MorphingPose);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::MorphingPoint *)(arg1)->allocPoints(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingPose_getPointsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingPose *arg1 = (Neo::MorphingPose *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MorphingPose::getPointsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingPose::getPointsNumber",1,"Neo::MorphingPose *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingPose,0))){
    SWIG_fail_ptr("MorphingPose_getPointsNumber",1,SWIGTYPE_p_Neo__MorphingPose);
  }
  
  result = (unsigned int)(arg1)->getPointsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingPose_getPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingPose *arg1 = (Neo::MorphingPose *) 0 ;
  unsigned int arg2 ;
  Neo::MorphingPoint *result = 0 ;
  
  SWIG_check_num_args("Neo::MorphingPose::getPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingPose::getPoint",1,"Neo::MorphingPose *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MorphingPose::getPoint",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingPose,0))){
    SWIG_fail_ptr("MorphingPose_getPoint",1,SWIGTYPE_p_Neo__MorphingPose);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::MorphingPoint *)(arg1)->getPoint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MorphingPose(void *obj) {
Neo::MorphingPose *arg1 = (Neo::MorphingPose *) obj;
delete arg1;
}
static int _proxy__wrap_new_MorphingPose(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MorphingPose);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MorphingPose_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MorphingPose_methods[]= {
    { "clearPoints", _wrap_MorphingPose_clearPoints},
    { "allocPoints", _wrap_MorphingPose_allocPoints},
    { "getPointsNumber", _wrap_MorphingPose_getPointsNumber},
    { "getPoint", _wrap_MorphingPose_getPoint},
    {0,0}
};
static swig_lua_method swig_MorphingPose_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MorphingPose_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MorphingPose_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MorphingPose_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MorphingPose_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MorphingPose_Sf_SwigStatic = {
    "MorphingPose",
    swig_MorphingPose_Sf_SwigStatic_methods,
    swig_MorphingPose_Sf_SwigStatic_attributes,
    swig_MorphingPose_Sf_SwigStatic_constants,
    swig_MorphingPose_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MorphingPose_bases[] = {0};
static const char *swig_MorphingPose_base_names[] = {0};
static swig_lua_class _wrap_class_MorphingPose = { "MorphingPose", "MorphingPose", &SWIGTYPE_p_Neo__MorphingPose,_proxy__wrap_new_MorphingPose, swig_delete_MorphingPose, swig_MorphingPose_methods, swig_MorphingPose_attributes, &swig_MorphingPose_Sf_SwigStatic, swig_MorphingPose_meta, swig_MorphingPose_bases, swig_MorphingPose_base_names };

static int _wrap_new_MorphingData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingData *result = 0 ;
  
  SWIG_check_num_args("Neo::MorphingData::MorphingData",0,0)
  result = (Neo::MorphingData *)new Neo::MorphingData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingData_allocPoses(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingData *arg1 = (Neo::MorphingData *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::MorphingData::allocPoses",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingData::allocPoses",1,"Neo::MorphingData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MorphingData::allocPoses",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingData,0))){
    SWIG_fail_ptr("MorphingData_allocPoses",1,SWIGTYPE_p_Neo__MorphingData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocPoses(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingData_clearPoses(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingData *arg1 = (Neo::MorphingData *) 0 ;
  
  SWIG_check_num_args("Neo::MorphingData::clearPoses",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingData::clearPoses",1,"Neo::MorphingData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingData,0))){
    SWIG_fail_ptr("MorphingData_clearPoses",1,SWIGTYPE_p_Neo__MorphingData);
  }
  
  (arg1)->clearPoses();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingData_addPose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingData *arg1 = (Neo::MorphingData *) 0 ;
  Neo::MorphingPose *arg2 = (Neo::MorphingPose *) 0 ;
  
  SWIG_check_num_args("Neo::MorphingData::addPose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingData::addPose",1,"Neo::MorphingData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::MorphingData::addPose",2,"Neo::MorphingPose *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingData,0))){
    SWIG_fail_ptr("MorphingData_addPose",1,SWIGTYPE_p_Neo__MorphingData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MorphingPose,0))){
    SWIG_fail_ptr("MorphingData_addPose",2,SWIGTYPE_p_Neo__MorphingPose);
  }
  
  (arg1)->addPose(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingData_getPosesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingData *arg1 = (Neo::MorphingData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MorphingData::getPosesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingData::getPosesNumber",1,"Neo::MorphingData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingData,0))){
    SWIG_fail_ptr("MorphingData_getPosesNumber",1,SWIGTYPE_p_Neo__MorphingData);
  }
  
  result = (unsigned int)(arg1)->getPosesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MorphingData_getPose(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MorphingData *arg1 = (Neo::MorphingData *) 0 ;
  unsigned int arg2 ;
  Neo::MorphingPose *result = 0 ;
  
  SWIG_check_num_args("Neo::MorphingData::getPose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MorphingData::getPose",1,"Neo::MorphingData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MorphingData::getPose",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MorphingData,0))){
    SWIG_fail_ptr("MorphingData_getPose",1,SWIGTYPE_p_Neo__MorphingData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::MorphingPose *)(arg1)->getPose(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingPose,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MorphingData(void *obj) {
Neo::MorphingData *arg1 = (Neo::MorphingData *) obj;
delete arg1;
}
static int _proxy__wrap_new_MorphingData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MorphingData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MorphingData_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MorphingData_methods[]= {
    { "allocPoses", _wrap_MorphingData_allocPoses},
    { "clearPoses", _wrap_MorphingData_clearPoses},
    { "addPose", _wrap_MorphingData_addPose},
    { "getPosesNumber", _wrap_MorphingData_getPosesNumber},
    { "getPose", _wrap_MorphingData_getPose},
    {0,0}
};
static swig_lua_method swig_MorphingData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MorphingData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MorphingData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MorphingData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MorphingData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MorphingData_Sf_SwigStatic = {
    "MorphingData",
    swig_MorphingData_Sf_SwigStatic_methods,
    swig_MorphingData_Sf_SwigStatic_attributes,
    swig_MorphingData_Sf_SwigStatic_constants,
    swig_MorphingData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MorphingData_bases[] = {0};
static const char *swig_MorphingData_base_names[] = {0};
static swig_lua_class _wrap_class_MorphingData = { "MorphingData", "MorphingData", &SWIGTYPE_p_Neo__MorphingData,_proxy__wrap_new_MorphingData, swig_delete_MorphingData, swig_MorphingData_methods, swig_MorphingData_attributes, &swig_MorphingData_Sf_SwigStatic, swig_MorphingData_meta, swig_MorphingData_bases, swig_MorphingData_base_names };

static int _wrap_new_SkinPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *result = 0 ;
  
  SWIG_check_num_args("Neo::SkinPoint::SkinPoint",0,0)
  result = (Neo::SkinPoint *)new Neo::SkinPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SkinPoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinPoint_clearBonesLinks(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *arg1 = (Neo::SkinPoint *) 0 ;
  
  SWIG_check_num_args("Neo::SkinPoint::clearBonesLinks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinPoint::clearBonesLinks",1,"Neo::SkinPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinPoint,0))){
    SWIG_fail_ptr("SkinPoint_clearBonesLinks",1,SWIGTYPE_p_Neo__SkinPoint);
  }
  
  (arg1)->clearBonesLinks();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinPoint_allocateBonesLinks(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *arg1 = (Neo::SkinPoint *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::SkinPoint::allocateBonesLinks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinPoint::allocateBonesLinks",1,"Neo::SkinPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SkinPoint::allocateBonesLinks",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinPoint,0))){
    SWIG_fail_ptr("SkinPoint_allocateBonesLinks",1,SWIGTYPE_p_Neo__SkinPoint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->allocateBonesLinks(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinPoint_getBonesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *arg1 = (Neo::SkinPoint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SkinPoint::getBonesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinPoint::getBonesNumber",1,"Neo::SkinPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinPoint,0))){
    SWIG_fail_ptr("SkinPoint_getBonesNumber",1,SWIGTYPE_p_Neo__SkinPoint);
  }
  
  result = (unsigned int)(arg1)->getBonesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinPoint_getBonesIds(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *arg1 = (Neo::SkinPoint *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("Neo::SkinPoint::getBonesIds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinPoint::getBonesIds",1,"Neo::SkinPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinPoint,0))){
    SWIG_fail_ptr("SkinPoint_getBonesIds",1,SWIGTYPE_p_Neo__SkinPoint);
  }
  
  result = (unsigned short *)(arg1)->getBonesIds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinPoint_getBonesWeights(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *arg1 = (Neo::SkinPoint *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Neo::SkinPoint::getBonesWeights",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinPoint::getBonesWeights",1,"Neo::SkinPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinPoint,0))){
    SWIG_fail_ptr("SkinPoint_getBonesWeights",1,SWIGTYPE_p_Neo__SkinPoint);
  }
  
  result = (float *)(arg1)->getBonesWeights();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinPoint_setVertexId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *arg1 = (Neo::SkinPoint *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SkinPoint::setVertexId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinPoint::setVertexId",1,"Neo::SkinPoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SkinPoint::setVertexId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinPoint,0))){
    SWIG_fail_ptr("SkinPoint_setVertexId",1,SWIGTYPE_p_Neo__SkinPoint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setVertexId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinPoint_getVertexId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinPoint *arg1 = (Neo::SkinPoint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SkinPoint::getVertexId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinPoint::getVertexId",1,"Neo::SkinPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinPoint,0))){
    SWIG_fail_ptr("SkinPoint_getVertexId",1,SWIGTYPE_p_Neo__SkinPoint);
  }
  
  result = (unsigned int)(arg1)->getVertexId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SkinPoint(void *obj) {
Neo::SkinPoint *arg1 = (Neo::SkinPoint *) obj;
delete arg1;
}
static int _proxy__wrap_new_SkinPoint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SkinPoint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SkinPoint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SkinPoint_methods[]= {
    { "clearBonesLinks", _wrap_SkinPoint_clearBonesLinks},
    { "allocateBonesLinks", _wrap_SkinPoint_allocateBonesLinks},
    { "getBonesNumber", _wrap_SkinPoint_getBonesNumber},
    { "getBonesIds", _wrap_SkinPoint_getBonesIds},
    { "getBonesWeights", _wrap_SkinPoint_getBonesWeights},
    { "setVertexId", _wrap_SkinPoint_setVertexId},
    { "getVertexId", _wrap_SkinPoint_getVertexId},
    {0,0}
};
static swig_lua_method swig_SkinPoint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SkinPoint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SkinPoint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SkinPoint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SkinPoint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SkinPoint_Sf_SwigStatic = {
    "SkinPoint",
    swig_SkinPoint_Sf_SwigStatic_methods,
    swig_SkinPoint_Sf_SwigStatic_attributes,
    swig_SkinPoint_Sf_SwigStatic_constants,
    swig_SkinPoint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SkinPoint_bases[] = {0};
static const char *swig_SkinPoint_base_names[] = {0};
static swig_lua_class _wrap_class_SkinPoint = { "SkinPoint", "SkinPoint", &SWIGTYPE_p_Neo__SkinPoint,_proxy__wrap_new_SkinPoint, swig_delete_SkinPoint, swig_SkinPoint_methods, swig_SkinPoint_attributes, &swig_SkinPoint_Sf_SwigStatic, swig_SkinPoint_meta, swig_SkinPoint_bases, swig_SkinPoint_base_names };

static int _wrap_new_SkinData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinData *result = 0 ;
  
  SWIG_check_num_args("Neo::SkinData::SkinData",0,0)
  result = (Neo::SkinData *)new Neo::SkinData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SkinData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinData_clearPoints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinData *arg1 = (Neo::SkinData *) 0 ;
  
  SWIG_check_num_args("Neo::SkinData::clearPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinData::clearPoints",1,"Neo::SkinData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinData,0))){
    SWIG_fail_ptr("SkinData_clearPoints",1,SWIGTYPE_p_Neo__SkinData);
  }
  
  (arg1)->clearPoints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinData_allocPoints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinData *arg1 = (Neo::SkinData *) 0 ;
  unsigned int arg2 ;
  Neo::SkinPoint *result = 0 ;
  
  SWIG_check_num_args("Neo::SkinData::allocPoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinData::allocPoints",1,"Neo::SkinData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SkinData::allocPoints",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinData,0))){
    SWIG_fail_ptr("SkinData_allocPoints",1,SWIGTYPE_p_Neo__SkinData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::SkinPoint *)(arg1)->allocPoints(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SkinPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinData_getPointsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinData *arg1 = (Neo::SkinData *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SkinData::getPointsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinData::getPointsNumber",1,"Neo::SkinData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinData,0))){
    SWIG_fail_ptr("SkinData_getPointsNumber",1,SWIGTYPE_p_Neo__SkinData);
  }
  
  result = (unsigned int)(arg1)->getPointsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkinData_getPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SkinData *arg1 = (Neo::SkinData *) 0 ;
  unsigned int arg2 ;
  Neo::SkinPoint *result = 0 ;
  
  SWIG_check_num_args("Neo::SkinData::getPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SkinData::getPoint",1,"Neo::SkinData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SkinData::getPoint",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SkinData,0))){
    SWIG_fail_ptr("SkinData_getPoint",1,SWIGTYPE_p_Neo__SkinData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::SkinPoint *)(arg1)->getPoint(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SkinPoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SkinData(void *obj) {
Neo::SkinData *arg1 = (Neo::SkinData *) obj;
delete arg1;
}
static int _proxy__wrap_new_SkinData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SkinData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SkinData_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SkinData_methods[]= {
    { "clearPoints", _wrap_SkinData_clearPoints},
    { "allocPoints", _wrap_SkinData_allocPoints},
    { "getPointsNumber", _wrap_SkinData_getPointsNumber},
    { "getPoint", _wrap_SkinData_getPoint},
    {0,0}
};
static swig_lua_method swig_SkinData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SkinData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SkinData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SkinData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SkinData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SkinData_Sf_SwigStatic = {
    "SkinData",
    swig_SkinData_Sf_SwigStatic_methods,
    swig_SkinData_Sf_SwigStatic_attributes,
    swig_SkinData_Sf_SwigStatic_constants,
    swig_SkinData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SkinData_bases[] = {0};
static const char *swig_SkinData_base_names[] = {0};
static swig_lua_class _wrap_class_SkinData = { "SkinData", "SkinData", &SWIGTYPE_p_Neo__SkinData,_proxy__wrap_new_SkinData, swig_delete_SkinData, swig_SkinData_methods, swig_SkinData_attributes, &swig_SkinData_Sf_SwigStatic, swig_SkinData_meta, swig_SkinData_bases, swig_SkinData_base_names };

static int _wrap_new_MaterialDisplay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PRIMITIVE_TYPES arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::MaterialDisplay",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",1,"Neo::PRIMITIVE_TYPES");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",3,"unsigned int");
  arg1 = (Neo::PRIMITIVE_TYPES)(int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Neo::MaterialDisplay *)new Neo::MaterialDisplay(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaterialDisplay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = 0 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::MaterialDisplay",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::MaterialDisplay",1,"Neo::MaterialDisplay const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("new_MaterialDisplay",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (Neo::MaterialDisplay *)new Neo::MaterialDisplay((Neo::MaterialDisplay const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaterialDisplay(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__MaterialDisplay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MaterialDisplay__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_MaterialDisplay__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MaterialDisplay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::MaterialDisplay::MaterialDisplay(Neo::PRIMITIVE_TYPES,unsigned int,unsigned int)\n"
    "    Neo::MaterialDisplay::MaterialDisplay(Neo::MaterialDisplay const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MaterialDisplay_getPrimitiveType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::PRIMITIVE_TYPES result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getPrimitiveType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getPrimitiveType",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getPrimitiveType",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (Neo::PRIMITIVE_TYPES)(arg1)->getPrimitiveType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getBegin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getBegin",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getBegin",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (unsigned int)(arg1)->getBegin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getSize",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getSize",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (unsigned int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_setCullMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::CULL_MODES arg2 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::setCullMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::setCullMode",1,"Neo::MaterialDisplay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::setCullMode",2,"Neo::CULL_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_setCullMode",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  arg2 = (Neo::CULL_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setCullMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getCullMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::CULL_MODES result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getCullMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getCullMode",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getCullMode",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (Neo::CULL_MODES)(arg1)->getCullMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_setMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::Material *arg2 = (Neo::Material *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::setMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::setMaterial",1,"Neo::MaterialDisplay *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::setMaterial",2,"Neo::Material *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_setMaterial",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Material,0))){
    SWIG_fail_ptr("MaterialDisplay_setMaterial",2,SWIGTYPE_p_Neo__Material);
  }
  
  (arg1)->setMaterial(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getMaterial",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getMaterial",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (Neo::Material *)(arg1)->getMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_setVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::setVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::setVisibility",1,"Neo::MaterialDisplay *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::setVisibility",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_setVisibility",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::isVisible",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_isVisible",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (bool)(arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getVAO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getVAO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getVAO",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getVAO",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (unsigned int *)(arg1)->getVAO();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_setMaterialId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::MaterialDisplay::setMaterialId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::setMaterialId",1,"Neo::MaterialDisplay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::MaterialDisplay::setMaterialId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_setMaterialId",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setMaterialId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialDisplay_getMaterialId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::MaterialDisplay::getMaterialId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialDisplay::getMaterialId",1,"Neo::MaterialDisplay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialDisplay,0))){
    SWIG_fail_ptr("MaterialDisplay_getMaterialId",1,SWIGTYPE_p_Neo__MaterialDisplay);
  }
  
  result = (unsigned int)(arg1)->getMaterialId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MaterialDisplay(void *obj) {
Neo::MaterialDisplay *arg1 = (Neo::MaterialDisplay *) obj;
delete arg1;
}
static int _proxy__wrap_new_MaterialDisplay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MaterialDisplay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MaterialDisplay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaterialDisplay_methods[]= {
    { "getPrimitiveType", _wrap_MaterialDisplay_getPrimitiveType},
    { "getBegin", _wrap_MaterialDisplay_getBegin},
    { "getSize", _wrap_MaterialDisplay_getSize},
    { "setCullMode", _wrap_MaterialDisplay_setCullMode},
    { "getCullMode", _wrap_MaterialDisplay_getCullMode},
    { "setMaterial", _wrap_MaterialDisplay_setMaterial},
    { "getMaterial", _wrap_MaterialDisplay_getMaterial},
    { "setVisibility", _wrap_MaterialDisplay_setVisibility},
    { "isVisible", _wrap_MaterialDisplay_isVisible},
    { "getVAO", _wrap_MaterialDisplay_getVAO},
    { "setMaterialId", _wrap_MaterialDisplay_setMaterialId},
    { "getMaterialId", _wrap_MaterialDisplay_getMaterialId},
    {0,0}
};
static swig_lua_method swig_MaterialDisplay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaterialDisplay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaterialDisplay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaterialDisplay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MaterialDisplay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaterialDisplay_Sf_SwigStatic = {
    "MaterialDisplay",
    swig_MaterialDisplay_Sf_SwigStatic_methods,
    swig_MaterialDisplay_Sf_SwigStatic_attributes,
    swig_MaterialDisplay_Sf_SwigStatic_constants,
    swig_MaterialDisplay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaterialDisplay_bases[] = {0};
static const char *swig_MaterialDisplay_base_names[] = {0};
static swig_lua_class _wrap_class_MaterialDisplay = { "MaterialDisplay", "MaterialDisplay", &SWIGTYPE_p_Neo__MaterialDisplay,_proxy__wrap_new_MaterialDisplay, swig_delete_MaterialDisplay, swig_MaterialDisplay_methods, swig_MaterialDisplay_attributes, &swig_MaterialDisplay_Sf_SwigStatic, swig_MaterialDisplay_meta, swig_MaterialDisplay_bases, swig_MaterialDisplay_base_names };

static int _wrap_new_SubMesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::SubMesh",0,0)
  result = (Neo::SubMesh *)new Neo::SubMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SubMesh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearMorphingData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearMorphingData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearMorphingData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearMorphingData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearMorphingData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_createMorphingData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::MorphingData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::createMorphingData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::createMorphingData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_createMorphingData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::MorphingData *)(arg1)->createMorphingData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getMorphingData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::MorphingData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getMorphingData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getMorphingData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getMorphingData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::MorphingData *)(arg1)->getMorphingData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MorphingData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearSkinData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearSkinData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearSkinData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearSkinData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearSkinData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_createSkinData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::SkinData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::createSkinData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::createSkinData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_createSkinData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::SkinData *)(arg1)->createSkinData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SkinData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getSkinData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::SkinData *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getSkinData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getSkinData",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getSkinData",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::SkinData *)(arg1)->getSkinData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SkinData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearIndices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearIndices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearIndices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearIndices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearVertices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearVertices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearVertices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearVertices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearNormals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearNormals",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearNormals",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearNormals();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearTangents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearTangents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearTangents",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearTangents",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearTangents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearTexCoords",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearTexCoords",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearTexCoords();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearColors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearColors",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearColors",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearColors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocIndices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::VAR_TYPES arg3 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocIndices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocIndices",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocIndices",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SubMesh::allocIndices",3,"Neo::VAR_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocIndices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 3);
  result = (void *)(arg1)->allocIndices(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocColors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocColors",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocColors",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocColors",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Color *)(arg1)->allocColors(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocVertices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocVertices",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocVertices",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocVertices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector3 *)(arg1)->allocVertices(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocNormals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocNormals",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocNormals",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocNormals",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector3 *)(arg1)->allocNormals(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocTangents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocTangents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocTangents",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocTangents",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocTangents",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector3 *)(arg1)->allocTangents(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocTexCoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocTexCoords",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocTexCoords",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocTexCoords",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Vector2 *)(arg1)->allocTexCoords(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getIndicesSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getIndicesSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getIndicesSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getIndicesSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getIndicesSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVerticesSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getVerticesSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVerticesSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVerticesSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getVerticesSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getNormalsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getNormalsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getNormalsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getNormalsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getNormalsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTangentsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getTangentsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTangentsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTangentsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getTangentsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTexCoordsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getTexCoordsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTexCoordsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTexCoordsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getTexCoordsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getColorsSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getColorsSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getColorsSize",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getColorsSize",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getColorsSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getIndicesType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::VAR_TYPES result;
  
  SWIG_check_num_args("Neo::SubMesh::getIndicesType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getIndicesType",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getIndicesType",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::VAR_TYPES)(arg1)->getIndicesType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getIndices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getIndices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getIndices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (void *)(arg1)->getIndices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getColors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Color *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getColors",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getColors",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Color *)(arg1)->getColors();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVertices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVertices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVertices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getNormals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getNormals",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getNormals",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getNormals();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTangents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getTangents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTangents",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTangents",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getTangents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getTexCoords",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getTexCoords",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector2 *)(arg1)->getTexCoords();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getSkinVertices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getSkinVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getSkinVertices",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getSkinVertices",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getSkinVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getSkinNormals(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getSkinNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getSkinNormals",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getSkinNormals",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getSkinNormals();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getSkinTangents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getSkinTangents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getSkinTangents",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getSkinTangents",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Vector3 *)(arg1)->getSkinTangents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVertex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  size_t arg2 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVertex",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::getVertex",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVertex",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Neo::Vector3 *)(arg1)->getVertex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getIndex",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::getIndex",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getIndex",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearVBO(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearVBO",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearVBO",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearVBO",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearVBO();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVBOid1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getVBOid1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVBOid1",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVBOid1",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int *)(arg1)->getVBOid1();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getVBOid2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getVBOid2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getVBOid2",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getVBOid2",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int *)(arg1)->getVBOid2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearMapChannelOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearMapChannelOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearMapChannelOffset",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearMapChannelOffset",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearMapChannelOffset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_setMapChannelOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::SubMesh::setMapChannelOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::setMapChannelOffset",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::setMapChannelOffset",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SubMesh::setMapChannelOffset",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_setMapChannelOffset",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setMapChannelOffset(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_isMapChannelExist(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  SWIG_check_num_args("Neo::SubMesh::isMapChannelExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::isMapChannelExist",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::isMapChannelExist",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_isMapChannelExist",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isMapChannelExist(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getMapChannelOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getMapChannelOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getMapChannelOffset",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::getMapChannelOffset",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getMapChannelOffset",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->getMapChannelOffset(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getMapChannelOffsets(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  map< unsigned int,unsigned int > *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getMapChannelOffsets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getMapChannelOffsets",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getMapChannelOffsets",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (map< unsigned int,unsigned int > *)(arg1)->getMapChannelOffsets();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mapT_unsigned_int_unsigned_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_allocDisplays(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SubMesh::allocDisplays",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::allocDisplays",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::allocDisplays",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_allocDisplays",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocDisplays(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_clearDisplays(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::clearDisplays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::clearDisplays",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_clearDisplays",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  (arg1)->clearDisplays();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_addNewDisplay(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::addNewDisplay",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",2,"Neo::PRIMITIVE_TYPES");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::SubMesh::addNewDisplay",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_addNewDisplay",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  arg2 = (Neo::PRIMITIVE_TYPES)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Neo::MaterialDisplay *)(arg1)->addNewDisplay(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getDisplaysNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SubMesh::getDisplaysNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getDisplaysNumber",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getDisplaysNumber",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (unsigned int)(arg1)->getDisplaysNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getDisplay(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  unsigned int arg2 ;
  Neo::MaterialDisplay *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getDisplay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getDisplay",1,"Neo::SubMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SubMesh::getDisplay",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getDisplay",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::MaterialDisplay *)(arg1)->getDisplay(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialDisplay,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::SubMesh::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::getBoundingBox",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_getBoundingBox",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (Neo::Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubMesh_hasTransparency(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubMesh *arg1 = (Neo::SubMesh *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::SubMesh::hasTransparency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubMesh::hasTransparency",1,"Neo::SubMesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubMesh,0))){
    SWIG_fail_ptr("SubMesh_hasTransparency",1,SWIGTYPE_p_Neo__SubMesh);
  }
  
  result = (bool)(arg1)->hasTransparency();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SubMesh(void *obj) {
Neo::SubMesh *arg1 = (Neo::SubMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_SubMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SubMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SubMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SubMesh_methods[]= {
    { "clearMorphingData", _wrap_SubMesh_clearMorphingData},
    { "createMorphingData", _wrap_SubMesh_createMorphingData},
    { "getMorphingData", _wrap_SubMesh_getMorphingData},
    { "clearSkinData", _wrap_SubMesh_clearSkinData},
    { "createSkinData", _wrap_SubMesh_createSkinData},
    { "getSkinData", _wrap_SubMesh_getSkinData},
    { "clearIndices", _wrap_SubMesh_clearIndices},
    { "clearVertices", _wrap_SubMesh_clearVertices},
    { "clearNormals", _wrap_SubMesh_clearNormals},
    { "clearTangents", _wrap_SubMesh_clearTangents},
    { "clearTexCoords", _wrap_SubMesh_clearTexCoords},
    { "clearColors", _wrap_SubMesh_clearColors},
    { "allocIndices", _wrap_SubMesh_allocIndices},
    { "allocColors", _wrap_SubMesh_allocColors},
    { "allocVertices", _wrap_SubMesh_allocVertices},
    { "allocNormals", _wrap_SubMesh_allocNormals},
    { "allocTangents", _wrap_SubMesh_allocTangents},
    { "allocTexCoords", _wrap_SubMesh_allocTexCoords},
    { "getIndicesSize", _wrap_SubMesh_getIndicesSize},
    { "getVerticesSize", _wrap_SubMesh_getVerticesSize},
    { "getNormalsSize", _wrap_SubMesh_getNormalsSize},
    { "getTangentsSize", _wrap_SubMesh_getTangentsSize},
    { "getTexCoordsSize", _wrap_SubMesh_getTexCoordsSize},
    { "getColorsSize", _wrap_SubMesh_getColorsSize},
    { "getIndicesType", _wrap_SubMesh_getIndicesType},
    { "getIndices", _wrap_SubMesh_getIndices},
    { "getColors", _wrap_SubMesh_getColors},
    { "getVertices", _wrap_SubMesh_getVertices},
    { "getNormals", _wrap_SubMesh_getNormals},
    { "getTangents", _wrap_SubMesh_getTangents},
    { "getTexCoords", _wrap_SubMesh_getTexCoords},
    { "getSkinVertices", _wrap_SubMesh_getSkinVertices},
    { "getSkinNormals", _wrap_SubMesh_getSkinNormals},
    { "getSkinTangents", _wrap_SubMesh_getSkinTangents},
    { "getVertex", _wrap_SubMesh_getVertex},
    { "getIndex", _wrap_SubMesh_getIndex},
    { "clearVBO", _wrap_SubMesh_clearVBO},
    { "getVBOid1", _wrap_SubMesh_getVBOid1},
    { "getVBOid2", _wrap_SubMesh_getVBOid2},
    { "clearMapChannelOffset", _wrap_SubMesh_clearMapChannelOffset},
    { "setMapChannelOffset", _wrap_SubMesh_setMapChannelOffset},
    { "isMapChannelExist", _wrap_SubMesh_isMapChannelExist},
    { "getMapChannelOffset", _wrap_SubMesh_getMapChannelOffset},
    { "getMapChannelOffsets", _wrap_SubMesh_getMapChannelOffsets},
    { "allocDisplays", _wrap_SubMesh_allocDisplays},
    { "clearDisplays", _wrap_SubMesh_clearDisplays},
    { "addNewDisplay", _wrap_SubMesh_addNewDisplay},
    { "getDisplaysNumber", _wrap_SubMesh_getDisplaysNumber},
    { "getDisplay", _wrap_SubMesh_getDisplay},
    { "getBoundingBox", _wrap_SubMesh_getBoundingBox},
    { "hasTransparency", _wrap_SubMesh_hasTransparency},
    {0,0}
};
static swig_lua_method swig_SubMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SubMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SubMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SubMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SubMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SubMesh_Sf_SwigStatic = {
    "SubMesh",
    swig_SubMesh_Sf_SwigStatic_methods,
    swig_SubMesh_Sf_SwigStatic_attributes,
    swig_SubMesh_Sf_SwigStatic_constants,
    swig_SubMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SubMesh_bases[] = {0};
static const char *swig_SubMesh_base_names[] = {0};
static swig_lua_class _wrap_class_SubMesh = { "SubMesh", "SubMesh", &SWIGTYPE_p_Neo__SubMesh,_proxy__wrap_new_SubMesh, swig_delete_SubMesh, swig_SubMesh_methods, swig_SubMesh_attributes, &swig_SubMesh_Sf_SwigStatic, swig_SubMesh_meta, swig_SubMesh_bases, swig_SubMesh_base_names };

static int _wrap_new_AnimRange(lua_State* L) {
  int SWIG_arg = 0;
  Neo::AnimRange *result = 0 ;
  
  SWIG_check_num_args("Neo::AnimRange::AnimRange",0,0)
  result = (Neo::AnimRange *)new Neo::AnimRange();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__AnimRange,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimRange_loops_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::AnimRange *arg1 = (Neo::AnimRange *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::AnimRange::loops",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::AnimRange::loops",1,"Neo::AnimRange *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::AnimRange::loops",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__AnimRange,0))){
    SWIG_fail_ptr("AnimRange_loops_set",1,SWIGTYPE_p_Neo__AnimRange);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->loops = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnimRange_loops_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::AnimRange *arg1 = (Neo::AnimRange *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::AnimRange::loops",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::AnimRange::loops",1,"Neo::AnimRange *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__AnimRange,0))){
    SWIG_fail_ptr("AnimRange_loops_get",1,SWIGTYPE_p_Neo__AnimRange);
  }
  
  result = (int) ((arg1)->loops);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnimRange(void *obj) {
Neo::AnimRange *arg1 = (Neo::AnimRange *) obj;
delete arg1;
}
static int _proxy__wrap_new_AnimRange(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AnimRange);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AnimRange_attributes[] = {
    { "loops", _wrap_AnimRange_loops_get, _wrap_AnimRange_loops_set },
    {0,0,0}
};
static swig_lua_method swig_AnimRange_methods[]= {
    {0,0}
};
static swig_lua_method swig_AnimRange_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AnimRange_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AnimRange_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AnimRange_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AnimRange_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AnimRange_Sf_SwigStatic = {
    "AnimRange",
    swig_AnimRange_Sf_SwigStatic_methods,
    swig_AnimRange_Sf_SwigStatic_attributes,
    swig_AnimRange_Sf_SwigStatic_constants,
    swig_AnimRange_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AnimRange_bases[] = {0,0};
static const char *swig_AnimRange_base_names[] = {"Neo::Range *",0};
static swig_lua_class _wrap_class_AnimRange = { "AnimRange", "AnimRange", &SWIGTYPE_p_Neo__AnimRange,_proxy__wrap_new_AnimRange, swig_delete_AnimRange, swig_AnimRange_methods, swig_AnimRange_attributes, &swig_AnimRange_Sf_SwigStatic, swig_AnimRange_meta, swig_AnimRange_bases, swig_AnimRange_base_names };

static int _wrap_new_Mesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::Mesh",0,0)
  result = (Neo::Mesh *)new Neo::Mesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Mesh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getNew",0,0)
  result = (Neo::Mesh *)Neo::Mesh::getNew();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Mesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::destroy",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_destroy",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clear",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clear",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearAnimsRanges(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearAnimsRanges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearAnimsRanges",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearAnimsRanges",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearAnimsRanges();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocAnimsRanges(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::AnimRange *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::allocAnimsRanges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocAnimsRanges",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocAnimsRanges",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocAnimsRanges",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::AnimRange *)(arg1)->allocAnimsRanges(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__AnimRange,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getAnimsRangesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getAnimsRangesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getAnimsRangesNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getAnimsRangesNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getAnimsRangesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getAnimsRanges(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::AnimRange *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getAnimsRanges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getAnimsRanges",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getAnimsRanges",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::AnimRange *)(arg1)->getAnimsRanges();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__AnimRange,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_setArmatureAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::ArmatureAnimRef *arg2 = (Neo::ArmatureAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::setArmatureAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::setArmatureAnimRef",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::setArmatureAnimRef",2,"Neo::ArmatureAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_setArmatureAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ArmatureAnimRef,0))){
    SWIG_fail_ptr("Mesh_setArmatureAnimRef",2,SWIGTYPE_p_Neo__ArmatureAnimRef);
  }
  
  (arg1)->setArmatureAnimRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getArmatureAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getArmatureAnimRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getArmatureAnimRef",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getArmatureAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::ArmatureAnimRef *)(arg1)->getArmatureAnimRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getArmatureAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::ArmatureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getArmatureAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getArmatureAnim",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getArmatureAnim",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::ArmatureAnim *)(arg1)->getArmatureAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_setTexturesAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnimRef *arg2 = (Neo::TexturesAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::setTexturesAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::setTexturesAnimRef",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::setTexturesAnimRef",2,"Neo::TexturesAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_setTexturesAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TexturesAnimRef,0))){
    SWIG_fail_ptr("Mesh_setTexturesAnimRef",2,SWIGTYPE_p_Neo__TexturesAnimRef);
  }
  
  (arg1)->setTexturesAnimRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexturesAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getTexturesAnimRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexturesAnimRef",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexturesAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::TexturesAnimRef *)(arg1)->getTexturesAnimRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexturesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getTexturesAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexturesAnim",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexturesAnim",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::TexturesAnim *)(arg1)->getTexturesAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_setMaterialsAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnimRef *arg2 = (Neo::MaterialsAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::setMaterialsAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::setMaterialsAnimRef",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::setMaterialsAnimRef",2,"Neo::MaterialsAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_setMaterialsAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MaterialsAnimRef,0))){
    SWIG_fail_ptr("Mesh_setMaterialsAnimRef",2,SWIGTYPE_p_Neo__MaterialsAnimRef);
  }
  
  (arg1)->setMaterialsAnimRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterialsAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getMaterialsAnimRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterialsAnimRef",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterialsAnimRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::MaterialsAnimRef *)(arg1)->getMaterialsAnimRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterialsAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getMaterialsAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterialsAnim",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterialsAnim",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::MaterialsAnim *)(arg1)->getMaterialsAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearArmature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearArmature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearArmature",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearArmature",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearArmature();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_createArmature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::Armature *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::createArmature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::createArmature",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_createArmature",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::Armature *)(arg1)->createArmature();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Armature,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getArmature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::Armature *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getArmature",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getArmature",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getArmature",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::Armature *)(arg1)->getArmature();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Armature,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocTextures(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Mesh::allocTextures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocTextures",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocTextures",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocTextures",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocTextures(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearTextures(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearTextures",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearTextures",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearTextures();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_addNewTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  Neo::Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::addNewTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::addNewTexture",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Mesh::addNewTexture",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_addNewTexture",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("Mesh_addNewTexture",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (Neo::Texture *)(arg1)->addNewTexture(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexturesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getTexturesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexturesNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexturesNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getTexturesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::Texture *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getTexture",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::getTexture",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getTexture",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Texture *)(arg1)->getTexture(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocMaterials(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Mesh::allocMaterials",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocMaterials",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocMaterials",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocMaterials",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->allocMaterials(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearMaterials(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearMaterials",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearMaterials",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearMaterials",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearMaterials();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_addNewMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::addNewMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::addNewMaterial",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_addNewMaterial",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::Material *)(arg1)->addNewMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterialsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getMaterialsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterialsNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterialsNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getMaterialsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getMaterial",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::getMaterial",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getMaterial",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Material *)(arg1)->getMaterial(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_clearSubMeshs(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::clearSubMeshs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::clearSubMeshs",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_clearSubMeshs",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->clearSubMeshs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_allocSubMeshs(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int arg2 ;
  Neo::SubMesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::allocSubMeshs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::allocSubMeshs",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::allocSubMeshs",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_allocSubMeshs",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::SubMesh *)(arg1)->allocSubMeshs(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SubMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getSubMeshsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Mesh::getSubMeshsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getSubMeshsNumber",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getSubMeshsNumber",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (unsigned int)(arg1)->getSubMeshsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getSubMeshs(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::SubMesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getSubMeshs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getSubMeshs",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getSubMeshs",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::SubMesh *)(arg1)->getSubMeshs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SubMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getSubMesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  size_t arg2 ;
  Neo::SubMesh *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getSubMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getSubMesh",1,"Neo::Mesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Mesh::getSubMesh",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getSubMesh",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Neo::SubMesh *)(arg1)->getSubMesh(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SubMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_updateBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  
  SWIG_check_num_args("Neo::Mesh::updateBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::updateBoundingBox",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_updateBoundingBox",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  (arg1)->updateBoundingBox();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Mesh::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Mesh::getBoundingBox",1,"Neo::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("Mesh_getBoundingBox",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  result = (Neo::Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mesh(void *obj) {
Neo::Mesh *arg1 = (Neo::Mesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_Mesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Mesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Mesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mesh_methods[]= {
    { "destroy", _wrap_Mesh_destroy},
    { "clear", _wrap_Mesh_clear},
    { "clearAnimsRanges", _wrap_Mesh_clearAnimsRanges},
    { "allocAnimsRanges", _wrap_Mesh_allocAnimsRanges},
    { "getAnimsRangesNumber", _wrap_Mesh_getAnimsRangesNumber},
    { "getAnimsRanges", _wrap_Mesh_getAnimsRanges},
    { "setArmatureAnimRef", _wrap_Mesh_setArmatureAnimRef},
    { "getArmatureAnimRef", _wrap_Mesh_getArmatureAnimRef},
    { "getArmatureAnim", _wrap_Mesh_getArmatureAnim},
    { "setTexturesAnimRef", _wrap_Mesh_setTexturesAnimRef},
    { "getTexturesAnimRef", _wrap_Mesh_getTexturesAnimRef},
    { "getTexturesAnim", _wrap_Mesh_getTexturesAnim},
    { "setMaterialsAnimRef", _wrap_Mesh_setMaterialsAnimRef},
    { "getMaterialsAnimRef", _wrap_Mesh_getMaterialsAnimRef},
    { "getMaterialsAnim", _wrap_Mesh_getMaterialsAnim},
    { "clearArmature", _wrap_Mesh_clearArmature},
    { "createArmature", _wrap_Mesh_createArmature},
    { "getArmature", _wrap_Mesh_getArmature},
    { "allocTextures", _wrap_Mesh_allocTextures},
    { "clearTextures", _wrap_Mesh_clearTextures},
    { "addNewTexture", _wrap_Mesh_addNewTexture},
    { "getTexturesNumber", _wrap_Mesh_getTexturesNumber},
    { "getTexture", _wrap_Mesh_getTexture},
    { "allocMaterials", _wrap_Mesh_allocMaterials},
    { "clearMaterials", _wrap_Mesh_clearMaterials},
    { "addNewMaterial", _wrap_Mesh_addNewMaterial},
    { "getMaterialsNumber", _wrap_Mesh_getMaterialsNumber},
    { "getMaterial", _wrap_Mesh_getMaterial},
    { "clearSubMeshs", _wrap_Mesh_clearSubMeshs},
    { "allocSubMeshs", _wrap_Mesh_allocSubMeshs},
    { "getSubMeshsNumber", _wrap_Mesh_getSubMeshsNumber},
    { "getSubMeshs", _wrap_Mesh_getSubMeshs},
    { "getSubMesh", _wrap_Mesh_getSubMesh},
    { "updateBoundingBox", _wrap_Mesh_updateBoundingBox},
    { "getBoundingBox", _wrap_Mesh_getBoundingBox},
    {0,0}
};
static swig_lua_method swig_Mesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Mesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Mesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Mesh_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_Mesh_getNew},
    {0,0}
};
static swig_lua_class* swig_Mesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Mesh_Sf_SwigStatic = {
    "Mesh",
    swig_Mesh_Sf_SwigStatic_methods,
    swig_Mesh_Sf_SwigStatic_attributes,
    swig_Mesh_Sf_SwigStatic_constants,
    swig_Mesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Mesh_bases[] = {0};
static const char *swig_Mesh_base_names[] = {0};
static swig_lua_class _wrap_class_Mesh = { "Mesh", "Mesh", &SWIGTYPE_p_Neo__Mesh,_proxy__wrap_new_Mesh, swig_delete_Mesh, swig_Mesh_methods, swig_Mesh_attributes, &swig_Mesh_Sf_SwigStatic, swig_Mesh_meta, swig_Mesh_bases, swig_Mesh_base_names };

static int _wrap_animateFloat(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::animateFloat",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::animateFloat",1,"Neo::Key *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::animateFloat",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::animateFloat",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::animateFloat",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("animateFloat",1,SWIGTYPE_p_Neo__Key);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("animateFloat",4,SWIGTYPE_p_float);
  }
  
  result = (bool)Neo::animateFloat(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animateVector2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  Neo::Vector2 *arg4 = (Neo::Vector2 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::animateVector2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::animateVector2",1,"Neo::Key *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::animateVector2",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::animateVector2",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::animateVector2",4,"Neo::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("animateVector2",1,SWIGTYPE_p_Neo__Key);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("animateVector2",4,SWIGTYPE_p_Neo__Vector2);
  }
  
  result = (bool)Neo::animateVector2(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animateVector3(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  Neo::Vector3 *arg4 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::animateVector3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::animateVector3",1,"Neo::Key *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::animateVector3",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::animateVector3",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::animateVector3",4,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("animateVector3",1,SWIGTYPE_p_Neo__Key);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("animateVector3",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::animateVector3(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animateQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Key *arg1 = (Neo::Key *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  Neo::Quaternion *arg4 = (Neo::Quaternion *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::animateQuaternion",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::animateQuaternion",1,"Neo::Key *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::animateQuaternion",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::animateQuaternion",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::animateQuaternion",4,"Neo::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Key,0))){
    SWIG_fail_ptr("animateQuaternion",1,SWIGTYPE_p_Neo__Key);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("animateQuaternion",4,SWIGTYPE_p_Neo__Quaternion);
  }
  
  result = (bool)Neo::animateQuaternion(arg1,arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animateArmature(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  Neo::ArmatureAnim *arg2 = (Neo::ArmatureAnim *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::animateArmature",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::animateArmature",1,"Neo::Armature *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::animateArmature",2,"Neo::ArmatureAnim *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::animateArmature",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("animateArmature",1,SWIGTYPE_p_Neo__Armature);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("animateArmature",2,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  Neo::animateArmature(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animateTextures(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::TexturesAnim *arg2 = (Neo::TexturesAnim *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::animateTextures",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::animateTextures",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::animateTextures",2,"Neo::TexturesAnim *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::animateTextures",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("animateTextures",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("animateTextures",2,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  Neo::animateTextures(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_animateMaterials(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  Neo::MaterialsAnim *arg2 = (Neo::MaterialsAnim *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::animateMaterials",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::animateMaterials",1,"Neo::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::animateMaterials",2,"Neo::MaterialsAnim *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::animateMaterials",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("animateMaterials",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("animateMaterials",2,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  Neo::animateMaterials(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_computeSkinning(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Armature *arg1 = (Neo::Armature *) 0 ;
  Neo::SkinData *arg2 = (Neo::SkinData *) 0 ;
  Neo::Vector3 *arg3 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg4 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg6 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg7 = (Neo::Vector3 *) 0 ;
  Neo::Vector3 *arg8 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::computeSkinning",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::computeSkinning",1,"Neo::Armature *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::computeSkinning",2,"Neo::SkinData *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::computeSkinning",3,"Neo::Vector3 const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::computeSkinning",4,"Neo::Vector3 const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::computeSkinning",5,"Neo::Vector3 const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Neo::computeSkinning",6,"Neo::Vector3 *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Neo::computeSkinning",7,"Neo::Vector3 *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("Neo::computeSkinning",8,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Armature,0))){
    SWIG_fail_ptr("computeSkinning",1,SWIGTYPE_p_Neo__Armature);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SkinData,0))){
    SWIG_fail_ptr("computeSkinning",2,SWIGTYPE_p_Neo__SkinData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("computeSkinning",3,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("computeSkinning",4,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("computeSkinning",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("computeSkinning",6,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("computeSkinning",7,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("computeSkinning",8,SWIGTYPE_p_Neo__Vector3);
  }
  
  Neo::computeSkinning(arg1,arg2,(Neo::Vector3 const *)arg3,(Neo::Vector3 const *)arg4,(Neo::Vector3 const *)arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isRaytraced(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  Neo::VAR_TYPES arg4 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  unsigned int arg6 ;
  bool result;
  
  SWIG_check_num_args("Neo::isRaytraced",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::isRaytraced",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::isRaytraced",2,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::isRaytraced",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::isRaytraced",4,"Neo::VAR_TYPES");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::isRaytraced",5,"Neo::Vector3 const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::isRaytraced",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaytraced",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaytraced",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"isRaytraced");
  arg4 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("isRaytraced",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  result = (bool)Neo::isRaytraced((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(void const *)arg3,arg4,(Neo::Vector3 const *)arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getNearestRaytracedPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  Neo::VAR_TYPES arg4 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  unsigned int arg6 ;
  Neo::Vector3 *arg7 = (Neo::Vector3 *) 0 ;
  bool arg8 ;
  bool result;
  
  SWIG_check_num_args("Neo::getNearestRaytracedPosition",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",2,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",4,"Neo::VAR_TYPES");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",5,"Neo::Vector3 const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",6,"unsigned int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",7,"Neo::Vector3 *");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",8,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"getNearestRaytracedPosition");
  arg4 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",7,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg8 = (lua_toboolean(L, 8)!=0);
  result = (bool)Neo::getNearestRaytracedPosition((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(void const *)arg3,arg4,(Neo::Vector3 const *)arg5,arg6,arg7,arg8);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getNearestRaytracedPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = 0 ;
  Neo::Vector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  Neo::VAR_TYPES arg4 ;
  Neo::Vector3 *arg5 = (Neo::Vector3 *) 0 ;
  unsigned int arg6 ;
  Neo::Vector3 *arg7 = (Neo::Vector3 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::getNearestRaytracedPosition",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",1,"Neo::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",2,"Neo::Vector3 const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",4,"Neo::VAR_TYPES");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",5,"Neo::Vector3 const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",6,"unsigned int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Neo::getNearestRaytracedPosition",7,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"getNearestRaytracedPosition");
  arg4 = (Neo::VAR_TYPES)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",5,SWIGTYPE_p_Neo__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("getNearestRaytracedPosition",7,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (bool)Neo::getNearestRaytracedPosition((Neo::Vector3 const &)*arg1,(Neo::Vector3 const &)*arg2,(void const *)arg3,arg4,(Neo::Vector3 const *)arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getNearestRaytracedPosition(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_getNearestRaytracedPosition__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_getNearestRaytracedPosition__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getNearestRaytracedPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::getNearestRaytracedPosition(Neo::Vector3 const &,Neo::Vector3 const &,void const *,Neo::VAR_TYPES,Neo::Vector3 const *,unsigned int,Neo::Vector3 *,bool)\n"
    "    Neo::getNearestRaytracedPosition(Neo::Vector3 const &,Neo::Vector3 const &,void const *,Neo::VAR_TYPES,Neo::Vector3 const *,unsigned int,Neo::Vector3 *)\n");
  lua_error(L);return 0;
}


static int _wrap_new_FontRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo::FontRef::FontRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FontRef::FontRef",1,"Neo::Font *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::FontRef::FontRef",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("new_FontRef",1,SWIGTYPE_p_Neo__Font);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::FontRef *)new Neo::FontRef(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FontRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  
  SWIG_check_num_args("Neo::FontRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FontRef::clear",1,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("FontRef_clear",1,SWIGTYPE_p_Neo__FontRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FontRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  
  SWIG_check_num_args("Neo::FontRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FontRef::destroy",1,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("FontRef_destroy",1,SWIGTYPE_p_Neo__FontRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FontRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Font *arg1 = (Neo::Font *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo::FontRef::getNew",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FontRef::getNew",1,"Neo::Font *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::FontRef::getNew",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Font,0))){
    SWIG_fail_ptr("FontRef_getNew",1,SWIGTYPE_p_Neo__Font);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::FontRef *)Neo::FontRef::getNew(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FontRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  
  SWIG_check_num_args("Neo::FontRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FontRef::update",1,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("FontRef_update",1,SWIGTYPE_p_Neo__FontRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FontRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::FontRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FontRef::getType",1,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("FontRef_getType",1,SWIGTYPE_p_Neo__FontRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FontRef_getFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  Neo::Font *result = 0 ;
  
  SWIG_check_num_args("Neo::FontRef::getFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::FontRef::getFont",1,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("FontRef_getFont",1,SWIGTYPE_p_Neo__FontRef);
  }
  
  result = (Neo::Font *)(arg1)->getFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Font,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FontRef(void *obj) {
Neo::FontRef *arg1 = (Neo::FontRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_FontRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FontRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FontRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FontRef_methods[]= {
    { "clear", _wrap_FontRef_clear},
    { "destroy", _wrap_FontRef_destroy},
    { "update", _wrap_FontRef_update},
    { "getType", _wrap_FontRef_getType},
    { "getFont", _wrap_FontRef_getFont},
    {0,0}
};
static swig_lua_method swig_FontRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FontRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FontRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FontRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_FontRef_getNew},
    {0,0}
};
static swig_lua_class* swig_FontRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FontRef_Sf_SwigStatic = {
    "FontRef",
    swig_FontRef_Sf_SwigStatic_methods,
    swig_FontRef_Sf_SwigStatic_attributes,
    swig_FontRef_Sf_SwigStatic_constants,
    swig_FontRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FontRef_bases[] = {0,0};
static const char *swig_FontRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_FontRef = { "FontRef", "FontRef", &SWIGTYPE_p_Neo__FontRef,_proxy__wrap_new_FontRef, swig_delete_FontRef, swig_FontRef_methods, swig_FontRef_attributes, &swig_FontRef_Sf_SwigStatic, swig_FontRef_meta, swig_FontRef_bases, swig_FontRef_base_names };

static int _wrap_new_ShaderRef(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  Neo::M_SHADER_TYPES arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::ShaderRef *result = 0 ;
  
  SWIG_check_num_args("Neo::ShaderRef::ShaderRef",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::ShaderRef::ShaderRef",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ShaderRef::ShaderRef",2,"Neo::M_SHADER_TYPES");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::ShaderRef::ShaderRef",3,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (Neo::M_SHADER_TYPES)(int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (Neo::ShaderRef *)new Neo::ShaderRef(arg1,arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ShaderRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  
  SWIG_check_num_args("Neo::ShaderRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::clear",1,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_clear",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  
  SWIG_check_num_args("Neo::ShaderRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::destroy",1,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_destroy",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  Neo::M_SHADER_TYPES arg2 ;
  char *arg3 = (char *) 0 ;
  Neo::ShaderRef *result = 0 ;
  
  SWIG_check_num_args("Neo::ShaderRef::getNew",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::ShaderRef::getNew",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ShaderRef::getNew",2,"Neo::M_SHADER_TYPES");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::ShaderRef::getNew",3,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (Neo::M_SHADER_TYPES)(int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (Neo::ShaderRef *)Neo::ShaderRef::getNew(arg1,arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ShaderRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  
  SWIG_check_num_args("Neo::ShaderRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::update",1,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_update",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::ShaderRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::getType",1,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_getType",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_setShaderId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::ShaderRef::setShaderId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::setShaderId",1,"Neo::ShaderRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::ShaderRef::setShaderId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_setShaderId",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setShaderId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_getShaderId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::ShaderRef::getShaderId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::getShaderId",1,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_getShaderId",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (unsigned int)(arg1)->getShaderId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_getShaderType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  Neo::M_SHADER_TYPES result;
  
  SWIG_check_num_args("Neo::ShaderRef::getShaderType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::getShaderType",1,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_getShaderType",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (Neo::M_SHADER_TYPES)(arg1)->getShaderType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_getHeader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::ShaderRef::getHeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::getHeader",1,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_getHeader",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (char *)(arg1)->getHeader();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShaderRef_setHeader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ShaderRef *arg1 = (Neo::ShaderRef *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::ShaderRef::setHeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ShaderRef::setHeader",1,"Neo::ShaderRef *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ShaderRef::setHeader",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("ShaderRef_setHeader",1,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setHeader((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ShaderRef(void *obj) {
Neo::ShaderRef *arg1 = (Neo::ShaderRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_ShaderRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ShaderRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ShaderRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ShaderRef_methods[]= {
    { "clear", _wrap_ShaderRef_clear},
    { "destroy", _wrap_ShaderRef_destroy},
    { "update", _wrap_ShaderRef_update},
    { "getType", _wrap_ShaderRef_getType},
    { "setShaderId", _wrap_ShaderRef_setShaderId},
    { "getShaderId", _wrap_ShaderRef_getShaderId},
    { "getShaderType", _wrap_ShaderRef_getShaderType},
    { "getHeader", _wrap_ShaderRef_getHeader},
    { "setHeader", _wrap_ShaderRef_setHeader},
    {0,0}
};
static swig_lua_method swig_ShaderRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ShaderRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ShaderRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ShaderRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_ShaderRef_getNew},
    {0,0}
};
static swig_lua_class* swig_ShaderRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ShaderRef_Sf_SwigStatic = {
    "ShaderRef",
    swig_ShaderRef_Sf_SwigStatic_methods,
    swig_ShaderRef_Sf_SwigStatic_attributes,
    swig_ShaderRef_Sf_SwigStatic_constants,
    swig_ShaderRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ShaderRef_bases[] = {0,0};
static const char *swig_ShaderRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_ShaderRef = { "ShaderRef", "ShaderRef", &SWIGTYPE_p_Neo__ShaderRef,_proxy__wrap_new_ShaderRef, swig_delete_ShaderRef, swig_ShaderRef_methods, swig_ShaderRef_attributes, &swig_ShaderRef_Sf_SwigStatic, swig_ShaderRef_meta, swig_ShaderRef_bases, swig_ShaderRef_base_names };

static int _wrap_new_SoundRef(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::SoundRef::SoundRef",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::SoundRef::SoundRef",1,"unsigned int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::SoundRef::SoundRef",2,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::SoundRef *)new Neo::SoundRef(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  
  SWIG_check_num_args("Neo::SoundRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundRef::clear",1,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("SoundRef_clear",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  
  SWIG_check_num_args("Neo::SoundRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundRef::destroy",1,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("SoundRef_destroy",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::SoundRef::getNew",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::SoundRef::getNew",1,"unsigned int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::SoundRef::getNew",2,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::SoundRef *)Neo::SoundRef::getNew(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  
  SWIG_check_num_args("Neo::SoundRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundRef::update",1,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("SoundRef_update",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::SoundRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundRef::getType",1,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("SoundRef_getType",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRef_setBufferId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::SoundRef::setBufferId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundRef::setBufferId",1,"Neo::SoundRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::SoundRef::setBufferId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("SoundRef_setBufferId",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setBufferId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundRef_getBufferId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::SoundRef::getBufferId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SoundRef::getBufferId",1,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("SoundRef_getBufferId",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  result = (unsigned int)(arg1)->getBufferId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundRef(void *obj) {
Neo::SoundRef *arg1 = (Neo::SoundRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoundRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoundRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoundRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoundRef_methods[]= {
    { "clear", _wrap_SoundRef_clear},
    { "destroy", _wrap_SoundRef_destroy},
    { "update", _wrap_SoundRef_update},
    { "getType", _wrap_SoundRef_getType},
    { "setBufferId", _wrap_SoundRef_setBufferId},
    { "getBufferId", _wrap_SoundRef_getBufferId},
    {0,0}
};
static swig_lua_method swig_SoundRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_SoundRef_getNew},
    {0,0}
};
static swig_lua_class* swig_SoundRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundRef_Sf_SwigStatic = {
    "SoundRef",
    swig_SoundRef_Sf_SwigStatic_methods,
    swig_SoundRef_Sf_SwigStatic_attributes,
    swig_SoundRef_Sf_SwigStatic_constants,
    swig_SoundRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundRef_bases[] = {0,0};
static const char *swig_SoundRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_SoundRef = { "SoundRef", "SoundRef", &SWIGTYPE_p_Neo__SoundRef,_proxy__wrap_new_SoundRef, swig_delete_SoundRef, swig_SoundRef_methods, swig_SoundRef_attributes, &swig_SoundRef_Sf_SwigStatic, swig_SoundRef_meta, swig_SoundRef_bases, swig_SoundRef_base_names };

static int _wrap_new_MeshRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::MeshRef::MeshRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MeshRef::MeshRef",1,"Neo::Mesh *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::MeshRef::MeshRef",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("new_MeshRef",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MeshRef *)new Neo::MeshRef(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  
  SWIG_check_num_args("Neo::MeshRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MeshRef::clear",1,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("MeshRef_clear",1,SWIGTYPE_p_Neo__MeshRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  
  SWIG_check_num_args("Neo::MeshRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MeshRef::destroy",1,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("MeshRef_destroy",1,SWIGTYPE_p_Neo__MeshRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Mesh *arg1 = (Neo::Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::MeshRef::getNew",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MeshRef::getNew",1,"Neo::Mesh *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::MeshRef::getNew",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Mesh,0))){
    SWIG_fail_ptr("MeshRef_getNew",1,SWIGTYPE_p_Neo__Mesh);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MeshRef *)Neo::MeshRef::getNew(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  
  SWIG_check_num_args("Neo::MeshRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MeshRef::update",1,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("MeshRef_update",1,SWIGTYPE_p_Neo__MeshRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::MeshRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MeshRef::getType",1,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("MeshRef_getType",1,SWIGTYPE_p_Neo__MeshRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshRef_getMesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  Neo::Mesh *result = 0 ;
  
  SWIG_check_num_args("Neo::MeshRef::getMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MeshRef::getMesh",1,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("MeshRef_getMesh",1,SWIGTYPE_p_Neo__MeshRef);
  }
  
  result = (Neo::Mesh *)(arg1)->getMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Mesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MeshRef(void *obj) {
Neo::MeshRef *arg1 = (Neo::MeshRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_MeshRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MeshRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MeshRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MeshRef_methods[]= {
    { "clear", _wrap_MeshRef_clear},
    { "destroy", _wrap_MeshRef_destroy},
    { "update", _wrap_MeshRef_update},
    { "getType", _wrap_MeshRef_getType},
    { "getMesh", _wrap_MeshRef_getMesh},
    {0,0}
};
static swig_lua_method swig_MeshRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MeshRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MeshRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MeshRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_MeshRef_getNew},
    {0,0}
};
static swig_lua_class* swig_MeshRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MeshRef_Sf_SwigStatic = {
    "MeshRef",
    swig_MeshRef_Sf_SwigStatic_methods,
    swig_MeshRef_Sf_SwigStatic_attributes,
    swig_MeshRef_Sf_SwigStatic_constants,
    swig_MeshRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MeshRef_bases[] = {0,0};
static const char *swig_MeshRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_MeshRef = { "MeshRef", "MeshRef", &SWIGTYPE_p_Neo__MeshRef,_proxy__wrap_new_MeshRef, swig_delete_MeshRef, swig_MeshRef_methods, swig_MeshRef_attributes, &swig_MeshRef_Sf_SwigStatic, swig_MeshRef_meta, swig_MeshRef_bases, swig_MeshRef_base_names };

static int _wrap_new_TextureRef(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::TextureRef",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::TextureRef::TextureRef",1,"unsigned int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::TextureRef::TextureRef",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::TextureRef::TextureRef",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TextureRef *)new Neo::TextureRef(arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::clear",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_clear",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::destroy",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_destroy",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::getNew",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo::TextureRef::getNew",1,"unsigned int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::TextureRef::getNew",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::TextureRef::getNew",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TextureRef *)Neo::TextureRef::getNew(arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::TextureRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::update",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_update",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::TextureRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getType",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getType",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_isMipmapEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::TextureRef::isMipmapEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::isMipmapEnabled",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_isMipmapEnabled",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (bool)(arg1)->isMipmapEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getComponents(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getComponents",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getComponents",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getWidth",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getWidth",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getHeight",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getHeight",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_setWidth(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TextureRef::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::setWidth",1,"Neo::TextureRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureRef::setWidth",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_setWidth",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_setHeight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TextureRef::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::setHeight",1,"Neo::TextureRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureRef::setHeight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_setHeight",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_setTextureId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::TextureRef::setTextureId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::setTextureId",1,"Neo::TextureRef *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::TextureRef::setTextureId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_setTextureId",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setTextureId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextureRef_getTextureId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TextureRef *arg1 = (Neo::TextureRef *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::TextureRef::getTextureId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TextureRef::getTextureId",1,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("TextureRef_getTextureId",1,SWIGTYPE_p_Neo__TextureRef);
  }
  
  result = (unsigned int)(arg1)->getTextureId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextureRef(void *obj) {
Neo::TextureRef *arg1 = (Neo::TextureRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_TextureRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TextureRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TextureRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TextureRef_methods[]= {
    { "clear", _wrap_TextureRef_clear},
    { "destroy", _wrap_TextureRef_destroy},
    { "update", _wrap_TextureRef_update},
    { "getType", _wrap_TextureRef_getType},
    { "isMipmapEnabled", _wrap_TextureRef_isMipmapEnabled},
    { "getComponents", _wrap_TextureRef_getComponents},
    { "getWidth", _wrap_TextureRef_getWidth},
    { "getHeight", _wrap_TextureRef_getHeight},
    { "setWidth", _wrap_TextureRef_setWidth},
    { "setHeight", _wrap_TextureRef_setHeight},
    { "setTextureId", _wrap_TextureRef_setTextureId},
    { "getTextureId", _wrap_TextureRef_getTextureId},
    {0,0}
};
static swig_lua_method swig_TextureRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TextureRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TextureRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TextureRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_TextureRef_getNew},
    {0,0}
};
static swig_lua_class* swig_TextureRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TextureRef_Sf_SwigStatic = {
    "TextureRef",
    swig_TextureRef_Sf_SwigStatic_methods,
    swig_TextureRef_Sf_SwigStatic_attributes,
    swig_TextureRef_Sf_SwigStatic_constants,
    swig_TextureRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TextureRef_bases[] = {0,0};
static const char *swig_TextureRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_TextureRef = { "TextureRef", "TextureRef", &SWIGTYPE_p_Neo__TextureRef,_proxy__wrap_new_TextureRef, swig_delete_TextureRef, swig_TextureRef_methods, swig_TextureRef_attributes, &swig_TextureRef_Sf_SwigStatic, swig_TextureRef_meta, swig_TextureRef_bases, swig_TextureRef_base_names };

static int _wrap_new_ArmatureAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnimRef::ArmatureAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnimRef::ArmatureAnimRef",1,"Neo::ArmatureAnim *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ArmatureAnimRef::ArmatureAnimRef",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("new_ArmatureAnimRef",1,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::ArmatureAnimRef *)new Neo::ArmatureAnimRef(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnimRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnimRef *arg1 = (Neo::ArmatureAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnimRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnimRef::clear",1,"Neo::ArmatureAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnimRef,0))){
    SWIG_fail_ptr("ArmatureAnimRef_clear",1,SWIGTYPE_p_Neo__ArmatureAnimRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnimRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnimRef *arg1 = (Neo::ArmatureAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnimRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnimRef::destroy",1,"Neo::ArmatureAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnimRef,0))){
    SWIG_fail_ptr("ArmatureAnimRef_destroy",1,SWIGTYPE_p_Neo__ArmatureAnimRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnimRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnim *arg1 = (Neo::ArmatureAnim *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnimRef::getNew",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnimRef::getNew",1,"Neo::ArmatureAnim *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::ArmatureAnimRef::getNew",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnim,0))){
    SWIG_fail_ptr("ArmatureAnimRef_getNew",1,SWIGTYPE_p_Neo__ArmatureAnim);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::ArmatureAnimRef *)Neo::ArmatureAnimRef::getNew(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnimRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnimRef *arg1 = (Neo::ArmatureAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnimRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnimRef::update",1,"Neo::ArmatureAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnimRef,0))){
    SWIG_fail_ptr("ArmatureAnimRef_update",1,SWIGTYPE_p_Neo__ArmatureAnimRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnimRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnimRef *arg1 = (Neo::ArmatureAnimRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::ArmatureAnimRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnimRef::getType",1,"Neo::ArmatureAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnimRef,0))){
    SWIG_fail_ptr("ArmatureAnimRef_getType",1,SWIGTYPE_p_Neo__ArmatureAnimRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArmatureAnimRef_getArmatureAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::ArmatureAnimRef *arg1 = (Neo::ArmatureAnimRef *) 0 ;
  Neo::ArmatureAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::ArmatureAnimRef::getArmatureAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::ArmatureAnimRef::getArmatureAnim",1,"Neo::ArmatureAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__ArmatureAnimRef,0))){
    SWIG_fail_ptr("ArmatureAnimRef_getArmatureAnim",1,SWIGTYPE_p_Neo__ArmatureAnimRef);
  }
  
  result = (Neo::ArmatureAnim *)(arg1)->getArmatureAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArmatureAnimRef(void *obj) {
Neo::ArmatureAnimRef *arg1 = (Neo::ArmatureAnimRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_ArmatureAnimRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ArmatureAnimRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ArmatureAnimRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ArmatureAnimRef_methods[]= {
    { "clear", _wrap_ArmatureAnimRef_clear},
    { "destroy", _wrap_ArmatureAnimRef_destroy},
    { "update", _wrap_ArmatureAnimRef_update},
    { "getType", _wrap_ArmatureAnimRef_getType},
    { "getArmatureAnim", _wrap_ArmatureAnimRef_getArmatureAnim},
    {0,0}
};
static swig_lua_method swig_ArmatureAnimRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ArmatureAnimRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ArmatureAnimRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ArmatureAnimRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_ArmatureAnimRef_getNew},
    {0,0}
};
static swig_lua_class* swig_ArmatureAnimRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ArmatureAnimRef_Sf_SwigStatic = {
    "ArmatureAnimRef",
    swig_ArmatureAnimRef_Sf_SwigStatic_methods,
    swig_ArmatureAnimRef_Sf_SwigStatic_attributes,
    swig_ArmatureAnimRef_Sf_SwigStatic_constants,
    swig_ArmatureAnimRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ArmatureAnimRef_bases[] = {0,0};
static const char *swig_ArmatureAnimRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_ArmatureAnimRef = { "ArmatureAnimRef", "ArmatureAnimRef", &SWIGTYPE_p_Neo__ArmatureAnimRef,_proxy__wrap_new_ArmatureAnimRef, swig_delete_ArmatureAnimRef, swig_ArmatureAnimRef_methods, swig_ArmatureAnimRef_attributes, &swig_ArmatureAnimRef_Sf_SwigStatic, swig_ArmatureAnimRef_meta, swig_ArmatureAnimRef_bases, swig_ArmatureAnimRef_base_names };

static int _wrap_new_TexturesAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnimRef::TexturesAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnimRef::TexturesAnimRef",1,"Neo::TexturesAnim *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::TexturesAnimRef::TexturesAnimRef",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("new_TexturesAnimRef",1,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::TexturesAnimRef *)new Neo::TexturesAnimRef(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnimRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnimRef *arg1 = (Neo::TexturesAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnimRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnimRef::clear",1,"Neo::TexturesAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnimRef,0))){
    SWIG_fail_ptr("TexturesAnimRef_clear",1,SWIGTYPE_p_Neo__TexturesAnimRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnimRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnimRef *arg1 = (Neo::TexturesAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnimRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnimRef::destroy",1,"Neo::TexturesAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnimRef,0))){
    SWIG_fail_ptr("TexturesAnimRef_destroy",1,SWIGTYPE_p_Neo__TexturesAnimRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnimRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnim *arg1 = (Neo::TexturesAnim *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnimRef::getNew",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnimRef::getNew",1,"Neo::TexturesAnim *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::TexturesAnimRef::getNew",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnim,0))){
    SWIG_fail_ptr("TexturesAnimRef_getNew",1,SWIGTYPE_p_Neo__TexturesAnim);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::TexturesAnimRef *)Neo::TexturesAnimRef::getNew(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnimRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnimRef *arg1 = (Neo::TexturesAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnimRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnimRef::update",1,"Neo::TexturesAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnimRef,0))){
    SWIG_fail_ptr("TexturesAnimRef_update",1,SWIGTYPE_p_Neo__TexturesAnimRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnimRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnimRef *arg1 = (Neo::TexturesAnimRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::TexturesAnimRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnimRef::getType",1,"Neo::TexturesAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnimRef,0))){
    SWIG_fail_ptr("TexturesAnimRef_getType",1,SWIGTYPE_p_Neo__TexturesAnimRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TexturesAnimRef_getTexturesAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::TexturesAnimRef *arg1 = (Neo::TexturesAnimRef *) 0 ;
  Neo::TexturesAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::TexturesAnimRef::getTexturesAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::TexturesAnimRef::getTexturesAnim",1,"Neo::TexturesAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__TexturesAnimRef,0))){
    SWIG_fail_ptr("TexturesAnimRef_getTexturesAnim",1,SWIGTYPE_p_Neo__TexturesAnimRef);
  }
  
  result = (Neo::TexturesAnim *)(arg1)->getTexturesAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TexturesAnimRef(void *obj) {
Neo::TexturesAnimRef *arg1 = (Neo::TexturesAnimRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_TexturesAnimRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TexturesAnimRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TexturesAnimRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TexturesAnimRef_methods[]= {
    { "clear", _wrap_TexturesAnimRef_clear},
    { "destroy", _wrap_TexturesAnimRef_destroy},
    { "update", _wrap_TexturesAnimRef_update},
    { "getType", _wrap_TexturesAnimRef_getType},
    { "getTexturesAnim", _wrap_TexturesAnimRef_getTexturesAnim},
    {0,0}
};
static swig_lua_method swig_TexturesAnimRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TexturesAnimRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TexturesAnimRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TexturesAnimRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_TexturesAnimRef_getNew},
    {0,0}
};
static swig_lua_class* swig_TexturesAnimRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TexturesAnimRef_Sf_SwigStatic = {
    "TexturesAnimRef",
    swig_TexturesAnimRef_Sf_SwigStatic_methods,
    swig_TexturesAnimRef_Sf_SwigStatic_attributes,
    swig_TexturesAnimRef_Sf_SwigStatic_constants,
    swig_TexturesAnimRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TexturesAnimRef_bases[] = {0,0};
static const char *swig_TexturesAnimRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_TexturesAnimRef = { "TexturesAnimRef", "TexturesAnimRef", &SWIGTYPE_p_Neo__TexturesAnimRef,_proxy__wrap_new_TexturesAnimRef, swig_delete_TexturesAnimRef, swig_TexturesAnimRef_methods, swig_TexturesAnimRef_attributes, &swig_TexturesAnimRef_Sf_SwigStatic, swig_TexturesAnimRef_meta, swig_TexturesAnimRef_bases, swig_TexturesAnimRef_base_names };

static int _wrap_new_MaterialsAnimRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnimRef::MaterialsAnimRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnimRef::MaterialsAnimRef",1,"Neo::MaterialsAnim *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::MaterialsAnimRef::MaterialsAnimRef",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("new_MaterialsAnimRef",1,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MaterialsAnimRef *)new Neo::MaterialsAnimRef(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnimRef_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnimRef *arg1 = (Neo::MaterialsAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnimRef::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnimRef::clear",1,"Neo::MaterialsAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnimRef,0))){
    SWIG_fail_ptr("MaterialsAnimRef_clear",1,SWIGTYPE_p_Neo__MaterialsAnimRef);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnimRef_destroy(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnimRef *arg1 = (Neo::MaterialsAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnimRef::destroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnimRef::destroy",1,"Neo::MaterialsAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnimRef,0))){
    SWIG_fail_ptr("MaterialsAnimRef_destroy",1,SWIGTYPE_p_Neo__MaterialsAnimRef);
  }
  
  (arg1)->destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnimRef_getNew(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnim *arg1 = (Neo::MaterialsAnim *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnimRef::getNew",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnimRef::getNew",1,"Neo::MaterialsAnim *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::MaterialsAnimRef::getNew",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnim,0))){
    SWIG_fail_ptr("MaterialsAnimRef_getNew",1,SWIGTYPE_p_Neo__MaterialsAnim);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MaterialsAnimRef *)Neo::MaterialsAnimRef::getNew(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnimRef_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnimRef *arg1 = (Neo::MaterialsAnimRef *) 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnimRef::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnimRef::update",1,"Neo::MaterialsAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnimRef,0))){
    SWIG_fail_ptr("MaterialsAnimRef_update",1,SWIGTYPE_p_Neo__MaterialsAnimRef);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnimRef_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnimRef *arg1 = (Neo::MaterialsAnimRef *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::MaterialsAnimRef::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnimRef::getType",1,"Neo::MaterialsAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnimRef,0))){
    SWIG_fail_ptr("MaterialsAnimRef_getType",1,SWIGTYPE_p_Neo__MaterialsAnimRef);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaterialsAnimRef_getMaterialsAnim(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MaterialsAnimRef *arg1 = (Neo::MaterialsAnimRef *) 0 ;
  Neo::MaterialsAnim *result = 0 ;
  
  SWIG_check_num_args("Neo::MaterialsAnimRef::getMaterialsAnim",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::MaterialsAnimRef::getMaterialsAnim",1,"Neo::MaterialsAnimRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MaterialsAnimRef,0))){
    SWIG_fail_ptr("MaterialsAnimRef_getMaterialsAnim",1,SWIGTYPE_p_Neo__MaterialsAnimRef);
  }
  
  result = (Neo::MaterialsAnim *)(arg1)->getMaterialsAnim();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnim,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MaterialsAnimRef(void *obj) {
Neo::MaterialsAnimRef *arg1 = (Neo::MaterialsAnimRef *) obj;
delete arg1;
}
static int _proxy__wrap_new_MaterialsAnimRef(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MaterialsAnimRef);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MaterialsAnimRef_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaterialsAnimRef_methods[]= {
    { "clear", _wrap_MaterialsAnimRef_clear},
    { "destroy", _wrap_MaterialsAnimRef_destroy},
    { "update", _wrap_MaterialsAnimRef_update},
    { "getType", _wrap_MaterialsAnimRef_getType},
    { "getMaterialsAnim", _wrap_MaterialsAnimRef_getMaterialsAnim},
    {0,0}
};
static swig_lua_method swig_MaterialsAnimRef_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaterialsAnimRef_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaterialsAnimRef_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaterialsAnimRef_Sf_SwigStatic_methods[]= {
    { "getNew", _wrap_MaterialsAnimRef_getNew},
    {0,0}
};
static swig_lua_class* swig_MaterialsAnimRef_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaterialsAnimRef_Sf_SwigStatic = {
    "MaterialsAnimRef",
    swig_MaterialsAnimRef_Sf_SwigStatic_methods,
    swig_MaterialsAnimRef_Sf_SwigStatic_attributes,
    swig_MaterialsAnimRef_Sf_SwigStatic_constants,
    swig_MaterialsAnimRef_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaterialsAnimRef_bases[] = {0,0};
static const char *swig_MaterialsAnimRef_base_names[] = {"Neo::DataRef *",0};
static swig_lua_class _wrap_class_MaterialsAnimRef = { "MaterialsAnimRef", "MaterialsAnimRef", &SWIGTYPE_p_Neo__MaterialsAnimRef,_proxy__wrap_new_MaterialsAnimRef, swig_delete_MaterialsAnimRef, swig_MaterialsAnimRef_methods, swig_MaterialsAnimRef_attributes, &swig_MaterialsAnimRef_Sf_SwigStatic, swig_MaterialsAnimRef_meta, swig_MaterialsAnimRef_bases, swig_MaterialsAnimRef_base_names };

static int _wrap_new_Skybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Skybox *result = 0 ;
  
  SWIG_check_num_args("Neo::Skybox::Skybox",0,0)
  result = (Neo::Skybox *)new Neo::Skybox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Skybox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skybox_drawSkybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Skybox *arg1 = (Neo::Skybox *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 arg3 ;
  Neo::Vector3 *argp2 ;
  Neo::Vector3 *argp3 ;
  
  SWIG_check_num_args("Neo::Skybox::drawSkybox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Skybox::drawSkybox",1,"Neo::Skybox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Skybox::drawSkybox",2,"Neo::Vector3");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Skybox::drawSkybox",3,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Skybox,0))){
    SWIG_fail_ptr("Skybox_drawSkybox",1,SWIGTYPE_p_Neo__Skybox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Skybox_drawSkybox",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Skybox_drawSkybox",3,SWIGTYPE_p_Neo__Vector3);
  }
  arg3 = *argp3;
  
  (arg1)->drawSkybox(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skybox_loadSkyboxTextures(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Skybox *arg1 = (Neo::Skybox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Skybox::loadSkyboxTextures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Skybox::loadSkyboxTextures",1,"Neo::Skybox *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Skybox::loadSkyboxTextures",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Skybox,0))){
    SWIG_fail_ptr("Skybox_loadSkyboxTextures",1,SWIGTYPE_p_Neo__Skybox);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->loadSkyboxTextures((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skybox_getPath(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Skybox *arg1 = (Neo::Skybox *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Skybox::getPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Skybox::getPath",1,"Neo::Skybox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Skybox,0))){
    SWIG_fail_ptr("Skybox_getPath",1,SWIGTYPE_p_Neo__Skybox);
  }
  
  result = (char *)(arg1)->getPath();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Skybox_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Skybox *arg1 = (Neo::Skybox *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Skybox::isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Skybox::isInitialized",1,"Neo::Skybox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Skybox,0))){
    SWIG_fail_ptr("Skybox_isInitialized",1,SWIGTYPE_p_Neo__Skybox);
  }
  
  result = (bool)(arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Skybox(void *obj) {
Neo::Skybox *arg1 = (Neo::Skybox *) obj;
delete arg1;
}
static int _proxy__wrap_new_Skybox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Skybox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Skybox_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Skybox_methods[]= {
    { "drawSkybox", _wrap_Skybox_drawSkybox},
    { "loadSkyboxTextures", _wrap_Skybox_loadSkyboxTextures},
    { "getPath", _wrap_Skybox_getPath},
    { "isInitialized", _wrap_Skybox_isInitialized},
    {0,0}
};
static swig_lua_method swig_Skybox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Skybox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Skybox_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Skybox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Skybox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Skybox_Sf_SwigStatic = {
    "Skybox",
    swig_Skybox_Sf_SwigStatic_methods,
    swig_Skybox_Sf_SwigStatic_attributes,
    swig_Skybox_Sf_SwigStatic_constants,
    swig_Skybox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Skybox_bases[] = {0};
static const char *swig_Skybox_base_names[] = {0};
static swig_lua_class _wrap_class_Skybox = { "Skybox", "Skybox", &SWIGTYPE_p_Neo__Skybox,_proxy__wrap_new_Skybox, swig_delete_Skybox, swig_Skybox_methods, swig_Skybox_attributes, &swig_Skybox_Sf_SwigStatic, swig_Skybox_meta, swig_Skybox_bases, swig_Skybox_base_names };

static int _wrap_new_Object3d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::Object3d",0,0)
  result = (Neo::Object3d *)new Neo::Object3d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Object3d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::Object3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::Object3d::Object3d",1,"Neo::Object3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("new_Object3d",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Object3d *)new Neo::Object3d((Neo::Object3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Object3d(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Object3d__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Object3d__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Object3d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Object3d::Object3d()\n"
    "    Neo::Object3d::Object3d(Neo::Object3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Object3d_getAdditionalData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d::AdditionalData *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getAdditionalData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getAdditionalData",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getAdditionalData",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Object3d::AdditionalData *)(arg1)->getAdditionalData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d__AdditionalData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setAdditionalData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d::AdditionalData *arg2 = (Neo::Object3d::AdditionalData *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setAdditionalData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setAdditionalData",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::setAdditionalData",2,"Neo::Object3d::AdditionalData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setAdditionalData",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d__AdditionalData,0))){
    SWIG_fail_ptr("Object3d_setAdditionalData",2,SWIGTYPE_p_Neo__Object3d__AdditionalData);
  }
  
  (arg1)->setAdditionalData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_updateMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::updateMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::updateMatrix",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_updateMatrix",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->updateMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_computeLocalMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::computeLocalMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::computeLocalMatrix",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_computeLocalMatrix",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->computeLocalMatrix();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getMatrix",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getMatrix",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_unlinkChildren(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::unlinkChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::unlinkChildren",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_unlinkChildren",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->unlinkChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_computeChildrenMatrices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::computeChildrenMatrices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::computeChildrenMatrices",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_computeChildrenMatrices",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->computeChildrenMatrices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::NeoVariable arg3 ;
  Neo::NeoVariable *argp3 ;
  
  SWIG_check_num_args("Neo::Object3d::setAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setAttribute",1,"Neo::Object3d *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Object3d::setAttribute",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Neo::Object3d::setAttribute",3,"Neo::NeoVariable");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setAttribute",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Neo__NeoVariable,0))){
    SWIG_fail_ptr("Object3d_setAttribute",3,SWIGTYPE_p_Neo__NeoVariable);
  }
  arg3 = *argp3;
  
  (arg1)->setAttribute((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::NeoVariable result;
  
  SWIG_check_num_args("Neo::Object3d::getAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getAttribute",1,"Neo::Object3d *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Object3d::getAttribute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getAttribute",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getAttribute((char const *)arg2);
  {
    Neo::NeoVariable * resultptr = new Neo::NeoVariable((const Neo::NeoVariable &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__NeoVariable,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getUniformRotatedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getUniformRotatedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getUniformRotatedVector",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getUniformRotatedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getUniformRotatedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getUniformRotatedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (arg1)->getUniformRotatedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getInverseRotatedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getInverseRotatedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getInverseRotatedVector",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getInverseRotatedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getInverseRotatedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getInverseRotatedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getInverseRotatedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getRotatedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getRotatedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getRotatedVector",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getRotatedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getRotatedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getRotatedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getRotatedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getInversePosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getInversePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getInversePosition",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getInversePosition",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getInversePosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getInversePosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getInversePosition((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getTransformedVector(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedVector",1,"Neo::Object3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::getTransformedVector",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedVector",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_getTransformedVector",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedVector((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setPosition",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setPosition",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setPosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setPosition",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setPosition((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::translate",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::translate",2,"Neo::Vector3 const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Object3d::translate",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_translate",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_translate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->translate((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::translate",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::translate",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_translate",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_translate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->translate((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_translate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Object3d_translate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Object3d_translate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Object3d_translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Object3d::translate(Neo::Vector3 const &,bool)\n"
    "    Neo::Object3d::translate(Neo::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Object3d_rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("Neo::Object3d::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::rotate",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::rotate",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::rotate",3,"float");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo::Object3d::rotate",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_rotate",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_rotate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::rotate",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::rotate",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::rotate",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_rotate",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_rotate",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->rotate((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_rotate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Object3d_rotate__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Object3d_rotate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Object3d_rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Object3d::rotate(Neo::Vector3 const &,float,bool)\n"
    "    Neo::Object3d::rotate(Neo::Vector3 const &,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Object3d_getTransformedPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedPosition",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedPosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedPosition();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getPosition",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getPosition",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getPosition();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setEulerRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setEulerRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setEulerRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setEulerRotation",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setEulerRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setEulerRotation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setEulerRotation((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setAxisAngleRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::setAxisAngleRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setAxisAngleRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setAxisAngleRotation",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::setAxisAngleRotation",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setAxisAngleRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setAxisAngleRotation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setAxisAngleRotation((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_addAxisAngleRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::addAxisAngleRotation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::addAxisAngleRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::addAxisAngleRotation",2,"Neo::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::addAxisAngleRotation",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addAxisAngleRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_addAxisAngleRotation",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->addAxisAngleRotation((Neo::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setRotation",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setRotation",2,"Neo::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Quaternion,0))){
    SWIG_fail_ptr("Object3d_setRotation",2,SWIGTYPE_p_Neo__Quaternion);
  }
  
  (arg1)->setRotation((Neo::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getTransformedRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedRotation",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedRotation();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getEulerRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getEulerRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getEulerRotation",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getEulerRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getEulerRotation();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Quaternion result;
  
  SWIG_check_num_args("Neo::Object3d::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getRotation",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getRotation",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getRotation();
  {
    Neo::Quaternion * resultptr = new Neo::Quaternion((const Neo::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setScale",1,"Neo::Object3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Object3d::setScale",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setScale",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Object3d_setScale",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setScale((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getTransformedScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getTransformedScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getTransformedScale",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getTransformedScale",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getTransformedScale();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Object3d::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getScale",1,"Neo::Object3d const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getScale",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = ((Neo::Object3d const *)arg1)->getScale();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_linkTo(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::linkTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::linkTo",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::linkTo",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_linkTo",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_linkTo",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->linkTo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_unLink(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::unLink",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::unLink",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_unLink",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->unLink();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setParent",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::setParent",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setParent",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setParent",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->setParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_addChild(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::addChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::addChild",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::addChild",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addChild",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addChild",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->addChild(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_hasParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::hasParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::hasParent",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_hasParent",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->hasParent();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getChildrenNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Object3d::getChildrenNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getChildrenNumber",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getChildrenNumber",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (unsigned int)(arg1)->getChildrenNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getParent",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getParent",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Object3d *)(arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getChild(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getChild",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::getChild",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getChild",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Object3d *)(arg1)->getChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("Neo::Object3d::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getId",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getId",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (unsigned long)(arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::setId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setId",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::setId",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setId",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_updateBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::updateBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::updateBehaviors",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_updateBehaviors",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->updateBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_drawBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::drawBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::drawBehaviors",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_drawBehaviors",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->drawBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_deleteBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::deleteBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::deleteBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::deleteBehavior",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_deleteBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->deleteBehavior(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_invertBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::Object3d::invertBehavior",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::invertBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::invertBehavior",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Object3d::invertBehavior",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_invertBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->invertBehavior(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_changeBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Neo::Behavior *arg3 = (Neo::Behavior *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::changeBehavior",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::changeBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::changeBehavior",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Object3d::changeBehavior",3,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_changeBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Object3d_changeBehavior",3,SWIGTYPE_p_Neo__Behavior);
  }
  
  (arg1)->changeBehavior(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_addBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Behavior *arg2 = (Neo::Behavior *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::addBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::addBehavior",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::addBehavior",2,"Neo::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_addBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Behavior,0))){
    SWIG_fail_ptr("Object3d_addBehavior",2,SWIGTYPE_p_Neo__Behavior);
  }
  
  (arg1)->addBehavior(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getBehaviorsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Object3d::getBehaviorsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getBehaviorsNumber",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getBehaviorsNumber",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (unsigned int)(arg1)->getBehaviorsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getBehavior(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Neo::Behavior *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getBehavior",1,"Neo::Object3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Object3d::getBehavior",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getBehavior",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Behavior *)(arg1)->getBehavior(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Behavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_needToUpdate(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::needToUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::needToUpdate",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_needToUpdate",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->needToUpdate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setActive",1,"Neo::Object3d *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::Object3d::setActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setActive",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_isActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::isActive",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_isActive",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::Object3d::setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setVisible",1,"Neo::Object3d *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::Object3d::setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setVisible",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Object3d::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::isVisible",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_isVisible",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (bool)(arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::updateVisibility",1,"Neo::Object3d *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Object3d::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_updateVisibility",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Object3d_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_setName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::setName",1,"Neo::Object3d *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Object3d::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_setName",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Object3d::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getName",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getName",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Object3d::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::getType",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_getType",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Object3d_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Object3d::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Object3d::update",1,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Object3d_update",1,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Object3d(void *obj) {
Neo::Object3d *arg1 = (Neo::Object3d *) obj;
delete arg1;
}
static int _proxy__wrap_new_Object3d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Object3d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Object3d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Object3d_methods[]= {
    { "getAdditionalData", _wrap_Object3d_getAdditionalData},
    { "setAdditionalData", _wrap_Object3d_setAdditionalData},
    { "updateMatrix", _wrap_Object3d_updateMatrix},
    { "computeLocalMatrix", _wrap_Object3d_computeLocalMatrix},
    { "getMatrix", _wrap_Object3d_getMatrix},
    { "unlinkChildren", _wrap_Object3d_unlinkChildren},
    { "computeChildrenMatrices", _wrap_Object3d_computeChildrenMatrices},
    { "setAttribute", _wrap_Object3d_setAttribute},
    { "getAttribute", _wrap_Object3d_getAttribute},
    { "getUniformRotatedVector", _wrap_Object3d_getUniformRotatedVector},
    { "getInverseRotatedVector", _wrap_Object3d_getInverseRotatedVector},
    { "getRotatedVector", _wrap_Object3d_getRotatedVector},
    { "getInversePosition", _wrap_Object3d_getInversePosition},
    { "getTransformedVector", _wrap_Object3d_getTransformedVector},
    { "setPosition", _wrap_Object3d_setPosition},
    { "translate", _wrap_Object3d_translate},
    { "rotate", _wrap_Object3d_rotate},
    { "getTransformedPosition", _wrap_Object3d_getTransformedPosition},
    { "getPosition", _wrap_Object3d_getPosition},
    { "setEulerRotation", _wrap_Object3d_setEulerRotation},
    { "setAxisAngleRotation", _wrap_Object3d_setAxisAngleRotation},
    { "addAxisAngleRotation", _wrap_Object3d_addAxisAngleRotation},
    { "setRotation", _wrap_Object3d_setRotation},
    { "getTransformedRotation", _wrap_Object3d_getTransformedRotation},
    { "getEulerRotation", _wrap_Object3d_getEulerRotation},
    { "getRotation", _wrap_Object3d_getRotation},
    { "setScale", _wrap_Object3d_setScale},
    { "getTransformedScale", _wrap_Object3d_getTransformedScale},
    { "getScale", _wrap_Object3d_getScale},
    { "linkTo", _wrap_Object3d_linkTo},
    { "unLink", _wrap_Object3d_unLink},
    { "setParent", _wrap_Object3d_setParent},
    { "addChild", _wrap_Object3d_addChild},
    { "hasParent", _wrap_Object3d_hasParent},
    { "getChildrenNumber", _wrap_Object3d_getChildrenNumber},
    { "getParent", _wrap_Object3d_getParent},
    { "getChild", _wrap_Object3d_getChild},
    { "getId", _wrap_Object3d_getId},
    { "setId", _wrap_Object3d_setId},
    { "updateBehaviors", _wrap_Object3d_updateBehaviors},
    { "drawBehaviors", _wrap_Object3d_drawBehaviors},
    { "deleteBehavior", _wrap_Object3d_deleteBehavior},
    { "invertBehavior", _wrap_Object3d_invertBehavior},
    { "changeBehavior", _wrap_Object3d_changeBehavior},
    { "addBehavior", _wrap_Object3d_addBehavior},
    { "getBehaviorsNumber", _wrap_Object3d_getBehaviorsNumber},
    { "getBehavior", _wrap_Object3d_getBehavior},
    { "needToUpdate", _wrap_Object3d_needToUpdate},
    { "setActive", _wrap_Object3d_setActive},
    { "isActive", _wrap_Object3d_isActive},
    { "setVisible", _wrap_Object3d_setVisible},
    { "isVisible", _wrap_Object3d_isVisible},
    { "updateVisibility", _wrap_Object3d_updateVisibility},
    { "setName", _wrap_Object3d_setName},
    { "getName", _wrap_Object3d_getName},
    { "getType", _wrap_Object3d_getType},
    { "update", _wrap_Object3d_update},
    {0,0}
};
static swig_lua_method swig_Object3d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Object3d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Object3d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Object3d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Object3d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Object3d_Sf_SwigStatic = {
    "Object3d",
    swig_Object3d_Sf_SwigStatic_methods,
    swig_Object3d_Sf_SwigStatic_attributes,
    swig_Object3d_Sf_SwigStatic_constants,
    swig_Object3d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Object3d_bases[] = {0};
static const char *swig_Object3d_base_names[] = {0};
static swig_lua_class _wrap_class_Object3d = { "Object3d", "Object3d", &SWIGTYPE_p_Neo__Object3d,_proxy__wrap_new_Object3d, swig_delete_Object3d, swig_Object3d_methods, swig_Object3d_attributes, &swig_Object3d_Sf_SwigStatic, swig_Object3d_meta, swig_Object3d_bases, swig_Object3d_base_names };

static int _wrap_new_OBone__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::OBone::OBone",0,0)
  result = (Neo::OBone *)new Neo::OBone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OBone__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = 0 ;
  Neo::OBone *result = 0 ;
  
  SWIG_check_num_args("Neo::OBone::OBone",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OBone::OBone",1,"Neo::OBone const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("new_OBone",1,SWIGTYPE_p_Neo__OBone);
  }
  
  result = (Neo::OBone *)new Neo::OBone((Neo::OBone const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OBone,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OBone(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OBone__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OBone, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OBone__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OBone'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OBone::OBone()\n"
    "    Neo::OBone::OBone(Neo::OBone const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OBone_m_inversePoseMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::OBone::m_inversePoseMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::m_inversePoseMatrix",1,"Neo::OBone *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OBone::m_inversePoseMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_m_inversePoseMatrix_set",1,SWIGTYPE_p_Neo__OBone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("OBone_m_inversePoseMatrix_set",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  if (arg1) (arg1)->m_inversePoseMatrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBone_m_inversePoseMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OBone::m_inversePoseMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::m_inversePoseMatrix",1,"Neo::OBone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_m_inversePoseMatrix_get",1,SWIGTYPE_p_Neo__OBone);
  }
  
  result = (Neo::Matrix4x4 *)& ((arg1)->m_inversePoseMatrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBone_m_skinMatrix_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  Neo::Matrix4x4 *arg2 = (Neo::Matrix4x4 *) 0 ;
  
  SWIG_check_num_args("Neo::OBone::m_skinMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::m_skinMatrix",1,"Neo::OBone *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OBone::m_skinMatrix",2,"Neo::Matrix4x4 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_m_skinMatrix_set",1,SWIGTYPE_p_Neo__OBone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Matrix4x4,0))){
    SWIG_fail_ptr("OBone_m_skinMatrix_set",2,SWIGTYPE_p_Neo__Matrix4x4);
  }
  
  if (arg1) (arg1)->m_skinMatrix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBone_m_skinMatrix_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OBone::m_skinMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::m_skinMatrix",1,"Neo::OBone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_m_skinMatrix_get",1,SWIGTYPE_p_Neo__OBone);
  }
  
  result = (Neo::Matrix4x4 *)& ((arg1)->m_skinMatrix);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBone_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OBone::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::getType",1,"Neo::OBone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_getType",1,SWIGTYPE_p_Neo__OBone);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBone_processChildrenLinking(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  
  SWIG_check_num_args("Neo::OBone::processChildrenLinking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::processChildrenLinking",1,"Neo::OBone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_processChildrenLinking",1,SWIGTYPE_p_Neo__OBone);
  }
  
  (arg1)->processChildrenLinking();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBone_getInversePoseMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OBone::getInversePoseMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::getInversePoseMatrix",1,"Neo::OBone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_getInversePoseMatrix",1,SWIGTYPE_p_Neo__OBone);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getInversePoseMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OBone_getSkinMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OBone *arg1 = (Neo::OBone *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OBone::getSkinMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OBone::getSkinMatrix",1,"Neo::OBone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OBone,0))){
    SWIG_fail_ptr("OBone_getSkinMatrix",1,SWIGTYPE_p_Neo__OBone);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getSkinMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OBone(void *obj) {
Neo::OBone *arg1 = (Neo::OBone *) obj;
delete arg1;
}
static int _proxy__wrap_new_OBone(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OBone);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OBone_attributes[] = {
    { "m_inversePoseMatrix", _wrap_OBone_m_inversePoseMatrix_get, _wrap_OBone_m_inversePoseMatrix_set },
    { "m_skinMatrix", _wrap_OBone_m_skinMatrix_get, _wrap_OBone_m_skinMatrix_set },
    {0,0,0}
};
static swig_lua_method swig_OBone_methods[]= {
    { "getType", _wrap_OBone_getType},
    { "processChildrenLinking", _wrap_OBone_processChildrenLinking},
    { "getInversePoseMatrix", _wrap_OBone_getInversePoseMatrix},
    { "getSkinMatrix", _wrap_OBone_getSkinMatrix},
    {0,0}
};
static swig_lua_method swig_OBone_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OBone_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OBone_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OBone_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OBone_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OBone_Sf_SwigStatic = {
    "OBone",
    swig_OBone_Sf_SwigStatic_methods,
    swig_OBone_Sf_SwigStatic_attributes,
    swig_OBone_Sf_SwigStatic_constants,
    swig_OBone_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OBone_bases[] = {0,0};
static const char *swig_OBone_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_OBone = { "OBone", "OBone", &SWIGTYPE_p_Neo__OBone,_proxy__wrap_new_OBone, swig_delete_OBone, swig_OBone_methods, swig_OBone_attributes, &swig_OBone_Sf_SwigStatic, swig_OBone_meta, swig_OBone_bases, swig_OBone_base_names };

static int _wrap_new_OCamera__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::OCamera",0,0)
  result = (Neo::OCamera *)new Neo::OCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OCamera__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::OCamera",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OCamera::OCamera",1,"Neo::OCamera const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("new_OCamera",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::OCamera *)new Neo::OCamera((Neo::OCamera const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OCamera(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OCamera__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OCamera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OCamera__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OCamera'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OCamera::OCamera()\n"
    "    Neo::OCamera::OCamera(Neo::OCamera const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OCamera_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OCamera::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getType",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getType",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_enableFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::enableFog",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::enableFog",1,"Neo::OCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OCamera::enableFog",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_enableFog",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableFog(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getFogColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFogColor",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFogColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (arg1)->getFogColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setFogColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::OCamera::setFogColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setFogColor",1,"Neo::OCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::setFogColor",2,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setFogColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_setFogColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setFogColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_enableOrtho(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::enableOrtho",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::enableOrtho",1,"Neo::OCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OCamera::enableOrtho",2,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_enableOrtho",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableOrtho(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setFov(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setFov",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setFov",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setFov",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setFov",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setFov(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setFogDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setFogDistance",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setFogDistance",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setFogDistance",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setFogDistance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setClippingNear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setClippingNear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setClippingNear",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setClippingNear",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setClippingNear",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setClippingNear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setClippingFar(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setClippingFar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setClippingFar",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setClippingFar",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setClippingFar",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->setClippingFar(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_isOrtho(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OCamera::isOrtho",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::isOrtho",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_isOrtho",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (bool)(arg1)->isOrtho();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_hasFog(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OCamera::hasFog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::hasFog",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_hasFog",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (bool)(arg1)->hasFog();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getClippingNear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getClippingNear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getClippingNear",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getClippingNear",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getClippingNear();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getClippingFar(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getClippingFar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getClippingFar",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getClippingFar",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getClippingFar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFov(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getFov",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFov",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFov",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getFov();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFogDistance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OCamera::getFogDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFogDistance",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFogDistance",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (float)(arg1)->getFogDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::OCamera::setClearColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setClearColor",1,"Neo::OCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::setClearColor",2,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setClearColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_setClearColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setClearColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getClearColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getClearColor",1,"Neo::OCamera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getClearColor",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = ((Neo::OCamera const *)arg1)->getClearColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getProjectedPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getProjectedPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getProjectedPoint",1,"Neo::OCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::getProjectedPoint",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getProjectedPoint",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_getProjectedPoint",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::OCamera const *)arg1)->getProjectedPoint((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getUnProjectedPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OCamera::getUnProjectedPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getUnProjectedPoint",1,"Neo::OCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OCamera::getUnProjectedPoint",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getUnProjectedPoint",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OCamera_getUnProjectedPoint",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = ((Neo::OCamera const *)arg1)->getUnProjectedPoint((Neo::Vector3 const &)*arg2);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getCurrentViewMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getCurrentViewMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getCurrentViewMatrix",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getCurrentViewMatrix",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getCurrentViewMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getCurrentProjMatrix(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Matrix4x4 *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getCurrentProjMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getCurrentProjMatrix",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getCurrentProjMatrix",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::Matrix4x4 *)(arg1)->getCurrentProjMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Matrix4x4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getCurrentViewport(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getCurrentViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getCurrentViewport",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getCurrentViewport",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (int *)(arg1)->getCurrentViewport();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getFrustum(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Frustum *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getFrustum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getFrustum",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getFrustum",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::Frustum *)(arg1)->getFrustum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Frustum,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setSceneLayer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::OCamera::setSceneLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setSceneLayer",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setSceneLayer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setSceneLayer",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setSceneLayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getSceneLayer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OCamera::getSceneLayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getSceneLayer",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getSceneLayer",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (unsigned int)(arg1)->getSceneLayer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setRenderColorTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::setRenderColorTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setRenderColorTexture",1,"Neo::OCamera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OCamera::setRenderColorTexture",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setRenderColorTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("OCamera_setRenderColorTexture",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->setRenderColorTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setRenderDepthTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::setRenderDepthTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setRenderDepthTexture",1,"Neo::OCamera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OCamera::setRenderDepthTexture",2,"Neo::TextureRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setRenderDepthTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__TextureRef,0))){
    SWIG_fail_ptr("OCamera_setRenderDepthTexture",2,SWIGTYPE_p_Neo__TextureRef);
  }
  
  (arg1)->setRenderDepthTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getRenderColorTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getRenderColorTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getRenderColorTexture",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getRenderColorTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::TextureRef *)(arg1)->getRenderColorTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getRenderDepthTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getRenderDepthTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getRenderDepthTexture",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getRenderDepthTexture",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::TextureRef *)(arg1)->getRenderDepthTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_drawSkybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::drawSkybox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::drawSkybox",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_drawSkybox",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->drawSkybox();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_loadSkybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::loadSkybox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::loadSkybox",1,"Neo::OCamera *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::OCamera::loadSkybox",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_loadSkybox",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->loadSkybox((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_getSkybox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::Skybox *result = 0 ;
  
  SWIG_check_num_args("Neo::OCamera::getSkybox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::getSkybox",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_getSkybox",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::Skybox *)(arg1)->getSkybox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Skybox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_updateListener(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::updateListener",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::updateListener",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_updateListener",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateListener();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_enable(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OCamera::enable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::enable",1,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_enable",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->enable();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setPerspectiveView(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::OCamera::setPerspectiveView",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setPerspectiveView",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setPerspectiveView",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::OCamera::setPerspectiveView",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::OCamera::setPerspectiveView",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::OCamera::setPerspectiveView",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setPerspectiveView",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->setPerspectiveView(arg2,arg3,arg4,arg5);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OCamera_setOrthoView(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  Neo::Matrix4x4 result;
  
  SWIG_check_num_args("Neo::OCamera::setOrthoView",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OCamera::setOrthoView",1,"Neo::OCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OCamera::setOrthoView",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::OCamera::setOrthoView",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo::OCamera::setOrthoView",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo::OCamera::setOrthoView",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo::OCamera::setOrthoView",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo::OCamera::setOrthoView",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OCamera_setOrthoView",1,SWIGTYPE_p_Neo__OCamera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  result = (arg1)->setOrthoView(arg2,arg3,arg4,arg5,arg6,arg7);
  {
    Neo::Matrix4x4 * resultptr = new Neo::Matrix4x4((const Neo::Matrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Matrix4x4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OCamera(void *obj) {
Neo::OCamera *arg1 = (Neo::OCamera *) obj;
delete arg1;
}
static int _proxy__wrap_new_OCamera(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OCamera);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OCamera_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OCamera_methods[]= {
    { "getType", _wrap_OCamera_getType},
    { "enableFog", _wrap_OCamera_enableFog},
    { "getFogColor", _wrap_OCamera_getFogColor},
    { "setFogColor", _wrap_OCamera_setFogColor},
    { "enableOrtho", _wrap_OCamera_enableOrtho},
    { "setFov", _wrap_OCamera_setFov},
    { "setFogDistance", _wrap_OCamera_setFogDistance},
    { "setClippingNear", _wrap_OCamera_setClippingNear},
    { "setClippingFar", _wrap_OCamera_setClippingFar},
    { "isOrtho", _wrap_OCamera_isOrtho},
    { "hasFog", _wrap_OCamera_hasFog},
    { "getClippingNear", _wrap_OCamera_getClippingNear},
    { "getClippingFar", _wrap_OCamera_getClippingFar},
    { "getFov", _wrap_OCamera_getFov},
    { "getFogDistance", _wrap_OCamera_getFogDistance},
    { "setClearColor", _wrap_OCamera_setClearColor},
    { "getClearColor", _wrap_OCamera_getClearColor},
    { "getProjectedPoint", _wrap_OCamera_getProjectedPoint},
    { "getUnProjectedPoint", _wrap_OCamera_getUnProjectedPoint},
    { "getCurrentViewMatrix", _wrap_OCamera_getCurrentViewMatrix},
    { "getCurrentProjMatrix", _wrap_OCamera_getCurrentProjMatrix},
    { "getCurrentViewport", _wrap_OCamera_getCurrentViewport},
    { "getFrustum", _wrap_OCamera_getFrustum},
    { "setSceneLayer", _wrap_OCamera_setSceneLayer},
    { "getSceneLayer", _wrap_OCamera_getSceneLayer},
    { "setRenderColorTexture", _wrap_OCamera_setRenderColorTexture},
    { "setRenderDepthTexture", _wrap_OCamera_setRenderDepthTexture},
    { "getRenderColorTexture", _wrap_OCamera_getRenderColorTexture},
    { "getRenderDepthTexture", _wrap_OCamera_getRenderDepthTexture},
    { "drawSkybox", _wrap_OCamera_drawSkybox},
    { "loadSkybox", _wrap_OCamera_loadSkybox},
    { "getSkybox", _wrap_OCamera_getSkybox},
    { "updateListener", _wrap_OCamera_updateListener},
    { "enable", _wrap_OCamera_enable},
    { "setPerspectiveView", _wrap_OCamera_setPerspectiveView},
    { "setOrthoView", _wrap_OCamera_setOrthoView},
    {0,0}
};
static swig_lua_method swig_OCamera_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OCamera_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OCamera_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OCamera_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OCamera_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OCamera_Sf_SwigStatic = {
    "OCamera",
    swig_OCamera_Sf_SwigStatic_methods,
    swig_OCamera_Sf_SwigStatic_attributes,
    swig_OCamera_Sf_SwigStatic_constants,
    swig_OCamera_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OCamera_bases[] = {0,0};
static const char *swig_OCamera_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_OCamera = { "OCamera", "OCamera", &SWIGTYPE_p_Neo__OCamera,_proxy__wrap_new_OCamera, swig_delete_OCamera, swig_OCamera_methods, swig_OCamera_attributes, &swig_OCamera_Sf_SwigStatic, swig_OCamera_meta, swig_OCamera_bases, swig_OCamera_base_names };

static int _wrap_new_OLight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::OLight::OLight",0,0)
  result = (Neo::OLight *)new Neo::OLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OLight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::OLight::OLight",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OLight::OLight",1,"Neo::OLight const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("new_OLight",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (Neo::OLight *)new Neo::OLight((Neo::OLight const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OLight(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OLight__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OLight, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OLight__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OLight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OLight::OLight()\n"
    "    Neo::OLight::OLight(Neo::OLight const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OLight_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OLight::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getType",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getType",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setLightType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setLightType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setLightType",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setLightType",2,"Neo::LIGHT_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setLightType",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (Neo::LIGHT_TYPES)(int)lua_tonumber(L, 2);
  (arg1)->setLightType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getLightType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES result;
  
  SWIG_check_num_args("Neo::OLight::getLightType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getLightType",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getLightType",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (Neo::LIGHT_TYPES)(arg1)->getLightType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_castShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OLight::castShadow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::castShadow",1,"Neo::OLight *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OLight::castShadow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_castShadow",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->castShadow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setShadowQuality(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setShadowQuality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setShadowQuality",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setShadowQuality",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setShadowQuality",1,SWIGTYPE_p_Neo__OLight);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setShadowQuality(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setShadowBias(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setShadowBias",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setShadowBias",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setShadowBias",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setShadowBias",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShadowBias(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setShadowBlur(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setShadowBlur",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setShadowBlur",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setShadowBlur",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setShadowBlur",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShadowBlur(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_isCastingShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OLight::isCastingShadow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::isCastingShadow",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_isCastingShadow",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (bool)(arg1)->isCastingShadow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getShadowQuality(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OLight::getShadowQuality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getShadowQuality",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getShadowQuality",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (unsigned int)(arg1)->getShadowQuality();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getShadowBias(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getShadowBias",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getShadowBias",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getShadowBias",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getShadowBias();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getShadowBlur(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getShadowBlur",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getShadowBlur",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getShadowBlur",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getShadowBlur();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setRadius",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setRadius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setRadius",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getRadius",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getRadius",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setIntensity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setIntensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setIntensity",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setIntensity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setIntensity",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setIntensity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::OLight::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setColor",1,"Neo::OLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OLight::setColor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setColor",1,SWIGTYPE_p_Neo__OLight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("OLight_setColor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setColor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getIntensity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getIntensity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getIntensity",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getIntensity",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getIntensity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OLight::getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getColor",1,"Neo::OLight const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getColor",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = ((Neo::OLight const *)arg1)->getColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getFinalColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::OLight::getFinalColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getFinalColor",1,"Neo::OLight const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getFinalColor",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = ((Neo::OLight const *)arg1)->getFinalColor();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setSpotAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setSpotAngle",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setSpotAngle",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setSpotAngle",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotAngle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_setSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OLight::setSpotExponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::setSpotExponent",1,"Neo::OLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OLight::setSpotExponent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_setSpotExponent",1,SWIGTYPE_p_Neo__OLight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotExponent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getSpotAngle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getSpotAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getSpotAngle",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getSpotAngle",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getSpotAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_getSpotExponent(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OLight::getSpotExponent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::getSpotExponent",1,"Neo::OLight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_getSpotExponent",1,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (float)(arg1)->getSpotExponent();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OLight_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OLight::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OLight::updateVisibility",1,"Neo::OLight *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OLight::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("OLight_updateVisibility",1,SWIGTYPE_p_Neo__OLight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OLight_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OLight(void *obj) {
Neo::OLight *arg1 = (Neo::OLight *) obj;
delete arg1;
}
static int _proxy__wrap_new_OLight(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OLight);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OLight_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OLight_methods[]= {
    { "getType", _wrap_OLight_getType},
    { "setLightType", _wrap_OLight_setLightType},
    { "getLightType", _wrap_OLight_getLightType},
    { "castShadow", _wrap_OLight_castShadow},
    { "setShadowQuality", _wrap_OLight_setShadowQuality},
    { "setShadowBias", _wrap_OLight_setShadowBias},
    { "setShadowBlur", _wrap_OLight_setShadowBlur},
    { "isCastingShadow", _wrap_OLight_isCastingShadow},
    { "getShadowQuality", _wrap_OLight_getShadowQuality},
    { "getShadowBias", _wrap_OLight_getShadowBias},
    { "getShadowBlur", _wrap_OLight_getShadowBlur},
    { "setRadius", _wrap_OLight_setRadius},
    { "getRadius", _wrap_OLight_getRadius},
    { "setIntensity", _wrap_OLight_setIntensity},
    { "setColor", _wrap_OLight_setColor},
    { "getIntensity", _wrap_OLight_getIntensity},
    { "getColor", _wrap_OLight_getColor},
    { "getFinalColor", _wrap_OLight_getFinalColor},
    { "setSpotAngle", _wrap_OLight_setSpotAngle},
    { "setSpotExponent", _wrap_OLight_setSpotExponent},
    { "getSpotAngle", _wrap_OLight_getSpotAngle},
    { "getSpotExponent", _wrap_OLight_getSpotExponent},
    { "updateVisibility", _wrap_OLight_updateVisibility},
    {0,0}
};
static swig_lua_method swig_OLight_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OLight_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OLight_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OLight_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OLight_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OLight_Sf_SwigStatic = {
    "OLight",
    swig_OLight_Sf_SwigStatic_methods,
    swig_OLight_Sf_SwigStatic_attributes,
    swig_OLight_Sf_SwigStatic_constants,
    swig_OLight_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OLight_bases[] = {0,0};
static const char *swig_OLight_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_OLight = { "OLight", "OLight", &SWIGTYPE_p_Neo__OLight,_proxy__wrap_new_OLight, swig_delete_OLight, swig_OLight_methods, swig_OLight_attributes, &swig_OLight_Sf_SwigStatic, swig_OLight_meta, swig_OLight_bases, swig_OLight_base_names };

static int _wrap_new_OSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::OSound::OSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::OSound",1,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("new_OSound",1,SWIGTYPE_p_Neo__SoundRef);
  }
  
  result = (Neo::OSound *)new Neo::OSound(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::OSound::OSound",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OSound::OSound",1,"Neo::OSound const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("new_OSound",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (Neo::OSound *)new Neo::OSound((Neo::OSound const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OSound(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__SoundRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OSound__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OSound, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OSound__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OSound::OSound(Neo::SoundRef *)\n"
    "    Neo::OSound::OSound(Neo::OSound const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OSound_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OSound::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getType",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getType",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setSoundRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::setSoundRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setSoundRef",1,"Neo::OSound *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OSound::setSoundRef",2,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setSoundRef",1,SWIGTYPE_p_Neo__OSound);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("OSound_setSoundRef",2,SWIGTYPE_p_Neo__SoundRef);
  }
  
  (arg1)->setSoundRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getSoundRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OSound::getSoundRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getSoundRef",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getSoundRef",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (Neo::SoundRef *)(arg1)->getSoundRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getSourceId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OSound::getSourceId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getSourceId",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getSourceId",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (unsigned int)(arg1)->getSourceId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setLooping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setLooping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setLooping",1,"Neo::OSound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OSound::setLooping",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setLooping",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setLooping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setRelative(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setRelative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setRelative",1,"Neo::OSound *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OSound::setRelative",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setRelative",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRelative(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setPitch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setPitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setPitch",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setPitch",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setPitch",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setGain",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setGain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setGain",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setRadius",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setRadius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setRadius",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_setRolloff(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OSound::setRolloff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::setRolloff",1,"Neo::OSound *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OSound::setRolloff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_setRolloff",1,SWIGTYPE_p_Neo__OSound);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRolloff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OSound::isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::isPlaying",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_isPlaying",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (bool)(arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_isLooping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OSound::isLooping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::isLooping",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_isLooping",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (bool)(arg1)->isLooping();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_isRelative(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OSound::isRelative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::isRelative",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_isRelative",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (bool)(arg1)->isRelative();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getPitch(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getPitch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getPitch",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getPitch",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getPitch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getGain(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getGain",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getGain",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getGain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getRadius",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getRadius",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getRolloff(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getRolloff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getRolloff",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getRolloff",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getRolloff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getTimePos(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getTimePos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getTimePos",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getTimePos",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getTimePos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_getSoundDuration(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OSound::getSoundDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::getSoundDuration",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_getSoundDuration",1,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (float)(arg1)->getSoundDuration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_play(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::play",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_play",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->play();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_pause(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::pause",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_pause",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_stop(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::stop",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_stop",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OSound_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  SWIG_check_num_args("Neo::OSound::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OSound::update",1,"Neo::OSound *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("OSound_update",1,SWIGTYPE_p_Neo__OSound);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OSound(void *obj) {
Neo::OSound *arg1 = (Neo::OSound *) obj;
delete arg1;
}
static int _proxy__wrap_new_OSound(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OSound);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OSound_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OSound_methods[]= {
    { "getType", _wrap_OSound_getType},
    { "setSoundRef", _wrap_OSound_setSoundRef},
    { "getSoundRef", _wrap_OSound_getSoundRef},
    { "getSourceId", _wrap_OSound_getSourceId},
    { "setLooping", _wrap_OSound_setLooping},
    { "setRelative", _wrap_OSound_setRelative},
    { "setPitch", _wrap_OSound_setPitch},
    { "setGain", _wrap_OSound_setGain},
    { "setRadius", _wrap_OSound_setRadius},
    { "setRolloff", _wrap_OSound_setRolloff},
    { "isPlaying", _wrap_OSound_isPlaying},
    { "isLooping", _wrap_OSound_isLooping},
    { "isRelative", _wrap_OSound_isRelative},
    { "getPitch", _wrap_OSound_getPitch},
    { "getGain", _wrap_OSound_getGain},
    { "getRadius", _wrap_OSound_getRadius},
    { "getRolloff", _wrap_OSound_getRolloff},
    { "getTimePos", _wrap_OSound_getTimePos},
    { "getSoundDuration", _wrap_OSound_getSoundDuration},
    { "play", _wrap_OSound_play},
    { "pause", _wrap_OSound_pause},
    { "stop", _wrap_OSound_stop},
    { "update", _wrap_OSound_update},
    {0,0}
};
static swig_lua_method swig_OSound_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OSound_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OSound_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OSound_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OSound_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OSound_Sf_SwigStatic = {
    "OSound",
    swig_OSound_Sf_SwigStatic_methods,
    swig_OSound_Sf_SwigStatic_attributes,
    swig_OSound_Sf_SwigStatic_constants,
    swig_OSound_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OSound_bases[] = {0,0};
static const char *swig_OSound_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_OSound = { "OSound", "OSound", &SWIGTYPE_p_Neo__OSound,_proxy__wrap_new_OSound, swig_delete_OSound, swig_OSound_methods, swig_OSound_attributes, &swig_OSound_Sf_SwigStatic, swig_OSound_meta, swig_OSound_bases, swig_OSound_base_names };

static int _wrap_new_PhysicsConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::PhysicsConstraint",0,0)
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::PhysicsConstraint",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::PhysicsConstraint",1,"Neo::PhysicsConstraint const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("new_PhysicsConstraint",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint((Neo::PhysicsConstraint const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsConstraint(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsConstraint__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsConstraint__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsConstraint::PhysicsConstraint()\n"
    "    Neo::PhysicsConstraint::PhysicsConstraint(Neo::PhysicsConstraint const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsConstraint_constraintId_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::constraintId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::constraintId",1,"Neo::PhysicsConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::constraintId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_constraintId_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->constraintId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_constraintId_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::constraintId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::constraintId",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_constraintId_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (unsigned int) ((arg1)->constraintId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentObjectId_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentObjectId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentObjectId",1,"Neo::PhysicsConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::parentObjectId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentObjectId_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->parentObjectId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentObjectId_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentObjectId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentObjectId",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentObjectId_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (unsigned int) ((arg1)->parentObjectId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentName_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::String *arg2 = (Neo::String *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentName",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::parentName",2,"Neo::String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentName_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentName_set",2,SWIGTYPE_p_Neo__String);
  }
  
  if (arg1) (arg1)->parentName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_parentName_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::String *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::parentName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::parentName",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_parentName_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::String *)& ((arg1)->parentName);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_pivot_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::pivot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::pivot",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::pivot",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_pivot_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_pivot_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->pivot = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_pivot_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::pivot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::pivot",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_pivot_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->pivot);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerLinearLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerLinearLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerLinearLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerLinearLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerLinearLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerLinearLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->lowerLinearLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerLinearLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerLinearLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerLinearLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerLinearLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->lowerLinearLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperLinearLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperLinearLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperLinearLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::upperLinearLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperLinearLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperLinearLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->upperLinearLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperLinearLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperLinearLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperLinearLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperLinearLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->upperLinearLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerAngularLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerAngularLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerAngularLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerAngularLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerAngularLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerAngularLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->lowerAngularLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_lowerAngularLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::lowerAngularLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::lowerAngularLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_lowerAngularLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->lowerAngularLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperAngularLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *arg2 = (Neo::Vector3 *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperAngularLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperAngularLimit",1,"Neo::PhysicsConstraint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::upperAngularLimit",2,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperAngularLimit_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperAngularLimit_set",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  if (arg1) (arg1)->upperAngularLimit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_upperAngularLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::upperAngularLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::upperAngularLimit",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_upperAngularLimit_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (Neo::Vector3 *)& ((arg1)->upperAngularLimit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_disableParentCollision_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::disableParentCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::disableParentCollision",1,"Neo::PhysicsConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::PhysicsConstraint::disableParentCollision",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_disableParentCollision_set",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->disableParentCollision = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsConstraint_disableParentCollision_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsConstraint::disableParentCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsConstraint::disableParentCollision",1,"Neo::PhysicsConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsConstraint,0))){
    SWIG_fail_ptr("PhysicsConstraint_disableParentCollision_get",1,SWIGTYPE_p_Neo__PhysicsConstraint);
  }
  
  result = (bool) ((arg1)->disableParentCollision);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsConstraint(void *obj) {
Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhysicsConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhysicsConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhysicsConstraint_attributes[] = {
    { "constraintId", _wrap_PhysicsConstraint_constraintId_get, _wrap_PhysicsConstraint_constraintId_set },
    { "parentObjectId", _wrap_PhysicsConstraint_parentObjectId_get, _wrap_PhysicsConstraint_parentObjectId_set },
    { "parentName", _wrap_PhysicsConstraint_parentName_get, _wrap_PhysicsConstraint_parentName_set },
    { "pivot", _wrap_PhysicsConstraint_pivot_get, _wrap_PhysicsConstraint_pivot_set },
    { "lowerLinearLimit", _wrap_PhysicsConstraint_lowerLinearLimit_get, _wrap_PhysicsConstraint_lowerLinearLimit_set },
    { "upperLinearLimit", _wrap_PhysicsConstraint_upperLinearLimit_get, _wrap_PhysicsConstraint_upperLinearLimit_set },
    { "lowerAngularLimit", _wrap_PhysicsConstraint_lowerAngularLimit_get, _wrap_PhysicsConstraint_lowerAngularLimit_set },
    { "upperAngularLimit", _wrap_PhysicsConstraint_upperAngularLimit_get, _wrap_PhysicsConstraint_upperAngularLimit_set },
    { "disableParentCollision", _wrap_PhysicsConstraint_disableParentCollision_get, _wrap_PhysicsConstraint_disableParentCollision_set },
    {0,0,0}
};
static swig_lua_method swig_PhysicsConstraint_methods[]= {
    {0,0}
};
static swig_lua_method swig_PhysicsConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsConstraint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsConstraint_Sf_SwigStatic = {
    "PhysicsConstraint",
    swig_PhysicsConstraint_Sf_SwigStatic_methods,
    swig_PhysicsConstraint_Sf_SwigStatic_attributes,
    swig_PhysicsConstraint_Sf_SwigStatic_constants,
    swig_PhysicsConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsConstraint_bases[] = {0};
static const char *swig_PhysicsConstraint_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsConstraint = { "PhysicsConstraint", "PhysicsConstraint", &SWIGTYPE_p_Neo__PhysicsConstraint,_proxy__wrap_new_PhysicsConstraint, swig_delete_PhysicsConstraint, swig_PhysicsConstraint_methods, swig_PhysicsConstraint_attributes, &swig_PhysicsConstraint_Sf_SwigStatic, swig_PhysicsConstraint_meta, swig_PhysicsConstraint_bases, swig_PhysicsConstraint_base_names };

static int _wrap_new_PhysicsProperties__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::PhysicsProperties",0,0)
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsProperties__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::PhysicsProperties",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::PhysicsProperties",1,"Neo::PhysicsProperties const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("new_PhysicsProperties",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties((Neo::PhysicsProperties const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsProperties(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PhysicsProperties__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__PhysicsProperties, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsProperties__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsProperties'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::PhysicsProperties::PhysicsProperties()\n"
    "    Neo::PhysicsProperties::PhysicsProperties(Neo::PhysicsProperties const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsProperties_deleteConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::deleteConstraint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::deleteConstraint",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_deleteConstraint",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  (arg1)->deleteConstraint();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_createConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::createConstraint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::createConstraint",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_createConstraint",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::PhysicsConstraint *)(arg1)->createConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getConstraint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getConstraint",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getConstraint",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::PhysicsConstraint *)(arg1)->getConstraint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setShapeId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setShapeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setShapeId",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setShapeId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setShapeId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setShapeId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getShapeId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getShapeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getShapeId",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getShapeId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (unsigned int)(arg1)->getShapeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setCollisionObjectId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setCollisionObjectId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionObjectId",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionObjectId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setCollisionObjectId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCollisionObjectId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getCollisionObjectId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getCollisionObjectId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getCollisionObjectId",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getCollisionObjectId",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (unsigned int)(arg1)->getCollisionObjectId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionShape",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setCollisionShape",2,"Neo::COLLISION_SHAPE_TYPE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setCollisionShape",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (Neo::COLLISION_SHAPE_TYPE)(int)lua_tonumber(L, 2);
  (arg1)->setCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getCollisionShape",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getCollisionShape",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::COLLISION_SHAPE_TYPE)(arg1)->getCollisionShape();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setGhost(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setGhost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setGhost",1,"Neo::PhysicsProperties *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setGhost",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setGhost",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setGhost(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_isGhost(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::isGhost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::isGhost",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_isGhost",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (bool)(arg1)->isGhost();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setMass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setMass",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setMass",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setMass",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getMass(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getMass",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getMass",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setFriction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setFriction",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setFriction",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setFriction",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getFriction(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getFriction",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getFriction",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getFriction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setRestitution",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setRestitution",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setRestitution",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRestitution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getRestitution",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getRestitution",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getRestitution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setLinearDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearDamping",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setLinearDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLinearDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getLinearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getLinearDamping",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getLinearDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getLinearDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setAngularDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularDamping",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setAngularDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAngularDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getAngularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getAngularDamping",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getAngularDamping",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getAngularDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setAngularFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularFactor",1,"Neo::PhysicsProperties *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setAngularFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setAngularFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAngularFactor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getAngularFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getAngularFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getAngularFactor",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getAngularFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (float)(arg1)->getAngularFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_setLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::setLinearFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearFactor",1,"Neo::PhysicsProperties *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::PhysicsProperties::setLinearFactor",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_setLinearFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("PhysicsProperties_setLinearFactor",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setLinearFactor((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsProperties_getLinearFactor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Neo::PhysicsProperties::getLinearFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::PhysicsProperties::getLinearFactor",1,"Neo::PhysicsProperties *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__PhysicsProperties,0))){
    SWIG_fail_ptr("PhysicsProperties_getLinearFactor",1,SWIGTYPE_p_Neo__PhysicsProperties);
  }
  
  result = (Neo::Vector3 *)(arg1)->getLinearFactor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsProperties(void *obj) {
Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhysicsProperties(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhysicsProperties);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhysicsProperties_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsProperties_methods[]= {
    { "deleteConstraint", _wrap_PhysicsProperties_deleteConstraint},
    { "createConstraint", _wrap_PhysicsProperties_createConstraint},
    { "getConstraint", _wrap_PhysicsProperties_getConstraint},
    { "setShapeId", _wrap_PhysicsProperties_setShapeId},
    { "getShapeId", _wrap_PhysicsProperties_getShapeId},
    { "setCollisionObjectId", _wrap_PhysicsProperties_setCollisionObjectId},
    { "getCollisionObjectId", _wrap_PhysicsProperties_getCollisionObjectId},
    { "setCollisionShape", _wrap_PhysicsProperties_setCollisionShape},
    { "getCollisionShape", _wrap_PhysicsProperties_getCollisionShape},
    { "setGhost", _wrap_PhysicsProperties_setGhost},
    { "isGhost", _wrap_PhysicsProperties_isGhost},
    { "setMass", _wrap_PhysicsProperties_setMass},
    { "getMass", _wrap_PhysicsProperties_getMass},
    { "setFriction", _wrap_PhysicsProperties_setFriction},
    { "getFriction", _wrap_PhysicsProperties_getFriction},
    { "setRestitution", _wrap_PhysicsProperties_setRestitution},
    { "getRestitution", _wrap_PhysicsProperties_getRestitution},
    { "setLinearDamping", _wrap_PhysicsProperties_setLinearDamping},
    { "getLinearDamping", _wrap_PhysicsProperties_getLinearDamping},
    { "setAngularDamping", _wrap_PhysicsProperties_setAngularDamping},
    { "getAngularDamping", _wrap_PhysicsProperties_getAngularDamping},
    { "setAngularFactor", _wrap_PhysicsProperties_setAngularFactor},
    { "getAngularFactor", _wrap_PhysicsProperties_getAngularFactor},
    { "setLinearFactor", _wrap_PhysicsProperties_setLinearFactor},
    { "getLinearFactor", _wrap_PhysicsProperties_getLinearFactor},
    {0,0}
};
static swig_lua_method swig_PhysicsProperties_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsProperties_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsProperties_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsProperties_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsProperties_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsProperties_Sf_SwigStatic = {
    "PhysicsProperties",
    swig_PhysicsProperties_Sf_SwigStatic_methods,
    swig_PhysicsProperties_Sf_SwigStatic_attributes,
    swig_PhysicsProperties_Sf_SwigStatic_constants,
    swig_PhysicsProperties_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsProperties_bases[] = {0};
static const char *swig_PhysicsProperties_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsProperties = { "PhysicsProperties", "PhysicsProperties", &SWIGTYPE_p_Neo__PhysicsProperties,_proxy__wrap_new_PhysicsProperties, swig_delete_PhysicsProperties, swig_PhysicsProperties_methods, swig_PhysicsProperties_attributes, &swig_PhysicsProperties_Sf_SwigStatic, swig_PhysicsProperties_meta, swig_PhysicsProperties_bases, swig_PhysicsProperties_base_names };

static int _wrap_new_OEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::OEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::OEntity",1,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("new_OEntity",1,SWIGTYPE_p_Neo__MeshRef);
  }
  
  result = (Neo::OEntity *)new Neo::OEntity(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::OEntity",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OEntity::OEntity",1,"Neo::OEntity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("new_OEntity",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::OEntity *)new Neo::OEntity((Neo::OEntity const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OEntity(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__MeshRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OEntity__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OEntity__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OEntity::OEntity(Neo::MeshRef *)\n"
    "    Neo::OEntity::OEntity(Neo::OEntity const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OEntity_getMaterial__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  size_t arg2 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getMaterial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getMaterial",1,"Neo::OEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OEntity::getMaterial",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getMaterial",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Neo::Material *)(arg1)->getMaterial(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getMaterial__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::Material *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getMaterial",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getMaterial",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getMaterial",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::Material *)(arg1)->getMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Material,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getMaterial(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OEntity_getMaterial__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OEntity_getMaterial__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OEntity_getMaterial'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OEntity::getMaterial(size_t)\n"
    "    Neo::OEntity::getMaterial()\n");
  lua_error(L);return 0;
}


static int _wrap_OEntity_getMaterialsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Neo::OEntity::getMaterialsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getMaterialsNumber",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getMaterialsNumber",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (arg1)->getMaterialsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_hasWireframe(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::hasWireframe",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::hasWireframe",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_hasWireframe",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->hasWireframe();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_enableWireframe(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::enableWireframe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::enableWireframe",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::enableWireframe",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_enableWireframe",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableWireframe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_hasTransparency(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::hasTransparency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::hasTransparency",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_hasTransparency",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->hasTransparency();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_enablePhysics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::Scene *arg2 = (Neo::Scene *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::enablePhysics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::enablePhysics",1,"Neo::OEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OEntity::enablePhysics",2,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_enablePhysics",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("OEntity_enablePhysics",2,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::PhysicsProperties *)(arg1)->enablePhysics(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_enablePhysics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::enablePhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::enablePhysics",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_enablePhysics",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::PhysicsProperties *)(arg1)->enablePhysics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_enablePhysics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OEntity_enablePhysics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OEntity_enablePhysics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OEntity_enablePhysics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OEntity::enablePhysics(Neo::Scene *)\n"
    "    Neo::OEntity::enablePhysics()\n");
  lua_error(L);return 0;
}


static int _wrap_OEntity_isColliding__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isColliding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isColliding",1,"Neo::OEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OEntity::isColliding",2,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isColliding",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isColliding",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isColliding(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isColliding__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isColliding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isColliding",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isColliding",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isColliding();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isColliding(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OEntity_isColliding__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OEntity_isColliding__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OEntity_isColliding'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OEntity::isColliding(Neo::OEntity *)\n"
    "    Neo::OEntity::isColliding()\n");
  lua_error(L);return 0;
}


static int _wrap_OEntity_enableOccluder(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::enableOccluder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::enableOccluder",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::enableOccluder",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_enableOccluder",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableOccluder(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isOccluder(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isOccluder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isOccluder",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isOccluder",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isOccluder();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OEntity::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getType",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getType",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setActive",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::setActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setActive",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setInvisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setInvisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setInvisible",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::setInvisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setInvisible",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInvisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isInvisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isInvisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isInvisible",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isInvisible",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isInvisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getMesh(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::Mesh *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getMesh",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getMesh",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::Mesh *)(arg1)->getMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Mesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setMeshRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::setMeshRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setMeshRef",1,"Neo::OEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OEntity::setMeshRef",2,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setMeshRef",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("OEntity_setMeshRef",2,SWIGTYPE_p_Neo__MeshRef);
  }
  
  (arg1)->setMeshRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getMeshRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getMeshRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getMeshRef",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getMeshRef",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::MeshRef *)(arg1)->getMeshRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_changeAnimation(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::changeAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::changeAnimation",1,"Neo::OEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OEntity::changeAnimation",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_changeAnimation",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->changeAnimation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_isAnimationOver(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::isAnimationOver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::isAnimationOver",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_isAnimationOver",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->isAnimationOver();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setAnimationSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setAnimationSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setAnimationSpeed",1,"Neo::OEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OEntity::setAnimationSpeed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setAnimationSpeed",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAnimationSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_setCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::setCurrentFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::setCurrentFrame",1,"Neo::OEntity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OEntity::setCurrentFrame",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_setCurrentFrame",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCurrentFrame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getAnimationId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::OEntity::getAnimationId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getAnimationId",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getAnimationId",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (unsigned int)(arg1)->getAnimationId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getAnimationSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OEntity::getAnimationSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getAnimationSpeed",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getAnimationSpeed",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (float)(arg1)->getAnimationSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OEntity::getCurrentFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getCurrentFrame",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getCurrentFrame",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (float)(arg1)->getCurrentFrame();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_deletePhysicsProperties(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::deletePhysicsProperties",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::deletePhysicsProperties",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_deletePhysicsProperties",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->deletePhysicsProperties();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_createPhysicsProperties(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::createPhysicsProperties",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::createPhysicsProperties",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_createPhysicsProperties",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::PhysicsProperties *)(arg1)->createPhysicsProperties();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getPhysicsProperties(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getPhysicsProperties",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getPhysicsProperties",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getPhysicsProperties",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::PhysicsProperties *)(arg1)->getPhysicsProperties();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsProperties,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::OEntity::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::getBoundingBox",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_getBoundingBox",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_hasShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::OEntity::hasShadow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::hasShadow",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_hasShadow",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (bool)(arg1)->hasShadow();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_enableShadow(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::OEntity::enableShadow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::enableShadow",1,"Neo::OEntity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::OEntity::enableShadow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_enableShadow",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enableShadow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::update",1,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_update",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OEntity_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OEntity::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OEntity::updateVisibility",1,"Neo::OEntity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OEntity::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("OEntity_updateVisibility",1,SWIGTYPE_p_Neo__OEntity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OEntity_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OEntity(void *obj) {
Neo::OEntity *arg1 = (Neo::OEntity *) obj;
delete arg1;
}
static int _proxy__wrap_new_OEntity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OEntity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OEntity_methods[]= {
    { "getMaterial", _wrap_OEntity_getMaterial},
    { "getMaterialsNumber", _wrap_OEntity_getMaterialsNumber},
    { "hasWireframe", _wrap_OEntity_hasWireframe},
    { "enableWireframe", _wrap_OEntity_enableWireframe},
    { "hasTransparency", _wrap_OEntity_hasTransparency},
    { "enablePhysics", _wrap_OEntity_enablePhysics},
    { "isColliding", _wrap_OEntity_isColliding},
    { "enableOccluder", _wrap_OEntity_enableOccluder},
    { "isOccluder", _wrap_OEntity_isOccluder},
    { "getType", _wrap_OEntity_getType},
    { "setActive", _wrap_OEntity_setActive},
    { "setInvisible", _wrap_OEntity_setInvisible},
    { "isInvisible", _wrap_OEntity_isInvisible},
    { "getMesh", _wrap_OEntity_getMesh},
    { "setMeshRef", _wrap_OEntity_setMeshRef},
    { "getMeshRef", _wrap_OEntity_getMeshRef},
    { "changeAnimation", _wrap_OEntity_changeAnimation},
    { "isAnimationOver", _wrap_OEntity_isAnimationOver},
    { "setAnimationSpeed", _wrap_OEntity_setAnimationSpeed},
    { "setCurrentFrame", _wrap_OEntity_setCurrentFrame},
    { "getAnimationId", _wrap_OEntity_getAnimationId},
    { "getAnimationSpeed", _wrap_OEntity_getAnimationSpeed},
    { "getCurrentFrame", _wrap_OEntity_getCurrentFrame},
    { "deletePhysicsProperties", _wrap_OEntity_deletePhysicsProperties},
    { "createPhysicsProperties", _wrap_OEntity_createPhysicsProperties},
    { "getPhysicsProperties", _wrap_OEntity_getPhysicsProperties},
    { "getBoundingBox", _wrap_OEntity_getBoundingBox},
    { "hasShadow", _wrap_OEntity_hasShadow},
    { "enableShadow", _wrap_OEntity_enableShadow},
    { "update", _wrap_OEntity_update},
    { "updateVisibility", _wrap_OEntity_updateVisibility},
    {0,0}
};
static swig_lua_method swig_OEntity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OEntity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OEntity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OEntity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OEntity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OEntity_Sf_SwigStatic = {
    "OEntity",
    swig_OEntity_Sf_SwigStatic_methods,
    swig_OEntity_Sf_SwigStatic_attributes,
    swig_OEntity_Sf_SwigStatic_constants,
    swig_OEntity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OEntity_bases[] = {0,0};
static const char *swig_OEntity_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_OEntity = { "OEntity", "OEntity", &SWIGTYPE_p_Neo__OEntity,_proxy__wrap_new_OEntity, swig_delete_OEntity, swig_OEntity_methods, swig_OEntity_attributes, &swig_OEntity_Sf_SwigStatic, swig_OEntity_meta, swig_OEntity_bases, swig_OEntity_base_names };

static int _wrap_new_OText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::OText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::OText",1,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("new_OText",1,SWIGTYPE_p_Neo__FontRef);
  }
  
  result = (Neo::OText *)new Neo::OText(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::OText",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Neo::OText::OText",1,"Neo::OText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("new_OText",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::OText *)new Neo::OText((Neo::OText const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OText(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__FontRef, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OText__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__OText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_OText__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::OText::OText(Neo::FontRef *)\n"
    "    Neo::OText::OText(Neo::OText const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OText_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::OText::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getType",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getType",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setFontRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  
  SWIG_check_num_args("Neo::OText::setFontRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setFontRef",1,"Neo::OText *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OText::setFontRef",2,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setFontRef",1,SWIGTYPE_p_Neo__OText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("OText_setFontRef",2,SWIGTYPE_p_Neo__FontRef);
  }
  
  (arg1)->setFontRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Font *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getFont",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getFont",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::Font *)(arg1)->getFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Font,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getFontRef(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getFontRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getFontRef",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getFontRef",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::FontRef *)(arg1)->getFontRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setText(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::OText::setText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setText",1,"Neo::OText *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::OText::setText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setText",1,SWIGTYPE_p_Neo__OText);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setText((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getText(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getText",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getText",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (char *)(arg1)->getText();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getLinesOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  vector< float > *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getLinesOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getLinesOffset",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getLinesOffset",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (vector< float > *)(arg1)->getLinesOffset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setAlign(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES arg2 ;
  
  SWIG_check_num_args("Neo::OText::setAlign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setAlign",1,"Neo::OText *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OText::setAlign",2,"Neo::TEXT_ALIGN_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setAlign",1,SWIGTYPE_p_Neo__OText);
  }
  
  arg2 = (Neo::TEXT_ALIGN_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setAlign(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getAlign(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES result;
  
  SWIG_check_num_args("Neo::OText::getAlign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getAlign",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getAlign",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::TEXT_ALIGN_MODES)(arg1)->getAlign();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo::OText::setSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setSize",1,"Neo::OText *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::OText::setSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setSize",1,SWIGTYPE_p_Neo__OText);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::OText::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getSize",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getSize",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (float)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_setColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Vector4 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::OText::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::setColor",1,"Neo::OText *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::OText::setColor",2,"Neo::Vector4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_setColor",1,SWIGTYPE_p_Neo__OText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("OText_setColor",2,SWIGTYPE_p_Neo__Vector4);
  }
  
  (arg1)->setColor((Neo::Vector4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo::OText::getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getColor",1,"Neo::OText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getColor",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = ((Neo::OText const *)arg1)->getColor();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::Box3d *result = 0 ;
  
  SWIG_check_num_args("Neo::OText::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::getBoundingBox",1,"Neo::OText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_getBoundingBox",1,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::Box3d *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Box3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OText_updateVisibility(lua_State* L) {
  int SWIG_arg = 0;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::OText::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::OText::updateVisibility",1,"Neo::OText *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::OText::updateVisibility",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("OText_updateVisibility",1,SWIGTYPE_p_Neo__OText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("OText_updateVisibility",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OText(void *obj) {
Neo::OText *arg1 = (Neo::OText *) obj;
delete arg1;
}
static int _proxy__wrap_new_OText(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OText);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OText_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OText_methods[]= {
    { "getType", _wrap_OText_getType},
    { "setFontRef", _wrap_OText_setFontRef},
    { "getFont", _wrap_OText_getFont},
    { "getFontRef", _wrap_OText_getFontRef},
    { "setText", _wrap_OText_setText},
    { "getText", _wrap_OText_getText},
    { "getLinesOffset", _wrap_OText_getLinesOffset},
    { "setAlign", _wrap_OText_setAlign},
    { "getAlign", _wrap_OText_getAlign},
    { "setSize", _wrap_OText_setSize},
    { "getSize", _wrap_OText_getSize},
    { "setColor", _wrap_OText_setColor},
    { "getColor", _wrap_OText_getColor},
    { "getBoundingBox", _wrap_OText_getBoundingBox},
    { "updateVisibility", _wrap_OText_updateVisibility},
    {0,0}
};
static swig_lua_method swig_OText_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OText_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OText_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OText_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OText_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OText_Sf_SwigStatic = {
    "OText",
    swig_OText_Sf_SwigStatic_methods,
    swig_OText_Sf_SwigStatic_attributes,
    swig_OText_Sf_SwigStatic_constants,
    swig_OText_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OText_bases[] = {0,0};
static const char *swig_OText_base_names[] = {"Neo::Object3d *",0};
static swig_lua_class _wrap_class_OText = { "OText", "OText", &SWIGTYPE_p_Neo__OText,_proxy__wrap_new_OText, swig_delete_OText, swig_OText_methods, swig_OText_attributes, &swig_OText_Sf_SwigStatic, swig_OText_meta, swig_OText_bases, swig_OText_base_names };

static int _wrap_new_Scene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::Scene",0,0)
  result = (Neo::Scene *)new Neo::Scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getAdditionalData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Scene::AdditionalData *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getAdditionalData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getAdditionalData",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getAdditionalData",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::Scene::AdditionalData *)(arg1)->getAdditionalData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene__AdditionalData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setAdditionalData(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Scene::AdditionalData *arg2 = (Neo::Scene::AdditionalData *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::setAdditionalData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setAdditionalData",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::setAdditionalData",2,"Neo::Scene::AdditionalData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setAdditionalData",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Scene__AdditionalData,0))){
    SWIG_fail_ptr("Scene_setAdditionalData",2,SWIGTYPE_p_Neo__Scene__AdditionalData);
  }
  
  (arg1)->setAdditionalData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::setName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setName((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getName",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (char *)(arg1)->getName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getAmbientLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Scene::getAmbientLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getAmbientLight",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getAmbientLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (arg1)->getAmbientLight();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setAmbientLight(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Neo::Scene::setAmbientLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setAmbientLight",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::setAmbientLight",2,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setAmbientLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Scene_setAmbientLight",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  (arg1)->setAmbientLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setDataMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES arg2 ;
  
  SWIG_check_num_args("Neo::Scene::setDataMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setDataMode",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::setDataMode",2,"Neo::M_DATA_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setDataMode",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (Neo::M_DATA_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setDataMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getDataMode(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES result;
  
  SWIG_check_num_args("Neo::Scene::getDataMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getDataMode",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getDataMode",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::M_DATA_MODES)(arg1)->getDataMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setScriptFilename(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::setScriptFilename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setScriptFilename",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::setScriptFilename",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setScriptFilename",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setScriptFilename((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getScriptFilename(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getScriptFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getScriptFilename",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getScriptFilename",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (char *)(arg1)->getScriptFilename();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setGravity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Neo::Scene::setGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setGravity",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::setGravity",2,"Neo::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setGravity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Scene_setGravity",2,SWIGTYPE_p_Neo__Vector3);
  }
  
  (arg1)->setGravity((Neo::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getGravity(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Neo::Scene::getGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getGravity",1,"Neo::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getGravity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = ((Neo::Scene const *)arg1)->getGravity();
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_playLoopSounds(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::playLoopSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::playLoopSounds",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_playLoopSounds",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->playLoopSounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_stopAllSounds(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::stopAllSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::stopAllSounds",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_stopAllSounds",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->stopAllSounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_deleteObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::deleteObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::deleteObject",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::deleteObject",2,"Neo::Object3d *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_deleteObject",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Scene_deleteObject",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  (arg1)->deleteObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewCamera__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewCamera",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewCamera",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::OCamera *)(arg1)->addNewCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewCamera__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewCamera",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewCamera",2,"Neo::OCamera const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewCamera",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Scene_addNewCamera",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  result = (Neo::OCamera *)(arg1)->addNewCamera((Neo::OCamera const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewCamera(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Scene_addNewCamera__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OCamera, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewCamera__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewCamera'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewCamera()\n"
    "    Neo::Scene::addNewCamera(Neo::OCamera const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewLight__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewLight",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::OLight *)(arg1)->addNewLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewGroup__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewGroup",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewGroup",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::Object3d *)(arg1)->addNewGroup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewGroup__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewGroup",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewGroup",2,"Neo::Object3d const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewGroup",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Object3d,0))){
    SWIG_fail_ptr("Scene_addNewGroup",2,SWIGTYPE_p_Neo__Object3d);
  }
  
  result = (Neo::Object3d *)(arg1)->addNewGroup((Neo::Object3d const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewGroup(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Scene_addNewGroup__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Object3d, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewGroup__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewGroup'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewGroup()\n"
    "    Neo::Scene::addNewGroup(Neo::Object3d const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewLight__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *arg2 = 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewLight",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewLight",2,"Neo::OLight const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewLight",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OLight,0))){
    SWIG_fail_ptr("Scene_addNewLight",2,SWIGTYPE_p_Neo__OLight);
  }
  
  result = (Neo::OLight *)(arg1)->addNewLight((Neo::OLight const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewLight(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Scene_addNewLight__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OLight, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewLight__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewLight'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewLight()\n"
    "    Neo::Scene::addNewLight(Neo::OLight const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewEntity",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::addNewEntity",2,"Neo::MeshRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewEntity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__MeshRef,0))){
    SWIG_fail_ptr("Scene_addNewEntity",2,SWIGTYPE_p_Neo__MeshRef);
  }
  
  result = (Neo::OEntity *)(arg1)->addNewEntity(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewEntity",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewEntity",2,"Neo::OEntity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewEntity",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_addNewEntity",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  result = (Neo::OEntity *)(arg1)->addNewEntity((Neo::OEntity const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewEntity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__MeshRef, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewEntity__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OEntity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewEntity__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewEntity(Neo::MeshRef *)\n"
    "    Neo::Scene::addNewEntity(Neo::OEntity const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewSound",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::addNewSound",2,"Neo::SoundRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewSound",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SoundRef,0))){
    SWIG_fail_ptr("Scene_addNewSound",2,SWIGTYPE_p_Neo__SoundRef);
  }
  
  result = (Neo::OSound *)(arg1)->addNewSound(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OSound *arg2 = 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewSound",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewSound",2,"Neo::OSound const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewSound",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OSound,0))){
    SWIG_fail_ptr("Scene_addNewSound",2,SWIGTYPE_p_Neo__OSound);
  }
  
  result = (Neo::OSound *)(arg1)->addNewSound((Neo::OSound const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewSound(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__SoundRef, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewSound__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OSound, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewSound__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewSound(Neo::SoundRef *)\n"
    "    Neo::Scene::addNewSound(Neo::OSound const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_addNewText__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewText",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::addNewText",2,"Neo::FontRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewText",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__FontRef,0))){
    SWIG_fail_ptr("Scene_addNewText",2,SWIGTYPE_p_Neo__FontRef);
  }
  
  result = (Neo::OText *)(arg1)->addNewText(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewText__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OText *arg2 = 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::addNewText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::addNewText",1,"Neo::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo::Scene::addNewText",2,"Neo::OText const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_addNewText",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OText,0))){
    SWIG_fail_ptr("Scene_addNewText",2,SWIGTYPE_p_Neo__OText);
  }
  
  result = (Neo::OText *)(arg1)->addNewText((Neo::OText const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_addNewText(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__FontRef, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewText__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__OText, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Scene_addNewText__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Scene_addNewText'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Scene::addNewText(Neo::FontRef *)\n"
    "    Neo::Scene::addNewText(Neo::OText const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_getObjectsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getObjectsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getObjectsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCamerasNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getCamerasNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCamerasNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCamerasNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getCamerasNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getLightsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getLightsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getLightsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getLightsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getLightsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getEntitiesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getEntitiesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getEntitiesNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getEntitiesNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getEntitiesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getSoundsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getSoundsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getSoundsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getSoundsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getSoundsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getTextsNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getTextsNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getTextsNumber",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getTextsNumber",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getTextsNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setCurrentCameraId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Scene::setCurrentCameraId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setCurrentCameraId",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::setCurrentCameraId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setCurrentCameraId",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCurrentCameraId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCurrentCameraId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Scene::getCurrentCameraId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCurrentCameraId",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCurrentCameraId",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (unsigned int)(arg1)->getCurrentCameraId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setCurrentCamera(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::setCurrentCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setCurrentCamera",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::setCurrentCamera",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setCurrentCamera",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Scene_setCurrentCamera",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->setCurrentCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCurrentCamera(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getCurrentCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCurrentCamera",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCurrentCamera",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (Neo::OCamera *)(arg1)->getCurrentCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_setCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo::Scene::setCurrentFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::setCurrentFrame",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::setCurrentFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_setCurrentFrame",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCurrentFrame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCurrentFrame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo::Scene::getCurrentFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCurrentFrame",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCurrentFrame",1,SWIGTYPE_p_Neo__Scene);
  }
  
  result = (int)(arg1)->getCurrentFrame();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getObjectByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getObjectByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::Object3d *)(arg1)->getObjectByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectByHandle(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned long arg2 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getObjectByHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectByHandle",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getObjectByHandle",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectByHandle",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (Neo::Object3d *)(arg1)->getObjectByHandle(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getLightByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getLightByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getLightByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getLightByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getLightByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OLight *)(arg1)->getLightByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCameraByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getCameraByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCameraByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getCameraByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCameraByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OCamera *)(arg1)->getCameraByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getEntityByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getEntityByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getEntityByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getEntityByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getEntityByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OEntity *)(arg1)->getEntityByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getSoundByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getSoundByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getSoundByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getSoundByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getSoundByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OSound *)(arg1)->getSoundByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getTextByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getTextByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getTextByName",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getTextByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getTextByName",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::OText *)(arg1)->getTextByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Scene::getObjectIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectIndex",1,"Neo::Scene *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Scene::getObjectIndex",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Scene::getObjectIndex",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Scene_getObjectIndex",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->getObjectIndex((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getObjectByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getObjectByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getObjectByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getObjectByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getObjectByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Object3d *)(arg1)->getObjectByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Object3d,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getLightByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OLight *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getLightByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getLightByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getLightByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getLightByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OLight *)(arg1)->getLightByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OLight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getCameraByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OCamera *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getCameraByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getCameraByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getCameraByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getCameraByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OCamera *)(arg1)->getCameraByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OCamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getEntityByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OEntity *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getEntityByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getEntityByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getEntityByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getEntityByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OEntity *)(arg1)->getEntityByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OEntity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getSoundByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OSound *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getSoundByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getSoundByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getSoundByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getSoundByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OSound *)(arg1)->getSoundByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OSound,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_getTextByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OText *result = 0 ;
  
  SWIG_check_num_args("Neo::Scene::getTextByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::getTextByIndex",1,"Neo::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Scene::getTextByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_getTextByIndex",1,SWIGTYPE_p_Neo__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::OText *)(arg1)->getTextByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__OText,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_begin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::begin",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_begin",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->begin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_c_end(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::end",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_c_end",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->end();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_prepareCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::prepareCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::prepareCollisionShape",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::prepareCollisionShape",2,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_prepareCollisionShape",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_prepareCollisionShape",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->prepareCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_prepareCollisionObject(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::prepareCollisionObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::prepareCollisionObject",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::prepareCollisionObject",2,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_prepareCollisionObject",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_prepareCollisionObject",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->prepareCollisionObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_prepareConstraints(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::prepareConstraints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::prepareConstraints",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::prepareConstraints",2,"Neo::OEntity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_prepareConstraints",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OEntity,0))){
    SWIG_fail_ptr("Scene_prepareConstraints",2,SWIGTYPE_p_Neo__OEntity);
  }
  
  (arg1)->prepareConstraints(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_preparePhysics(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::preparePhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::preparePhysics",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_preparePhysics",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->preparePhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_updatePhysics(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::updatePhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::updatePhysics",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_updatePhysics",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->updatePhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::update",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_update",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_updateObjectsBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::updateObjectsBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::updateObjectsBehaviors",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_updateObjectsBehaviors",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->updateObjectsBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_drawObjectsBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::drawObjectsBehaviors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::drawObjectsBehaviors",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_drawObjectsBehaviors",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->drawObjectsBehaviors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_updateObjectsMatrices(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::updateObjectsMatrices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::updateObjectsMatrices",1,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_updateObjectsMatrices",1,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->updateObjectsMatrices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  SWIG_check_num_args("Neo::Scene::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Scene::draw",1,"Neo::Scene *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Scene::draw",2,"Neo::OCamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Scene_draw",1,SWIGTYPE_p_Neo__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__OCamera,0))){
    SWIG_fail_ptr("Scene_draw",2,SWIGTYPE_p_Neo__OCamera);
  }
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Scene(void *obj) {
Neo::Scene *arg1 = (Neo::Scene *) obj;
delete arg1;
}
static int _proxy__wrap_new_Scene(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Scene);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Scene_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Scene_methods[]= {
    { "getAdditionalData", _wrap_Scene_getAdditionalData},
    { "setAdditionalData", _wrap_Scene_setAdditionalData},
    { "setName", _wrap_Scene_setName},
    { "getName", _wrap_Scene_getName},
    { "getAmbientLight", _wrap_Scene_getAmbientLight},
    { "setAmbientLight", _wrap_Scene_setAmbientLight},
    { "setDataMode", _wrap_Scene_setDataMode},
    { "getDataMode", _wrap_Scene_getDataMode},
    { "setScriptFilename", _wrap_Scene_setScriptFilename},
    { "getScriptFilename", _wrap_Scene_getScriptFilename},
    { "setGravity", _wrap_Scene_setGravity},
    { "getGravity", _wrap_Scene_getGravity},
    { "playLoopSounds", _wrap_Scene_playLoopSounds},
    { "stopAllSounds", _wrap_Scene_stopAllSounds},
    { "deleteObject", _wrap_Scene_deleteObject},
    { "addNewCamera", _wrap_Scene_addNewCamera},
    { "addNewGroup", _wrap_Scene_addNewGroup},
    { "addNewLight", _wrap_Scene_addNewLight},
    { "addNewEntity", _wrap_Scene_addNewEntity},
    { "addNewSound", _wrap_Scene_addNewSound},
    { "addNewText", _wrap_Scene_addNewText},
    { "getObjectsNumber", _wrap_Scene_getObjectsNumber},
    { "getCamerasNumber", _wrap_Scene_getCamerasNumber},
    { "getLightsNumber", _wrap_Scene_getLightsNumber},
    { "getEntitiesNumber", _wrap_Scene_getEntitiesNumber},
    { "getSoundsNumber", _wrap_Scene_getSoundsNumber},
    { "getTextsNumber", _wrap_Scene_getTextsNumber},
    { "setCurrentCameraId", _wrap_Scene_setCurrentCameraId},
    { "getCurrentCameraId", _wrap_Scene_getCurrentCameraId},
    { "setCurrentCamera", _wrap_Scene_setCurrentCamera},
    { "getCurrentCamera", _wrap_Scene_getCurrentCamera},
    { "setCurrentFrame", _wrap_Scene_setCurrentFrame},
    { "getCurrentFrame", _wrap_Scene_getCurrentFrame},
    { "getObjectByName", _wrap_Scene_getObjectByName},
    { "getObjectByHandle", _wrap_Scene_getObjectByHandle},
    { "getLightByName", _wrap_Scene_getLightByName},
    { "getCameraByName", _wrap_Scene_getCameraByName},
    { "getEntityByName", _wrap_Scene_getEntityByName},
    { "getSoundByName", _wrap_Scene_getSoundByName},
    { "getTextByName", _wrap_Scene_getTextByName},
    { "getObjectIndex", _wrap_Scene_getObjectIndex},
    { "getObjectByIndex", _wrap_Scene_getObjectByIndex},
    { "getLightByIndex", _wrap_Scene_getLightByIndex},
    { "getCameraByIndex", _wrap_Scene_getCameraByIndex},
    { "getEntityByIndex", _wrap_Scene_getEntityByIndex},
    { "getSoundByIndex", _wrap_Scene_getSoundByIndex},
    { "getTextByIndex", _wrap_Scene_getTextByIndex},
    { "begin", _wrap_Scene_begin},
    { "c_end", _wrap_Scene_c_end},
    { "prepareCollisionShape", _wrap_Scene_prepareCollisionShape},
    { "prepareCollisionObject", _wrap_Scene_prepareCollisionObject},
    { "prepareConstraints", _wrap_Scene_prepareConstraints},
    { "preparePhysics", _wrap_Scene_preparePhysics},
    { "updatePhysics", _wrap_Scene_updatePhysics},
    { "update", _wrap_Scene_update},
    { "updateObjectsBehaviors", _wrap_Scene_updateObjectsBehaviors},
    { "drawObjectsBehaviors", _wrap_Scene_drawObjectsBehaviors},
    { "updateObjectsMatrices", _wrap_Scene_updateObjectsMatrices},
    { "draw", _wrap_Scene_draw},
    {0,0}
};
static swig_lua_method swig_Scene_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Scene_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Scene_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Scene_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Scene_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Scene_Sf_SwigStatic = {
    "Scene",
    swig_Scene_Sf_SwigStatic_methods,
    swig_Scene_Sf_SwigStatic_attributes,
    swig_Scene_Sf_SwigStatic_constants,
    swig_Scene_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Scene_bases[] = {0};
static const char *swig_Scene_base_names[] = {0};
static swig_lua_class _wrap_class_Scene = { "Scene", "Scene", &SWIGTYPE_p_Neo__Scene,_proxy__wrap_new_Scene, swig_delete_Scene, swig_Scene_methods, swig_Scene_attributes, &swig_Scene_Sf_SwigStatic, swig_Scene_meta, swig_Scene_bases, swig_Scene_base_names };

static int _wrap_new_Level(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::Level",0,0)
  result = (Neo::Level *)new Neo::Level();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Level,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::clear",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_clear",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_clearScenes(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::clearScenes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::clearScenes",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_clearScenes",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->clearScenes();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getFXManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::FXManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getFXManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getFXManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getFXManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::FXManager *)(arg1)->getFXManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_createFX(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::ShaderRef *arg2 = (Neo::ShaderRef *) 0 ;
  Neo::ShaderRef *arg3 = (Neo::ShaderRef *) 0 ;
  Neo::FXRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::createFX",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::createFX",1,"Neo::Level *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Level::createFX",2,"Neo::ShaderRef *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Level::createFX",3,"Neo::ShaderRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_createFX",1,SWIGTYPE_p_Neo__Level);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("Level_createFX",2,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Neo__ShaderRef,0))){
    SWIG_fail_ptr("Level_createFX",3,SWIGTYPE_p_Neo__ShaderRef);
  }
  
  result = (Neo::FXRef *)(arg1)->createFX(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FXRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getFontManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getFontManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getFontManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getFontManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getFontManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getTextureManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getTextureManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getTextureManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getTextureManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getTextureManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getShaderManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getShaderManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getShaderManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getShaderManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getShaderManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSoundManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getSoundManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSoundManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSoundManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getSoundManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getMeshManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getMeshManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getMeshManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getMeshManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getMeshManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getArmatureAnimManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getArmatureAnimManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getArmatureAnimManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getArmatureAnimManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getArmatureAnimManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getTexturesAnimManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getTexturesAnimManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getTexturesAnimManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getTexturesAnimManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getTexturesAnimManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getMaterialsAnimManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataManager *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getMaterialsAnimManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getMaterialsAnimManager",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getMaterialsAnimManager",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::DataManager *)(arg1)->getMaterialsAnimManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadFont__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadFont",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadFont",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadFont",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Level::loadFont",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadFont",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Neo::FontRef *)(arg1)->loadFont((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadFont__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadFont",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadFont",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadFont",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::FontRef *)(arg1)->loadFont((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadFont(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadFont__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadFont__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadFont'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadFont(char const *,unsigned int)\n"
    "    Neo::Level::loadFont(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadMesh__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMesh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMesh",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMesh",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadMesh",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMesh",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMesh__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMesh",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMesh",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMesh",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MeshRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMesh(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadMesh__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadMesh__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadMesh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadMesh(char const *,bool const)\n"
    "    Neo::Level::loadMesh(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadArmatureAnim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadArmatureAnim",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadArmatureAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadArmatureAnim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadArmatureAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadArmatureAnim",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadArmatureAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ArmatureAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadArmatureAnim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadArmatureAnim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadArmatureAnim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadArmatureAnim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadArmatureAnim(char const *,bool const)\n"
    "    Neo::Level::loadArmatureAnim(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadTexturesAnim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexturesAnim",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexturesAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexturesAnim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexturesAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexturesAnim",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexturesAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TexturesAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexturesAnim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadTexturesAnim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadTexturesAnim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadTexturesAnim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadTexturesAnim(char const *,bool const)\n"
    "    Neo::Level::loadTexturesAnim(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadMaterialsAnim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMaterialsAnim",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMaterialsAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMaterialsAnim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadMaterialsAnim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadMaterialsAnim",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadMaterialsAnim",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__MaterialsAnimRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadMaterialsAnim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadMaterialsAnim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadMaterialsAnim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadMaterialsAnim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadMaterialsAnim(char const *,bool const)\n"
    "    Neo::Level::loadMaterialsAnim(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexture",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexture",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadTexture",3,"bool const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo::Level::loadTexture",4,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexture",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexture",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexture",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadTexture",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexture",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexture__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadTexture",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadTexture",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadTexture",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadTexture(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadTexture__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadTexture__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Level_loadTexture__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadTexture(char const *,bool const,bool const)\n"
    "    Neo::Level::loadTexture(char const *,bool const)\n"
    "    Neo::Level::loadTexture(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadSound",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadSound",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadSound",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo::Level::loadSound",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadSound",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadSound",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadSound",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadSound",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_loadSound(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Level_loadSound__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Level, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Level_loadSound__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Level_loadSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Level::loadSound(char const *,bool const)\n"
    "    Neo::Level::loadSound(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Level_loadShader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::M_SHADER_TYPES arg3 ;
  Neo::ShaderRef *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::loadShader",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::loadShader",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::loadShader",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Level::loadShader",3,"Neo::M_SHADER_TYPES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_loadShader",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (Neo::M_SHADER_TYPES)(int)lua_tonumber(L, 3);
  result = (Neo::ShaderRef *)(arg1)->loadShader((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ShaderRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_sendToUpdateQueue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataRef *arg2 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::Level::sendToUpdateQueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::sendToUpdateQueue",1,"Neo::Level *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Level::sendToUpdateQueue",2,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_sendToUpdateQueue",1,SWIGTYPE_p_Neo__Level);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("Level_sendToUpdateQueue",2,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->sendToUpdateQueue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_sendToClearQueue(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::DataRef *arg2 = (Neo::DataRef *) 0 ;
  
  SWIG_check_num_args("Neo::Level::sendToClearQueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::sendToClearQueue",1,"Neo::Level *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Level::sendToClearQueue",2,"Neo::DataRef *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_sendToClearQueue",1,SWIGTYPE_p_Neo__Level);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__DataRef,0))){
    SWIG_fail_ptr("Level_sendToClearQueue",2,SWIGTYPE_p_Neo__DataRef);
  }
  
  (arg1)->sendToClearQueue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_updateQueueDatas(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::updateQueueDatas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::updateQueueDatas",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_updateQueueDatas",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->updateQueueDatas();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_clearQueueDatas(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::Level::clearQueueDatas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::clearQueueDatas",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_clearQueueDatas",1,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->clearQueueDatas();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_changeCurrentScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Level::changeCurrentScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::changeCurrentScene",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::changeCurrentScene",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_changeCurrentScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->changeCurrentScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_deleteScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Level::deleteScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::deleteScene",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::deleteScene",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_deleteScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->deleteScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSceneIndexByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::Level::getSceneIndexByName",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSceneIndexByName",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::getSceneIndexByName",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Neo::Level::getSceneIndexByName",3,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSceneIndexByName",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Level_getSceneIndexByName",3,SWIGTYPE_p_unsigned_int);
  }
  
  result = (bool)(arg1)->getSceneIndexByName((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_addNewScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::addNewScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::addNewScene",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_addNewScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::Scene *)(arg1)->addNewScene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSceneByName(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getSceneByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSceneByName",1,"Neo::Level *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Level::getSceneByName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSceneByName",1,SWIGTYPE_p_Neo__Level);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::Scene *)(arg1)->getSceneByName((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getCurrentScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getCurrentScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getCurrentScene",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getCurrentScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (Neo::Scene *)(arg1)->getCurrentScene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_setCurrentSceneId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Level::setCurrentSceneId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::setCurrentSceneId",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::setCurrentSceneId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_setCurrentSceneId",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setCurrentSceneId(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_setCurrentScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *arg2 = (Neo::Scene *) 0 ;
  
  SWIG_check_num_args("Neo::Level::setCurrentScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::setCurrentScene",1,"Neo::Level *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Level::setCurrentScene",2,"Neo::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_setCurrentScene",1,SWIGTYPE_p_Neo__Level);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Scene,0))){
    SWIG_fail_ptr("Level_setCurrentScene",2,SWIGTYPE_p_Neo__Scene);
  }
  
  (arg1)->setCurrentScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getCurrentSceneId(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Level::getCurrentSceneId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getCurrentSceneId",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getCurrentSceneId",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (unsigned int)(arg1)->getCurrentSceneId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getScenesNumber(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Level::getScenesNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getScenesNumber",1,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getScenesNumber",1,SWIGTYPE_p_Neo__Level);
  }
  
  result = (unsigned int)(arg1)->getScenesNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_getSceneByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  Neo::Scene *result = 0 ;
  
  SWIG_check_num_args("Neo::Level::getSceneByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Level::getSceneByIndex",1,"Neo::Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Level::getSceneByIndex",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("Level_getSceneByIndex",1,SWIGTYPE_p_Neo__Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo::Scene *)(arg1)->getSceneByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Level(void *obj) {
Neo::Level *arg1 = (Neo::Level *) obj;
delete arg1;
}
static int _proxy__wrap_new_Level(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Level);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Level_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Level_methods[]= {
    { "clear", _wrap_Level_clear},
    { "clearScenes", _wrap_Level_clearScenes},
    { "getFXManager", _wrap_Level_getFXManager},
    { "createFX", _wrap_Level_createFX},
    { "getFontManager", _wrap_Level_getFontManager},
    { "getTextureManager", _wrap_Level_getTextureManager},
    { "getShaderManager", _wrap_Level_getShaderManager},
    { "getSoundManager", _wrap_Level_getSoundManager},
    { "getMeshManager", _wrap_Level_getMeshManager},
    { "getArmatureAnimManager", _wrap_Level_getArmatureAnimManager},
    { "getTexturesAnimManager", _wrap_Level_getTexturesAnimManager},
    { "getMaterialsAnimManager", _wrap_Level_getMaterialsAnimManager},
    { "loadFont", _wrap_Level_loadFont},
    { "loadMesh", _wrap_Level_loadMesh},
    { "loadArmatureAnim", _wrap_Level_loadArmatureAnim},
    { "loadTexturesAnim", _wrap_Level_loadTexturesAnim},
    { "loadMaterialsAnim", _wrap_Level_loadMaterialsAnim},
    { "loadTexture", _wrap_Level_loadTexture},
    { "loadSound", _wrap_Level_loadSound},
    { "loadShader", _wrap_Level_loadShader},
    { "sendToUpdateQueue", _wrap_Level_sendToUpdateQueue},
    { "sendToClearQueue", _wrap_Level_sendToClearQueue},
    { "updateQueueDatas", _wrap_Level_updateQueueDatas},
    { "clearQueueDatas", _wrap_Level_clearQueueDatas},
    { "changeCurrentScene", _wrap_Level_changeCurrentScene},
    { "deleteScene", _wrap_Level_deleteScene},
    { "getSceneIndexByName", _wrap_Level_getSceneIndexByName},
    { "addNewScene", _wrap_Level_addNewScene},
    { "getSceneByName", _wrap_Level_getSceneByName},
    { "getCurrentScene", _wrap_Level_getCurrentScene},
    { "setCurrentSceneId", _wrap_Level_setCurrentSceneId},
    { "setCurrentScene", _wrap_Level_setCurrentScene},
    { "getCurrentSceneId", _wrap_Level_getCurrentSceneId},
    { "getScenesNumber", _wrap_Level_getScenesNumber},
    { "getSceneByIndex", _wrap_Level_getSceneByIndex},
    {0,0}
};
static swig_lua_method swig_Level_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Level_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Level_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Level_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Level_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Level_Sf_SwigStatic = {
    "Level",
    swig_Level_Sf_SwigStatic_methods,
    swig_Level_Sf_SwigStatic_attributes,
    swig_Level_Sf_SwigStatic_constants,
    swig_Level_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Level_bases[] = {0};
static const char *swig_Level_base_names[] = {0};
static swig_lua_class _wrap_class_Level = { "Level", "Level", &SWIGTYPE_p_Neo__Level,_proxy__wrap_new_Level, swig_delete_Level, swig_Level_methods, swig_Level_attributes, &swig_Level_Sf_SwigStatic, swig_Level_meta, swig_Level_bases, swig_Level_base_names };

static int _wrap_SubGame_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::update",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_update",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubGame_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::draw",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_draw",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubGame_onBegin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::onBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::onBegin",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_onBegin",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->onBegin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubGame_onEnd(lua_State* L) {
  int SWIG_arg = 0;
  Neo::SubGame *arg1 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::SubGame::onEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::SubGame::onEnd",1,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("SubGame_onEnd",1,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->onEnd();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SubGame(void *obj) {
Neo::SubGame *arg1 = (Neo::SubGame *) obj;
delete arg1;
}
static swig_lua_attribute swig_SubGame_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SubGame_methods[]= {
    { "update", _wrap_SubGame_update},
    { "draw", _wrap_SubGame_draw},
    { "onBegin", _wrap_SubGame_onBegin},
    { "onEnd", _wrap_SubGame_onEnd},
    {0,0}
};
static swig_lua_method swig_SubGame_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SubGame_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SubGame_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SubGame_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SubGame_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SubGame_Sf_SwigStatic = {
    "SubGame",
    swig_SubGame_Sf_SwigStatic_methods,
    swig_SubGame_Sf_SwigStatic_attributes,
    swig_SubGame_Sf_SwigStatic_constants,
    swig_SubGame_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SubGame_bases[] = {0};
static const char *swig_SubGame_base_names[] = {0};
static swig_lua_class _wrap_class_SubGame = { "SubGame", "SubGame", &SWIGTYPE_p_Neo__SubGame,0, swig_delete_SubGame, swig_SubGame_methods, swig_SubGame_attributes, &swig_SubGame_Sf_SwigStatic, swig_SubGame_meta, swig_SubGame_bases, swig_SubGame_base_names };

static int _wrap_new_NeoGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::NeoGame",0,0)
  result = (Neo::NeoGame *)new Neo::NeoGame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoGame,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_getFrameDelta(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo::NeoGame::getFrameDelta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::getFrameDelta",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_getFrameDelta",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  result = (float)(arg1)->getFrameDelta();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_isRunning(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoGame::isRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::isRunning",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_isRunning",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  result = (bool)(arg1)->isRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_hasPostEffects(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoGame::hasPostEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::hasPostEffects",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_hasPostEffects",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  result = (bool)(arg1)->hasPostEffects();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_enablePostEffects(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::enablePostEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::enablePostEffects",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_enablePostEffects",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->enablePostEffects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_disablePostEffects(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::disablePostEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::disablePostEffects",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_disablePostEffects",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->disablePostEffects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_getPostProcessor(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  Neo::PostProcessor *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::getPostProcessor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::getPostProcessor",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_getPostProcessor",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  result = (Neo::PostProcessor *)(arg1)->getPostProcessor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PostProcessor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_begin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::begin",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_begin",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->begin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_c_end(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::end",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_c_end",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->end();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::update",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_update",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::draw",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_draw",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onBegin(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onBegin",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onBegin",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onBegin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onEnd(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onEnd",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onEnd",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onEnd();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onBeginLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onBeginLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onBeginLevel",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onBeginLevel",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onBeginLevel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onEndLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onEndLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onEndLevel",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onEndLevel",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onEndLevel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onBeginScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onBeginScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onBeginScene",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onBeginScene",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onBeginScene();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_onEndScene(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::onEndScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::onEndScene",1,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_onEndScene",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->onEndScene();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoGame_registerSubGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoGame *arg1 = (Neo::NeoGame *) 0 ;
  Neo::SubGame *arg2 = (Neo::SubGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoGame::registerSubGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoGame::registerSubGame",1,"Neo::NeoGame *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoGame::registerSubGame",2,"Neo::SubGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoGame_registerSubGame",1,SWIGTYPE_p_Neo__NeoGame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SubGame,0))){
    SWIG_fail_ptr("NeoGame_registerSubGame",2,SWIGTYPE_p_Neo__SubGame);
  }
  
  (arg1)->registerSubGame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NeoGame(void *obj) {
Neo::NeoGame *arg1 = (Neo::NeoGame *) obj;
delete arg1;
}
static int _proxy__wrap_new_NeoGame(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NeoGame);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NeoGame_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NeoGame_methods[]= {
    { "getFrameDelta", _wrap_NeoGame_getFrameDelta},
    { "isRunning", _wrap_NeoGame_isRunning},
    { "hasPostEffects", _wrap_NeoGame_hasPostEffects},
    { "enablePostEffects", _wrap_NeoGame_enablePostEffects},
    { "disablePostEffects", _wrap_NeoGame_disablePostEffects},
    { "getPostProcessor", _wrap_NeoGame_getPostProcessor},
    { "begin", _wrap_NeoGame_begin},
    { "c_end", _wrap_NeoGame_c_end},
    { "update", _wrap_NeoGame_update},
    { "draw", _wrap_NeoGame_draw},
    { "onBegin", _wrap_NeoGame_onBegin},
    { "onEnd", _wrap_NeoGame_onEnd},
    { "onBeginLevel", _wrap_NeoGame_onBeginLevel},
    { "onEndLevel", _wrap_NeoGame_onEndLevel},
    { "onBeginScene", _wrap_NeoGame_onBeginScene},
    { "onEndScene", _wrap_NeoGame_onEndScene},
    { "registerSubGame", _wrap_NeoGame_registerSubGame},
    {0,0}
};
static swig_lua_method swig_NeoGame_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NeoGame_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NeoGame_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NeoGame_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NeoGame_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NeoGame_Sf_SwigStatic = {
    "NeoGame",
    swig_NeoGame_Sf_SwigStatic_methods,
    swig_NeoGame_Sf_SwigStatic_attributes,
    swig_NeoGame_Sf_SwigStatic_constants,
    swig_NeoGame_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NeoGame_bases[] = {0};
static const char *swig_NeoGame_base_names[] = {0};
static swig_lua_class _wrap_class_NeoGame = { "NeoGame", "NeoGame", &SWIGTYPE_p_Neo__NeoGame,_proxy__wrap_new_NeoGame, swig_delete_NeoGame, swig_NeoGame_methods, swig_NeoGame_attributes, &swig_NeoGame_Sf_SwigStatic, swig_NeoGame_meta, swig_NeoGame_bases, swig_NeoGame_base_names };

static int _wrap_Message_message_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Neo::Message::message",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::message",1,"Neo::Message *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Neo::Message::message",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_message_set",1,SWIGTYPE_p_Neo__Message);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->message = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Message_message_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Neo::Message::message",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::message",1,"Neo::Message *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_message_get",1,SWIGTYPE_p_Neo__Message);
  }
  
  result = (std::string *) & ((arg1)->message);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Message_sender_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Neo::Message::sender",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::sender",1,"Neo::Message *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Neo::Message::sender",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_sender_set",1,SWIGTYPE_p_Neo__Message);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->sender = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Message_sender_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Neo::Message::sender",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::sender",1,"Neo::Message *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_sender_get",1,SWIGTYPE_p_Neo__Message);
  }
  
  result = (std::string *) & ((arg1)->sender);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Message_messageId_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo::Message::messageId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::messageId",1,"Neo::Message *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo::Message::messageId",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_messageId_set",1,SWIGTYPE_p_Neo__Message);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->messageId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Message_messageId_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Message::messageId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::messageId",1,"Neo::Message *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_messageId_get",1,SWIGTYPE_p_Neo__Message);
  }
  
  result = (unsigned int) ((arg1)->messageId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Message_data_set(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("Neo::Message::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::data",1,"Neo::Message *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::Message::data",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_data_set",1,SWIGTYPE_p_Neo__Message);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Message_data_set");
  if (arg1) (arg1)->data = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Message_data_get(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *arg1 = (Neo::Message *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("Neo::Message::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Message::data",1,"Neo::Message *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Message,0))){
    SWIG_fail_ptr("Message_data_get",1,SWIGTYPE_p_Neo__Message);
  }
  
  result = (void *) ((arg1)->data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Message(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Message *result = 0 ;
  
  SWIG_check_num_args("Neo::Message::Message",0,0)
  result = (Neo::Message *)new Neo::Message();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Message,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Message(void *obj) {
Neo::Message *arg1 = (Neo::Message *) obj;
delete arg1;
}
static int _proxy__wrap_new_Message(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Message);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Message_attributes[] = {
    { "message", _wrap_Message_message_get, _wrap_Message_message_set },
    { "sender", _wrap_Message_sender_get, _wrap_Message_sender_set },
    { "messageId", _wrap_Message_messageId_get, _wrap_Message_messageId_set },
    { "data", _wrap_Message_data_get, _wrap_Message_data_set },
    {0,0,0}
};
static swig_lua_method swig_Message_methods[]= {
    {0,0}
};
static swig_lua_method swig_Message_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Message_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Message_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Message_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Message_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Message_Sf_SwigStatic = {
    "Message",
    swig_Message_Sf_SwigStatic_methods,
    swig_Message_Sf_SwigStatic_attributes,
    swig_Message_Sf_SwigStatic_constants,
    swig_Message_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Message_bases[] = {0};
static const char *swig_Message_base_names[] = {0};
static swig_lua_class _wrap_class_Message = { "Message", "Message", &SWIGTYPE_p_Neo__Message,_proxy__wrap_new_Message, swig_delete_Message, swig_Message_methods, swig_Message_attributes, &swig_Message_Sf_SwigStatic, swig_Message_meta, swig_Message_bases, swig_Message_base_names };

static int _wrap_Messenger_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Messenger *result = 0 ;
  
  SWIG_check_num_args("Neo::Messenger::getInstance",0,0)
  result = (Neo::Messenger *)Neo::Messenger::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Messenger,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Messenger(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Messenger *result = 0 ;
  
  SWIG_check_num_args("Neo::Messenger::Messenger",0,0)
  result = (Neo::Messenger *)new Neo::Messenger();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Messenger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messenger_addInbox(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Messenger *arg1 = (Neo::Messenger *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo::Messenger::addInbox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Messenger::addInbox",1,"Neo::Messenger *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Messenger::addInbox",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Messenger::addInbox",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Messenger,0))){
    SWIG_fail_ptr("Messenger_addInbox",1,SWIGTYPE_p_Neo__Messenger);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->addInbox((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messenger_getMessagesCount(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Messenger *arg1 = (Neo::Messenger *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo::Messenger::getMessagesCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Messenger::getMessagesCount",1,"Neo::Messenger *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Messenger::getMessagesCount",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Messenger,0))){
    SWIG_fail_ptr("Messenger_getMessagesCount",1,SWIGTYPE_p_Neo__Messenger);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (unsigned int)(arg1)->getMessagesCount((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messenger_sendMessage(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Messenger *arg1 = (Neo::Messenger *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::Messenger::sendMessage",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Messenger::sendMessage",1,"Neo::Messenger *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Messenger::sendMessage",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo::Messenger::sendMessage",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Neo::Messenger::sendMessage",4,"void *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo::Messenger::sendMessage",5,"char const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Neo::Messenger::sendMessage",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Messenger,0))){
    SWIG_fail_ptr("Messenger_sendMessage",1,SWIGTYPE_p_Neo__Messenger);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"Messenger_sendMessage");
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  (arg1)->sendMessage((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messenger_getNextMessage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Messenger *arg1 = (Neo::Messenger *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Message result;
  
  SWIG_check_num_args("Neo::Messenger::getNextMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Messenger::getNextMessage",1,"Neo::Messenger *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Messenger::getNextMessage",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Messenger,0))){
    SWIG_fail_ptr("Messenger_getNextMessage",1,SWIGTYPE_p_Neo__Messenger);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->getNextMessage((char const *)arg2);
  {
    Neo::Message * resultptr = new Neo::Message((const Neo::Message &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Message,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messenger_getNextMessage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Messenger *arg1 = (Neo::Messenger *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Neo::Message result;
  
  SWIG_check_num_args("Neo::Messenger::getNextMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::Messenger::getNextMessage",1,"Neo::Messenger *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::Messenger::getNextMessage",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Neo::Messenger::getNextMessage",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Messenger,0))){
    SWIG_fail_ptr("Messenger_getNextMessage",1,SWIGTYPE_p_Neo__Messenger);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (arg1)->getNextMessage((char const *)arg2,(char const *)arg3);
  {
    Neo::Message * resultptr = new Neo::Message((const Neo::Message &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Message,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messenger_getNextMessage(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Messenger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Messenger_getNextMessage__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo__Messenger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Messenger_getNextMessage__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Messenger_getNextMessage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo::Messenger::getNextMessage(char const *)\n"
    "    Neo::Messenger::getNextMessage(char const *,char const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Messenger(void *obj) {
Neo::Messenger *arg1 = (Neo::Messenger *) obj;
delete arg1;
}
static int _proxy__wrap_new_Messenger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Messenger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Messenger_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Messenger_methods[]= {
    { "addInbox", _wrap_Messenger_addInbox},
    { "getMessagesCount", _wrap_Messenger_getMessagesCount},
    { "sendMessage", _wrap_Messenger_sendMessage},
    { "getNextMessage", _wrap_Messenger_getNextMessage},
    {0,0}
};
static swig_lua_method swig_Messenger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Messenger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Messenger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Messenger_Sf_SwigStatic_methods[]= {
    { "getInstance", _wrap_Messenger_getInstance},
    {0,0}
};
static swig_lua_class* swig_Messenger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Messenger_Sf_SwigStatic = {
    "Messenger",
    swig_Messenger_Sf_SwigStatic_methods,
    swig_Messenger_Sf_SwigStatic_attributes,
    swig_Messenger_Sf_SwigStatic_constants,
    swig_Messenger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Messenger_bases[] = {0};
static const char *swig_Messenger_base_names[] = {0};
static swig_lua_class _wrap_class_Messenger = { "Messenger", "Messenger", &SWIGTYPE_p_Neo__Messenger,_proxy__wrap_new_Messenger, swig_delete_Messenger, swig_Messenger_methods, swig_Messenger_attributes, &swig_Messenger_Sf_SwigStatic, swig_Messenger_meta, swig_Messenger_bases, swig_Messenger_base_names };

static int _wrap_new_NeoEngine(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::NeoEngine",0,0)
  result = (Neo::NeoEngine *)new Neo::NeoEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getInstance",0,0)
  result = (Neo::NeoEngine *)Neo::NeoEngine::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setActive",1,"Neo::NeoEngine *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo::NeoEngine::setActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setActive",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_isActive(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoEngine::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::isActive",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_isActive",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (bool)(arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setSoundContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SoundContext *arg2 = (Neo::SoundContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setSoundContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setSoundContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setSoundContext",2,"Neo::SoundContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setSoundContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SoundContext,0))){
    SWIG_fail_ptr("NeoEngine_setSoundContext",2,SWIGTYPE_p_Neo__SoundContext);
  }
  
  (arg1)->setSoundContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setRenderingContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::RenderingContext *arg2 = (Neo::RenderingContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setRenderingContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setRenderingContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setRenderingContext",2,"Neo::RenderingContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setRenderingContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__RenderingContext,0))){
    SWIG_fail_ptr("NeoEngine_setRenderingContext",2,SWIGTYPE_p_Neo__RenderingContext);
  }
  
  (arg1)->setRenderingContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setPhysicsContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::PhysicsContext *arg2 = (Neo::PhysicsContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setPhysicsContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setPhysicsContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setPhysicsContext",2,"Neo::PhysicsContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setPhysicsContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__PhysicsContext,0))){
    SWIG_fail_ptr("NeoEngine_setPhysicsContext",2,SWIGTYPE_p_Neo__PhysicsContext);
  }
  
  (arg1)->setPhysicsContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setScriptContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::ScriptContext *arg2 = (Neo::ScriptContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setScriptContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setScriptContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setScriptContext",2,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setScriptContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("NeoEngine_setScriptContext",2,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  (arg1)->setScriptContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setInputContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::InputContext *arg2 = (Neo::InputContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setInputContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setInputContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setInputContext",2,"Neo::InputContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setInputContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__InputContext,0))){
    SWIG_fail_ptr("NeoEngine_setInputContext",2,SWIGTYPE_p_Neo__InputContext);
  }
  
  (arg1)->setInputContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setSystemContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SystemContext *arg2 = (Neo::SystemContext *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setSystemContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setSystemContext",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setSystemContext",2,"Neo::SystemContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setSystemContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__SystemContext,0))){
    SWIG_fail_ptr("NeoEngine_setSystemContext",2,SWIGTYPE_p_Neo__SystemContext);
  }
  
  (arg1)->setSystemContext(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getSoundContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SoundContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getSoundContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getSoundContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getSoundContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::SoundContext *)(arg1)->getSoundContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SoundContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getRenderingContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::RenderingContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getRenderingContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getRenderingContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getRenderingContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::RenderingContext *)(arg1)->getRenderingContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__RenderingContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getPhysicsContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::PhysicsContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getPhysicsContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getPhysicsContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getPhysicsContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::PhysicsContext *)(arg1)->getPhysicsContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PhysicsContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getScriptContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::ScriptContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getScriptContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getScriptContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getScriptContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::ScriptContext *)(arg1)->getScriptContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__ScriptContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getInputContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::InputContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getInputContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getInputContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getInputContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::InputContext *)(arg1)->getInputContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__InputContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getSystemContext(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::SystemContext *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getSystemContext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getSystemContext",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getSystemContext",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::SystemContext *)(arg1)->getSystemContext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__SystemContext,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getFontLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::Font > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getFontLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getFontLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getFontLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::Font > *)(arg1)->getFontLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__Font_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getImageLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::Image > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getImageLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getImageLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getImageLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::Image > *)(arg1)->getImageLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__Image_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getSoundLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::Sound > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getSoundLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getSoundLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getSoundLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::Sound > *)(arg1)->getSoundLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__Sound_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getMeshLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::Mesh > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getMeshLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getMeshLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getMeshLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::Mesh > *)(arg1)->getMeshLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__Mesh_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getArmatureAnimLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::ArmatureAnim > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getArmatureAnimLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getArmatureAnimLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getArmatureAnimLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::ArmatureAnim > *)(arg1)->getArmatureAnimLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__ArmatureAnim_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getTexturesAnimLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::TexturesAnim > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getTexturesAnimLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getTexturesAnimLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getTexturesAnimLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::TexturesAnim > *)(arg1)->getTexturesAnimLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__TexturesAnim_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getMaterialsAnimLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::MaterialsAnim > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getMaterialsAnimLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getMaterialsAnimLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getMaterialsAnimLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::MaterialsAnim > *)(arg1)->getMaterialsAnimLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__MaterialsAnim_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getLevelLoader(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::DataLoader< Neo::Level > *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getLevelLoader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getLevelLoader",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getLevelLoader",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::DataLoader< Neo::Level > *)(arg1)->getLevelLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__DataLoaderT_Neo__Level_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getBehaviorManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::BehaviorManager *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getBehaviorManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getBehaviorManager",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getBehaviorManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::BehaviorManager *)(arg1)->getBehaviorManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__BehaviorManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getRendererManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::RendererManager *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getRendererManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getRendererManager",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getRendererManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::RendererManager *)(arg1)->getRendererManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__RendererManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setPackageManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::PackageManager *arg2 = (Neo::PackageManager *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setPackageManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setPackageManager",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setPackageManager",2,"Neo::PackageManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setPackageManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__PackageManager,0))){
    SWIG_fail_ptr("NeoEngine_setPackageManager",2,SWIGTYPE_p_Neo__PackageManager);
  }
  
  (arg1)->setPackageManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getPackageManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::PackageManager *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getPackageManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getPackageManager",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getPackageManager",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::PackageManager *)(arg1)->getPackageManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__PackageManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_updateRequests(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::updateRequests",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::updateRequests",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_updateRequests",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  (arg1)->updateRequests();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *arg2 = (Neo::Level *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setLevel",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setLevel",2,"Neo::Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Level,0))){
    SWIG_fail_ptr("NeoEngine_setLevel",2,SWIGTYPE_p_Neo__Level);
  }
  
  (arg1)->setLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_saveLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoEngine::saveLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::saveLevel",1,"Neo::NeoEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::NeoEngine::saveLevel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_saveLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->saveLevel((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_loadLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoEngine::loadLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::loadLevel",1,"Neo::NeoEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::NeoEngine::loadLevel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_loadLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->loadLevel((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_requestLoadLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::requestLoadLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::requestLoadLevel",1,"Neo::NeoEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::NeoEngine::requestLoadLevel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_requestLoadLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->requestLoadLevel((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_doesLevelExist(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo::NeoEngine::doesLevelExist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::doesLevelExist",1,"Neo::NeoEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo::NeoEngine::doesLevelExist",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_doesLevelExist",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->doesLevelExist((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getLevel(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getLevel",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getLevel",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::Level *)(arg1)->getLevel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Level,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *arg2 = (Neo::NeoGame *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setGame",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setGame",2,"Neo::NeoGame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setGame",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__NeoGame,0))){
    SWIG_fail_ptr("NeoEngine_setGame",2,SWIGTYPE_p_Neo__NeoGame);
  }
  
  (arg1)->setGame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getGame(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getGame",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getGame",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::NeoGame *)(arg1)->getGame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__NeoGame,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_setRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Renderer *arg2 = (Neo::Renderer *) 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::setRenderer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::setRenderer",1,"Neo::NeoEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo::NeoEngine::setRenderer",2,"Neo::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_setRenderer",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__Renderer,0))){
    SWIG_fail_ptr("NeoEngine_setRenderer",2,SWIGTYPE_p_Neo__Renderer);
  }
  
  (arg1)->setRenderer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NeoEngine_getRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Renderer *result = 0 ;
  
  SWIG_check_num_args("Neo::NeoEngine::getRenderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo::NeoEngine::getRenderer",1,"Neo::NeoEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__NeoEngine,0))){
    SWIG_fail_ptr("NeoEngine_getRenderer",1,SWIGTYPE_p_Neo__NeoEngine);
  }
  
  result = (Neo::Renderer *)(arg1)->getRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Renderer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NeoEngine(void *obj) {
Neo::NeoEngine *arg1 = (Neo::NeoEngine *) obj;
delete arg1;
}
static int _proxy__wrap_new_NeoEngine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NeoEngine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NeoEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NeoEngine_methods[]= {
    { "setActive", _wrap_NeoEngine_setActive},
    { "isActive", _wrap_NeoEngine_isActive},
    { "setSoundContext", _wrap_NeoEngine_setSoundContext},
    { "setRenderingContext", _wrap_NeoEngine_setRenderingContext},
    { "setPhysicsContext", _wrap_NeoEngine_setPhysicsContext},
    { "setScriptContext", _wrap_NeoEngine_setScriptContext},
    { "setInputContext", _wrap_NeoEngine_setInputContext},
    { "setSystemContext", _wrap_NeoEngine_setSystemContext},
    { "getSoundContext", _wrap_NeoEngine_getSoundContext},
    { "getRenderingContext", _wrap_NeoEngine_getRenderingContext},
    { "getPhysicsContext", _wrap_NeoEngine_getPhysicsContext},
    { "getScriptContext", _wrap_NeoEngine_getScriptContext},
    { "getInputContext", _wrap_NeoEngine_getInputContext},
    { "getSystemContext", _wrap_NeoEngine_getSystemContext},
    { "getFontLoader", _wrap_NeoEngine_getFontLoader},
    { "getImageLoader", _wrap_NeoEngine_getImageLoader},
    { "getSoundLoader", _wrap_NeoEngine_getSoundLoader},
    { "getMeshLoader", _wrap_NeoEngine_getMeshLoader},
    { "getArmatureAnimLoader", _wrap_NeoEngine_getArmatureAnimLoader},
    { "getTexturesAnimLoader", _wrap_NeoEngine_getTexturesAnimLoader},
    { "getMaterialsAnimLoader", _wrap_NeoEngine_getMaterialsAnimLoader},
    { "getLevelLoader", _wrap_NeoEngine_getLevelLoader},
    { "getBehaviorManager", _wrap_NeoEngine_getBehaviorManager},
    { "getRendererManager", _wrap_NeoEngine_getRendererManager},
    { "setPackageManager", _wrap_NeoEngine_setPackageManager},
    { "getPackageManager", _wrap_NeoEngine_getPackageManager},
    { "updateRequests", _wrap_NeoEngine_updateRequests},
    { "setLevel", _wrap_NeoEngine_setLevel},
    { "saveLevel", _wrap_NeoEngine_saveLevel},
    { "loadLevel", _wrap_NeoEngine_loadLevel},
    { "requestLoadLevel", _wrap_NeoEngine_requestLoadLevel},
    { "doesLevelExist", _wrap_NeoEngine_doesLevelExist},
    { "getLevel", _wrap_NeoEngine_getLevel},
    { "setGame", _wrap_NeoEngine_setGame},
    { "getGame", _wrap_NeoEngine_getGame},
    { "setRenderer", _wrap_NeoEngine_setRenderer},
    { "getRenderer", _wrap_NeoEngine_getRenderer},
    {0,0}
};
static swig_lua_method swig_NeoEngine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NeoEngine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NeoEngine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NeoEngine_Sf_SwigStatic_methods[]= {
    { "getInstance", _wrap_NeoEngine_getInstance},
    {0,0}
};
static swig_lua_class* swig_NeoEngine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NeoEngine_Sf_SwigStatic = {
    "NeoEngine",
    swig_NeoEngine_Sf_SwigStatic_methods,
    swig_NeoEngine_Sf_SwigStatic_attributes,
    swig_NeoEngine_Sf_SwigStatic_constants,
    swig_NeoEngine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NeoEngine_bases[] = {0};
static const char *swig_NeoEngine_base_names[] = {0};
static swig_lua_class _wrap_class_NeoEngine = { "NeoEngine", "NeoEngine", &SWIGTYPE_p_Neo__NeoEngine,_proxy__wrap_new_NeoEngine, swig_delete_NeoEngine, swig_NeoEngine_methods, swig_NeoEngine_attributes, &swig_NeoEngine_Sf_SwigStatic, swig_NeoEngine_meta, swig_NeoEngine_bases, swig_NeoEngine_base_names };

static int _wrap_new_Widget__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Widget *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::Widget",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Widget::Widget",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Widget::Widget",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Widget::Widget",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Widget::Widget",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Widget::Widget",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Widget *)new Neo2D::Widget(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Widget,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Widget__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::Widget",0,0)
  result = (Neo2D::Widget *)new Neo2D::Widget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Widget,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Widget(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Widget__SWIG_1(L);
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Widget__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Widget'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Widget::Widget(unsigned int,unsigned int,unsigned int,unsigned int,char const *)\n"
    "    Neo2D::Widget::Widget()\n");
  lua_error(L);return 0;
}


static int _wrap_Widget_setParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo2D::Widget *arg2 = (Neo2D::Widget *) 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setParent",1,"Neo2D::Widget *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Widget::setParent",2,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setParent",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setParent",2,SWIGTYPE_p_Neo2D__Widget);
  }
  
  (arg1)->setParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getParent(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo2D::Widget *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getParent",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getParent",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (Neo2D::Widget *)(arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Widget,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo2D::Widget::getFontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getFontSize",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getFontSize",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (float)(arg1)->getFontSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setFontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setFontSize",1,"Neo2D::Widget *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Widget::setFontSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setFontSize",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFontSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setOffset",1,"Neo2D::Widget *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Widget::setOffset",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setOffset",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Widget_setOffset",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Widget::getOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getOffset",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getOffset",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (arg1)->getOffset();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo2D::Widget::setSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setSize",1,"Neo2D::Widget *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Widget::setSize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Widget::setSize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setSize",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Widget::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getSize",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getSize",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (arg1)->getSize();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::draw",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_draw",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Widget::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::draw",1,"Neo2D::Widget *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Widget::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_draw",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Widget_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_draw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Widget, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Widget_draw__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Widget, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Widget_draw__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Widget_draw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Widget::draw()\n"
    "    Neo2D::Widget::draw(Neo::Vector2)\n");
  lua_error(L);return 0;
}


static int _wrap_Widget_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::update",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_update",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setScriptCallback(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::setScriptCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setScriptCallback",1,"Neo2D::Widget *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Widget::setScriptCallback",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setScriptCallback",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setScriptCallback((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getUserData(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  long result;
  
  SWIG_check_num_args("Neo2D::Widget::getUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getUserData",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getUserData",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (long)(arg1)->getUserData();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setUserData(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setUserData",1,"Neo2D::Widget *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Widget::setUserData",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setUserData",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  (arg1)->setUserData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getLabel(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::getLabel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getLabel",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getLabel",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (char *)(arg1)->getLabel();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setLabel(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::setLabel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setLabel",1,"Neo2D::Widget *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Widget::setLabel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setLabel",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setLabel((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setPosition",1,"Neo2D::Widget *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Widget::setPosition",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setPosition",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Widget_setPosition",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Widget::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getPosition",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getPosition",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (arg1)->getPosition();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setRotation",1,"Neo2D::Widget *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Widget::setRotation",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setRotation",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRotation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo2D::Widget::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getRotation",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getRotation",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (float)(arg1)->getRotation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_translate(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Widget::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::translate",1,"Neo2D::Widget *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Widget::translate",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_translate",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Widget_translate",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->translate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_rotate(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Widget::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::rotate",1,"Neo2D::Widget *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Widget::rotate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_rotate",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->rotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_doCallback(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::doCallback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::doCallback",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_doCallback",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  (arg1)->doCallback();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Widget::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::isVisible",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_isVisible",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (bool)(arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setVisible",1,"Neo2D::Widget *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo2D::Widget::setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setVisible",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setScale",1,"Neo2D::Widget *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Widget::setScale",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setScale",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Widget_setScale",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Widget::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getScale",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getScale",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (arg1)->getScale();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setFlip(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setFlip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setFlip",1,"Neo2D::Widget *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Widget::setFlip",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setFlip",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Widget_setFlip",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setFlip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getFlip(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Widget::getFlip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getFlip",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getFlip",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (arg1)->getFlip();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_getStaticName(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Widget::getStaticName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::getStaticName",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_getStaticName",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (char *)(arg1)->getStaticName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_isMouseOver(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Widget::isMouseOver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::isMouseOver",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_isMouseOver",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (bool)(arg1)->isMouseOver();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_isInvisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Widget::isInvisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::isInvisible",1,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_isInvisible",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (bool)(arg1)->isInvisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Widget_setInvisible(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Widget *arg1 = (Neo2D::Widget *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo2D::Widget::setInvisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Widget::setInvisible",1,"Neo2D::Widget *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo2D::Widget::setInvisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Widget,0))){
    SWIG_fail_ptr("Widget_setInvisible",1,SWIGTYPE_p_Neo2D__Widget);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInvisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Widget(void *obj) {
Neo2D::Widget *arg1 = (Neo2D::Widget *) obj;
delete arg1;
}
static int _proxy__wrap_new_Widget(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Widget);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Widget_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Widget_methods[]= {
    { "setParent", _wrap_Widget_setParent},
    { "getParent", _wrap_Widget_getParent},
    { "getFontSize", _wrap_Widget_getFontSize},
    { "setFontSize", _wrap_Widget_setFontSize},
    { "setOffset", _wrap_Widget_setOffset},
    { "getOffset", _wrap_Widget_getOffset},
    { "setSize", _wrap_Widget_setSize},
    { "getSize", _wrap_Widget_getSize},
    { "draw", _wrap_Widget_draw},
    { "update", _wrap_Widget_update},
    { "setScriptCallback", _wrap_Widget_setScriptCallback},
    { "getUserData", _wrap_Widget_getUserData},
    { "setUserData", _wrap_Widget_setUserData},
    { "getLabel", _wrap_Widget_getLabel},
    { "setLabel", _wrap_Widget_setLabel},
    { "setPosition", _wrap_Widget_setPosition},
    { "getPosition", _wrap_Widget_getPosition},
    { "setRotation", _wrap_Widget_setRotation},
    { "getRotation", _wrap_Widget_getRotation},
    { "translate", _wrap_Widget_translate},
    { "rotate", _wrap_Widget_rotate},
    { "doCallback", _wrap_Widget_doCallback},
    { "isVisible", _wrap_Widget_isVisible},
    { "setVisible", _wrap_Widget_setVisible},
    { "setScale", _wrap_Widget_setScale},
    { "getScale", _wrap_Widget_getScale},
    { "setFlip", _wrap_Widget_setFlip},
    { "getFlip", _wrap_Widget_getFlip},
    { "getStaticName", _wrap_Widget_getStaticName},
    { "isMouseOver", _wrap_Widget_isMouseOver},
    { "isInvisible", _wrap_Widget_isInvisible},
    { "setInvisible", _wrap_Widget_setInvisible},
    {0,0}
};
static swig_lua_method swig_Widget_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Widget_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Widget_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Widget_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Widget_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Widget_Sf_SwigStatic = {
    "Widget",
    swig_Widget_Sf_SwigStatic_methods,
    swig_Widget_Sf_SwigStatic_attributes,
    swig_Widget_Sf_SwigStatic_constants,
    swig_Widget_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Widget_bases[] = {0};
static const char *swig_Widget_base_names[] = {0};
static swig_lua_class _wrap_class_Widget = { "Widget", "Widget", &SWIGTYPE_p_Neo2D__Widget,_proxy__wrap_new_Widget, swig_delete_Widget, swig_Widget_methods, swig_Widget_attributes, &swig_Widget_Sf_SwigStatic, swig_Widget_meta, swig_Widget_bases, swig_Widget_base_names };

static int _wrap_new_Sprite(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  Neo2D::Sprite *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Sprite::Sprite",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Sprite::Sprite",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Sprite::Sprite",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Sprite::Sprite",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Sprite::Sprite",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Sprite::Sprite",5,"char const *");
  if(!SWIG_lua_isnilstring(L,6)) SWIG_fail_arg("Neo2D::Sprite::Sprite",6,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (Neo2D::Sprite *)new Neo2D::Sprite(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Sprite,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Sprite::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Sprite::draw",1,"Neo2D::Sprite *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Sprite::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Sprite,0))){
    SWIG_fail_ptr("Sprite_draw",1,SWIGTYPE_p_Neo2D__Sprite);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Sprite_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  
  SWIG_check_num_args("Neo2D::Sprite::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Sprite::update",1,"Neo2D::Sprite *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Sprite,0))){
    SWIG_fail_ptr("Sprite_update",1,SWIGTYPE_p_Neo2D__Sprite);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_setFilter(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  Neo::TEX_FILTER_MODES arg2 ;
  
  SWIG_check_num_args("Neo2D::Sprite::setFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Sprite::setFilter",1,"Neo2D::Sprite *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Sprite::setFilter",2,"Neo::TEX_FILTER_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Sprite,0))){
    SWIG_fail_ptr("Sprite_setFilter",1,SWIGTYPE_p_Neo2D__Sprite);
  }
  
  arg2 = (Neo::TEX_FILTER_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setFilter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sprite_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Sprite *arg1 = (Neo2D::Sprite *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Sprite::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Sprite::getSize",1,"Neo2D::Sprite *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Sprite,0))){
    SWIG_fail_ptr("Sprite_getSize",1,SWIGTYPE_p_Neo2D__Sprite);
  }
  
  result = (arg1)->getSize();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sprite(void *obj) {
Neo2D::Sprite *arg1 = (Neo2D::Sprite *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sprite(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sprite);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sprite_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sprite_methods[]= {
    { "draw", _wrap_Sprite_draw},
    { "update", _wrap_Sprite_update},
    { "setFilter", _wrap_Sprite_setFilter},
    { "getSize", _wrap_Sprite_getSize},
    {0,0}
};
static swig_lua_method swig_Sprite_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sprite_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sprite_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sprite_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sprite_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sprite_Sf_SwigStatic = {
    "Sprite",
    swig_Sprite_Sf_SwigStatic_methods,
    swig_Sprite_Sf_SwigStatic_attributes,
    swig_Sprite_Sf_SwigStatic_constants,
    swig_Sprite_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sprite_bases[] = {0,0};
static const char *swig_Sprite_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_Sprite = { "Sprite", "Sprite", &SWIGTYPE_p_Neo2D__Sprite,_proxy__wrap_new_Sprite, swig_delete_Sprite, swig_Sprite_methods, swig_Sprite_attributes, &swig_Sprite_Sf_SwigStatic, swig_Sprite_meta, swig_Sprite_bases, swig_Sprite_base_names };

static int _wrap_SpriteBatch_addSprite(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  Neo2D::Widget *arg2 = (Neo2D::Widget *) 0 ;
  
  SWIG_check_num_args("Neo2D::SpriteBatch::addSprite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::SpriteBatch::addSprite",1,"Neo2D::SpriteBatch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::SpriteBatch::addSprite",2,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__SpriteBatch,0))){
    SWIG_fail_ptr("SpriteBatch_addSprite",1,SWIGTYPE_p_Neo2D__SpriteBatch);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Widget,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SpriteBatch_addSprite",2,SWIGTYPE_p_Neo2D__Widget);
  }
  
  (arg1)->addSprite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBatch_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::SpriteBatch::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::SpriteBatch::draw",1,"Neo2D::SpriteBatch *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::SpriteBatch::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__SpriteBatch,0))){
    SWIG_fail_ptr("SpriteBatch_draw",1,SWIGTYPE_p_Neo2D__SpriteBatch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("SpriteBatch_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBatch_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  
  SWIG_check_num_args("Neo2D::SpriteBatch::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::SpriteBatch::draw",1,"Neo2D::SpriteBatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__SpriteBatch,0))){
    SWIG_fail_ptr("SpriteBatch_draw",1,SWIGTYPE_p_Neo2D__SpriteBatch);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBatch_draw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__SpriteBatch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SpriteBatch_draw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__SpriteBatch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SpriteBatch_draw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SpriteBatch_draw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::SpriteBatch::draw(Neo::Vector2)\n"
    "    Neo2D::SpriteBatch::draw()\n");
  lua_error(L);return 0;
}


static int _wrap_SpriteBatch_getNumSprites(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Neo2D::SpriteBatch::getNumSprites",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::SpriteBatch::getNumSprites",1,"Neo2D::SpriteBatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__SpriteBatch,0))){
    SWIG_fail_ptr("SpriteBatch_getNumSprites",1,SWIGTYPE_p_Neo2D__SpriteBatch);
  }
  
  result = (unsigned int)(arg1)->getNumSprites();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBatch_deleteSprite(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Neo2D::SpriteBatch::deleteSprite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::SpriteBatch::deleteSprite",1,"Neo2D::SpriteBatch *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::SpriteBatch::deleteSprite",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__SpriteBatch,0))){
    SWIG_fail_ptr("SpriteBatch_deleteSprite",1,SWIGTYPE_p_Neo2D__SpriteBatch);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->deleteSprite(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpriteBatch_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) 0 ;
  Neo2D::Canvas *arg2 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::SpriteBatch::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::SpriteBatch::update",1,"Neo2D::SpriteBatch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::SpriteBatch::update",2,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__SpriteBatch,0))){
    SWIG_fail_ptr("SpriteBatch_update",1,SWIGTYPE_p_Neo2D__SpriteBatch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("SpriteBatch_update",2,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SpriteBatch(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::SpriteBatch *result = 0 ;
  
  SWIG_check_num_args("Neo2D::SpriteBatch::SpriteBatch",0,0)
  result = (Neo2D::SpriteBatch *)new Neo2D::SpriteBatch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__SpriteBatch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SpriteBatch(void *obj) {
Neo2D::SpriteBatch *arg1 = (Neo2D::SpriteBatch *) obj;
delete arg1;
}
static int _proxy__wrap_new_SpriteBatch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SpriteBatch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SpriteBatch_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SpriteBatch_methods[]= {
    { "addSprite", _wrap_SpriteBatch_addSprite},
    { "draw", _wrap_SpriteBatch_draw},
    { "getNumSprites", _wrap_SpriteBatch_getNumSprites},
    { "deleteSprite", _wrap_SpriteBatch_deleteSprite},
    { "update", _wrap_SpriteBatch_update},
    {0,0}
};
static swig_lua_method swig_SpriteBatch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SpriteBatch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SpriteBatch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SpriteBatch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SpriteBatch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SpriteBatch_Sf_SwigStatic = {
    "SpriteBatch",
    swig_SpriteBatch_Sf_SwigStatic_methods,
    swig_SpriteBatch_Sf_SwigStatic_attributes,
    swig_SpriteBatch_Sf_SwigStatic_constants,
    swig_SpriteBatch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SpriteBatch_bases[] = {0};
static const char *swig_SpriteBatch_base_names[] = {0};
static swig_lua_class _wrap_class_SpriteBatch = { "SpriteBatch", "SpriteBatch", &SWIGTYPE_p_Neo2D__SpriteBatch,_proxy__wrap_new_SpriteBatch, swig_delete_SpriteBatch, swig_SpriteBatch_methods, swig_SpriteBatch_attributes, &swig_SpriteBatch_Sf_SwigStatic, swig_SpriteBatch_meta, swig_SpriteBatch_bases, swig_SpriteBatch_base_names };

static int _wrap_Canvas_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::getInstance",0,0)
  result = (Neo2D::Canvas *)Neo2D::Canvas::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Canvas,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Canvas(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::Canvas",0,0)
  result = (Neo2D::Canvas *)new Neo2D::Canvas();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Canvas,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_getScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo2D::Canvas::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::getScale",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_getScale",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  result = (float)(arg1)->getScale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_setScale(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Canvas::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::setScale",1,"Neo2D::Canvas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Canvas::setScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_setScale",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setScale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_addSpriteBatch(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo2D::SpriteBatch *arg2 = (Neo2D::SpriteBatch *) 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::addSpriteBatch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::addSpriteBatch",1,"Neo2D::Canvas *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Canvas::addSpriteBatch",2,"Neo2D::SpriteBatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_addSpriteBatch",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__SpriteBatch,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Canvas_addSpriteBatch",2,SWIGTYPE_p_Neo2D__SpriteBatch);
  }
  
  (arg1)->addSpriteBatch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::draw",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_draw",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::update",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_update",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::clear",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_clear",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_getLayer(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo2D::Canvas::getLayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::getLayer",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_getLayer",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  result = (int)(arg1)->getLayer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_setLayer(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo2D::Canvas::setLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::setLayer",1,"Neo2D::Canvas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Canvas::setLayer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_setLayer",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setLayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_addWidget(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo2D::Canvas::addWidget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::addWidget",1,"Neo2D::Canvas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Canvas::addWidget",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_addWidget",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->addWidget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_getClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo2D::Canvas::getClearColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::getClearColor",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_getClearColor",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  result = (arg1)->getClearColor();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_setClearColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Canvas::setClearColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::setClearColor",1,"Neo2D::Canvas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Canvas::setClearColor",2,"Neo::Vector4");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_setClearColor",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Canvas_setClearColor",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  (arg1)->setClearColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_enableRenderToTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::enableRenderToTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::enableRenderToTexture",1,"Neo2D::Canvas *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Canvas::enableRenderToTexture",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_enableRenderToTexture",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->enableRenderToTexture((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_enableRenderToTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::enableRenderToTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::enableRenderToTexture",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_enableRenderToTexture",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->enableRenderToTexture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_enableRenderToTexture(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Canvas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Canvas_enableRenderToTexture__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Canvas, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Canvas_enableRenderToTexture__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Canvas_enableRenderToTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Canvas::enableRenderToTexture(char const *)\n"
    "    Neo2D::Canvas::enableRenderToTexture()\n");
  lua_error(L);return 0;
}


static int _wrap_Canvas_disableRenderToTexture(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::Canvas::disableRenderToTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::disableRenderToTexture",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_disableRenderToTexture",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->disableRenderToTexture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_setCameraOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Canvas::setCameraOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::setCameraOffset",1,"Neo2D::Canvas *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Canvas::setCameraOffset",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_setCameraOffset",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Canvas_setCameraOffset",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setCameraOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_getCameraOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Canvas::getCameraOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::getCameraOffset",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_getCameraOffset",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  result = (arg1)->getCameraOffset();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_getSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Canvas::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::getSize",1,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_getSize",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  result = (arg1)->getSize();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Canvas_setSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Canvas *arg1 = (Neo2D::Canvas *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("Neo2D::Canvas::setSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Canvas::setSize",1,"Neo2D::Canvas *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Canvas::setSize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Canvas::setSize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("Canvas_setSize",1,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setSize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Canvas(void *obj) {
Neo2D::Canvas *arg1 = (Neo2D::Canvas *) obj;
delete arg1;
}
static int _proxy__wrap_new_Canvas(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Canvas);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Canvas_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Canvas_methods[]= {
    { "getScale", _wrap_Canvas_getScale},
    { "setScale", _wrap_Canvas_setScale},
    { "addSpriteBatch", _wrap_Canvas_addSpriteBatch},
    { "draw", _wrap_Canvas_draw},
    { "update", _wrap_Canvas_update},
    { "clear", _wrap_Canvas_clear},
    { "getLayer", _wrap_Canvas_getLayer},
    { "setLayer", _wrap_Canvas_setLayer},
    { "addWidget", _wrap_Canvas_addWidget},
    { "getClearColor", _wrap_Canvas_getClearColor},
    { "setClearColor", _wrap_Canvas_setClearColor},
    { "enableRenderToTexture", _wrap_Canvas_enableRenderToTexture},
    { "disableRenderToTexture", _wrap_Canvas_disableRenderToTexture},
    { "setCameraOffset", _wrap_Canvas_setCameraOffset},
    { "getCameraOffset", _wrap_Canvas_getCameraOffset},
    { "getSize", _wrap_Canvas_getSize},
    { "setSize", _wrap_Canvas_setSize},
    {0,0}
};
static swig_lua_method swig_Canvas_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Canvas_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Canvas_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Canvas_Sf_SwigStatic_methods[]= {
    { "getInstance", _wrap_Canvas_getInstance},
    {0,0}
};
static swig_lua_class* swig_Canvas_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Canvas_Sf_SwigStatic = {
    "Canvas",
    swig_Canvas_Sf_SwigStatic_methods,
    swig_Canvas_Sf_SwigStatic_attributes,
    swig_Canvas_Sf_SwigStatic_constants,
    swig_Canvas_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Canvas_bases[] = {0};
static const char *swig_Canvas_base_names[] = {0};
static swig_lua_class _wrap_class_Canvas = { "Canvas", "Canvas", &SWIGTYPE_p_Neo2D__Canvas,_proxy__wrap_new_Canvas, swig_delete_Canvas, swig_Canvas_methods, swig_Canvas_attributes, &swig_Canvas_Sf_SwigStatic, swig_Canvas_meta, swig_Canvas_bases, swig_Canvas_base_names };

static int _wrap_CulledSpriteBatch_updateVisibility__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::CulledSpriteBatch *arg1 = (Neo2D::CulledSpriteBatch *) 0 ;
  Neo2D::Canvas *arg2 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::CulledSpriteBatch::updateVisibility",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::CulledSpriteBatch::updateVisibility",1,"Neo2D::CulledSpriteBatch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::CulledSpriteBatch::updateVisibility",2,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__CulledSpriteBatch,0))){
    SWIG_fail_ptr("CulledSpriteBatch_updateVisibility",1,SWIGTYPE_p_Neo2D__CulledSpriteBatch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("CulledSpriteBatch_updateVisibility",2,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->updateVisibility(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CulledSpriteBatch_updateVisibility__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::CulledSpriteBatch *arg1 = (Neo2D::CulledSpriteBatch *) 0 ;
  
  SWIG_check_num_args("Neo2D::CulledSpriteBatch::updateVisibility",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::CulledSpriteBatch::updateVisibility",1,"Neo2D::CulledSpriteBatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__CulledSpriteBatch,0))){
    SWIG_fail_ptr("CulledSpriteBatch_updateVisibility",1,SWIGTYPE_p_Neo2D__CulledSpriteBatch);
  }
  
  (arg1)->updateVisibility();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CulledSpriteBatch_updateVisibility(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__CulledSpriteBatch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CulledSpriteBatch_updateVisibility__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__CulledSpriteBatch, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo2D__Canvas, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CulledSpriteBatch_updateVisibility__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CulledSpriteBatch_updateVisibility'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::CulledSpriteBatch::updateVisibility(Neo2D::Canvas *)\n"
    "    Neo2D::CulledSpriteBatch::updateVisibility()\n");
  lua_error(L);return 0;
}


static int _wrap_CulledSpriteBatch_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::CulledSpriteBatch *arg1 = (Neo2D::CulledSpriteBatch *) 0 ;
  Neo2D::Canvas *arg2 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::CulledSpriteBatch::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::CulledSpriteBatch::update",1,"Neo2D::CulledSpriteBatch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::CulledSpriteBatch::update",2,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__CulledSpriteBatch,0))){
    SWIG_fail_ptr("CulledSpriteBatch_update",1,SWIGTYPE_p_Neo2D__CulledSpriteBatch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Canvas,0))){
    SWIG_fail_ptr("CulledSpriteBatch_update",2,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CulledSpriteBatch(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::CulledSpriteBatch *result = 0 ;
  
  SWIG_check_num_args("Neo2D::CulledSpriteBatch::CulledSpriteBatch",0,0)
  result = (Neo2D::CulledSpriteBatch *)new Neo2D::CulledSpriteBatch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__CulledSpriteBatch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CulledSpriteBatch(void *obj) {
Neo2D::CulledSpriteBatch *arg1 = (Neo2D::CulledSpriteBatch *) obj;
delete arg1;
}
static int _proxy__wrap_new_CulledSpriteBatch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CulledSpriteBatch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CulledSpriteBatch_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CulledSpriteBatch_methods[]= {
    { "updateVisibility", _wrap_CulledSpriteBatch_updateVisibility},
    { "update", _wrap_CulledSpriteBatch_update},
    {0,0}
};
static swig_lua_method swig_CulledSpriteBatch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CulledSpriteBatch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CulledSpriteBatch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CulledSpriteBatch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CulledSpriteBatch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CulledSpriteBatch_Sf_SwigStatic = {
    "CulledSpriteBatch",
    swig_CulledSpriteBatch_Sf_SwigStatic_methods,
    swig_CulledSpriteBatch_Sf_SwigStatic_attributes,
    swig_CulledSpriteBatch_Sf_SwigStatic_constants,
    swig_CulledSpriteBatch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CulledSpriteBatch_bases[] = {0,0};
static const char *swig_CulledSpriteBatch_base_names[] = {"Neo2D::SpriteBatch *",0};
static swig_lua_class _wrap_class_CulledSpriteBatch = { "CulledSpriteBatch", "CulledSpriteBatch", &SWIGTYPE_p_Neo2D__CulledSpriteBatch,_proxy__wrap_new_CulledSpriteBatch, swig_delete_CulledSpriteBatch, swig_CulledSpriteBatch_methods, swig_CulledSpriteBatch_attributes, &swig_CulledSpriteBatch_Sf_SwigStatic, swig_CulledSpriteBatch_meta, swig_CulledSpriteBatch_bases, swig_CulledSpriteBatch_base_names };

static int _wrap_new_Neo2DEngine(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::Neo2DEngine",0,0)
  result = (Neo2D::Neo2DEngine *)new Neo2D::Neo2DEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Neo2DEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_loadFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  Neo::FontRef *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::loadFont",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadFont",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadFont",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadFont",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_loadFont",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Neo::FontRef *)(arg1)->loadFont((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__FontRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_loadTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::loadTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",3,"bool const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",4,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_loadTexture",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_loadTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::loadTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",3,"bool const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_loadTexture",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_loadTexture__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::loadTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::loadTexture",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_loadTexture",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__TextureRef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_loadTexture(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Neo2DEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Neo2DEngine_loadTexture__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Neo2DEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Neo2DEngine_loadTexture__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Neo2DEngine, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Neo2DEngine_loadTexture__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Neo2DEngine_loadTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Neo2DEngine::loadTexture(char const *,bool const,bool const)\n"
    "    Neo2D::Neo2DEngine::loadTexture(char const *,bool const)\n"
    "    Neo2D::Neo2DEngine::loadTexture(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Neo2DEngine_getThemeDirectory(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeDirectory",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeDirectory",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeDirectory();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBorderH(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBorderH",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBorderH",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBorderH",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBorderH();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBorderV(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBorderV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBorderV",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBorderV",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBorderV();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBody(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBody",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBody",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBody();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeEdge(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeEdge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeEdge",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeEdge",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeEdge();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBorderHHover(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBorderHHover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBorderHHover",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBorderHHover",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBorderHHover();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBorderVHover(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBorderVHover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBorderVHover",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBorderVHover",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBorderVHover();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBodyHover(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBodyHover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBodyHover",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBodyHover",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBodyHover();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeEdgeHover(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeEdgeHover",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeEdgeHover",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeEdgeHover",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeEdgeHover();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBorderHPressed(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBorderHPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBorderHPressed",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBorderHPressed",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBorderHPressed();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBorderVPressed(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBorderVPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBorderVPressed",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBorderVPressed",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBorderVPressed();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeBodyPressed(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeBodyPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeBodyPressed",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeBodyPressed",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeBodyPressed();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getThemeEdgePressed(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getThemeEdgePressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getThemeEdgePressed",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getThemeEdgePressed",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getThemeEdgePressed();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_setThemeDirectory(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::setThemeDirectory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::setThemeDirectory",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::setThemeDirectory",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_setThemeDirectory",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setThemeDirectory((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getInstance",0,0)
  result = (Neo2D::Neo2DEngine *)Neo2D::Neo2DEngine::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Neo2DEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_setupLuaInterface(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::ScriptContext *arg2 = (Neo::ScriptContext *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::setupLuaInterface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::setupLuaInterface",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::setupLuaInterface",2,"Neo::ScriptContext *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_setupLuaInterface",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo__ScriptContext,0))){
    SWIG_fail_ptr("Neo2DEngine_setupLuaInterface",2,SWIGTYPE_p_Neo__ScriptContext);
  }
  
  (arg1)->setupLuaInterface(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_setEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::setEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::setEnabled",1,"Neo2D::Neo2DEngine *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::setEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_setEnabled",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::draw",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_draw",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::update",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_update",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getDefaultFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getDefaultFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getDefaultFont",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getDefaultFont",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (char *)(arg1)->getDefaultFont();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getDefaultFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getDefaultFontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getDefaultFontSize",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getDefaultFontSize",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (float)(arg1)->getDefaultFontSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_setDefaultFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::setDefaultFontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::setDefaultFontSize",1,"Neo2D::Neo2DEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::setDefaultFontSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_setDefaultFontSize",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDefaultFontSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getNormalBackground(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getNormalBackground",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getNormalBackground",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getNormalBackground",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (arg1)->getNormalBackground();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getHoverBackground(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getHoverBackground",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getHoverBackground",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getHoverBackground",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (arg1)->getHoverBackground();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getHighlightBackground(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getHighlightBackground",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getHighlightBackground",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getHighlightBackground",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (arg1)->getHighlightBackground();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_setNormalBackground(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::setNormalBackground",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::setNormalBackground",1,"Neo2D::Neo2DEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::setNormalBackground",2,"Neo::Vector4");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_setNormalBackground",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Neo2DEngine_setNormalBackground",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  (arg1)->setNormalBackground(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_setHoverBackground(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::setHoverBackground",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::setHoverBackground",1,"Neo2D::Neo2DEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::setHoverBackground",2,"Neo::Vector4");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_setHoverBackground",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Neo2DEngine_setHoverBackground",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  (arg1)->setHoverBackground(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_setHighlightBackground(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::setHighlightBackground",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::setHighlightBackground",1,"Neo2D::Neo2DEngine *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::setHighlightBackground",2,"Neo::Vector4");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_setHighlightBackground",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Neo2DEngine_setHighlightBackground",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  (arg1)->setHighlightBackground(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getWidget(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  unsigned int arg2 ;
  Neo2D::Widget *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getWidget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getWidget",1,"Neo2D::Neo2DEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::getWidget",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getWidget",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo2D::Widget *)(arg1)->getWidget(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Widget,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_addWidget(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo2D::Widget *arg2 = (Neo2D::Widget *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::addWidget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::addWidget",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::addWidget",2,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_addWidget",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Widget,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Neo2DEngine_addWidget",2,SWIGTYPE_p_Neo2D__Widget);
  }
  
  result = (int)(arg1)->addWidget(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getNumWidgets(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getNumWidgets",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getNumWidgets",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getNumWidgets",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (arg1)->getNumWidgets();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_addCanvas(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  Neo2D::Canvas *arg2 = (Neo2D::Canvas *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::addCanvas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::addCanvas",1,"Neo2D::Neo2DEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::addCanvas",2,"Neo2D::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_addCanvas",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Canvas,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Neo2DEngine_addCanvas",2,SWIGTYPE_p_Neo2D__Canvas);
  }
  
  (arg1)->addCanvas(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_getCanvas(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  unsigned int arg2 ;
  Neo2D::Canvas *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::getCanvas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::getCanvas",1,"Neo2D::Neo2DEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::getCanvas",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_getCanvas",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo2D::Canvas *)(arg1)->getCanvas(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Canvas,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_updateLayers(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::updateLayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::updateLayers",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_updateLayers",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  (arg1)->updateLayers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_destroyWidget(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::destroyWidget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::destroyWidget",1,"Neo2D::Neo2DEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Neo2DEngine::destroyWidget",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_destroyWidget",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->destroyWidget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_clear(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::clear",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_clear",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_scheduleClear(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::scheduleClear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::scheduleClear",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_scheduleClear",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  (arg1)->scheduleClear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Neo2DEngine_isMouseOnGui(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Neo2DEngine::isMouseOnGui",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Neo2DEngine::isMouseOnGui",1,"Neo2D::Neo2DEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Neo2DEngine,0))){
    SWIG_fail_ptr("Neo2DEngine_isMouseOnGui",1,SWIGTYPE_p_Neo2D__Neo2DEngine);
  }
  
  result = (bool)(arg1)->isMouseOnGui();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Neo2DEngine(void *obj) {
Neo2D::Neo2DEngine *arg1 = (Neo2D::Neo2DEngine *) obj;
delete arg1;
}
static int _proxy__wrap_new_Neo2DEngine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Neo2DEngine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Neo2DEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Neo2DEngine_methods[]= {
    { "loadFont", _wrap_Neo2DEngine_loadFont},
    { "loadTexture", _wrap_Neo2DEngine_loadTexture},
    { "getThemeDirectory", _wrap_Neo2DEngine_getThemeDirectory},
    { "getThemeBorderH", _wrap_Neo2DEngine_getThemeBorderH},
    { "getThemeBorderV", _wrap_Neo2DEngine_getThemeBorderV},
    { "getThemeBody", _wrap_Neo2DEngine_getThemeBody},
    { "getThemeEdge", _wrap_Neo2DEngine_getThemeEdge},
    { "getThemeBorderHHover", _wrap_Neo2DEngine_getThemeBorderHHover},
    { "getThemeBorderVHover", _wrap_Neo2DEngine_getThemeBorderVHover},
    { "getThemeBodyHover", _wrap_Neo2DEngine_getThemeBodyHover},
    { "getThemeEdgeHover", _wrap_Neo2DEngine_getThemeEdgeHover},
    { "getThemeBorderHPressed", _wrap_Neo2DEngine_getThemeBorderHPressed},
    { "getThemeBorderVPressed", _wrap_Neo2DEngine_getThemeBorderVPressed},
    { "getThemeBodyPressed", _wrap_Neo2DEngine_getThemeBodyPressed},
    { "getThemeEdgePressed", _wrap_Neo2DEngine_getThemeEdgePressed},
    { "setThemeDirectory", _wrap_Neo2DEngine_setThemeDirectory},
    { "setupLuaInterface", _wrap_Neo2DEngine_setupLuaInterface},
    { "setEnabled", _wrap_Neo2DEngine_setEnabled},
    { "draw", _wrap_Neo2DEngine_draw},
    { "update", _wrap_Neo2DEngine_update},
    { "getDefaultFont", _wrap_Neo2DEngine_getDefaultFont},
    { "getDefaultFontSize", _wrap_Neo2DEngine_getDefaultFontSize},
    { "setDefaultFontSize", _wrap_Neo2DEngine_setDefaultFontSize},
    { "getNormalBackground", _wrap_Neo2DEngine_getNormalBackground},
    { "getHoverBackground", _wrap_Neo2DEngine_getHoverBackground},
    { "getHighlightBackground", _wrap_Neo2DEngine_getHighlightBackground},
    { "setNormalBackground", _wrap_Neo2DEngine_setNormalBackground},
    { "setHoverBackground", _wrap_Neo2DEngine_setHoverBackground},
    { "setHighlightBackground", _wrap_Neo2DEngine_setHighlightBackground},
    { "getWidget", _wrap_Neo2DEngine_getWidget},
    { "addWidget", _wrap_Neo2DEngine_addWidget},
    { "getNumWidgets", _wrap_Neo2DEngine_getNumWidgets},
    { "addCanvas", _wrap_Neo2DEngine_addCanvas},
    { "getCanvas", _wrap_Neo2DEngine_getCanvas},
    { "updateLayers", _wrap_Neo2DEngine_updateLayers},
    { "destroyWidget", _wrap_Neo2DEngine_destroyWidget},
    { "clear", _wrap_Neo2DEngine_clear},
    { "scheduleClear", _wrap_Neo2DEngine_scheduleClear},
    { "isMouseOnGui", _wrap_Neo2DEngine_isMouseOnGui},
    {0,0}
};
static swig_lua_method swig_Neo2DEngine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Neo2DEngine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Neo2DEngine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Neo2DEngine_Sf_SwigStatic_methods[]= {
    { "getInstance", _wrap_Neo2DEngine_getInstance},
    {0,0}
};
static swig_lua_class* swig_Neo2DEngine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Neo2DEngine_Sf_SwigStatic = {
    "Neo2DEngine",
    swig_Neo2DEngine_Sf_SwigStatic_methods,
    swig_Neo2DEngine_Sf_SwigStatic_attributes,
    swig_Neo2DEngine_Sf_SwigStatic_constants,
    swig_Neo2DEngine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Neo2DEngine_bases[] = {0};
static const char *swig_Neo2DEngine_base_names[] = {0};
static swig_lua_class _wrap_class_Neo2DEngine = { "Neo2DEngine", "Neo2DEngine", &SWIGTYPE_p_Neo2D__Neo2DEngine,_proxy__wrap_new_Neo2DEngine, swig_delete_Neo2DEngine, swig_Neo2DEngine_methods, swig_Neo2DEngine_attributes, &swig_Neo2DEngine_Sf_SwigStatic, swig_Neo2DEngine_meta, swig_Neo2DEngine_bases, swig_Neo2DEngine_base_names };

static int _wrap_new_Button(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::Button *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Button::Button",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::Button",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Button::Button",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::Button::Button",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::Button::Button",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::Button::Button",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::Button *)new Neo2D::Gui::Button(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Button,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getAlignment(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  Neo::TEXT_ALIGN_MODES result;
  
  SWIG_check_num_args("Neo2D::Gui::Button::getAlignment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::getAlignment",1,"Neo2D::Gui::Button *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_getAlignment",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  result = (Neo::TEXT_ALIGN_MODES)(arg1)->getAlignment();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setAlignment(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  Neo::TEXT_ALIGN_MODES arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Button::setAlignment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::setAlignment",1,"Neo2D::Gui::Button *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Button::setAlignment",2,"Neo::TEXT_ALIGN_MODES");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_setAlignment",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  arg2 = (Neo::TEXT_ALIGN_MODES)(int)lua_tonumber(L, 2);
  (arg1)->setAlignment(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setButtonState(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  Neo2D::Gui::BUTTON_STATE arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Button::setButtonState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::setButtonState",1,"Neo2D::Gui::Button *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Button::setButtonState",2,"Neo2D::Gui::BUTTON_STATE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_setButtonState",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  arg2 = (Neo2D::Gui::BUTTON_STATE)(int)lua_tonumber(L, 2);
  (arg1)->setButtonState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getButtonState(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  Neo2D::Gui::BUTTON_STATE result;
  
  SWIG_check_num_args("Neo2D::Gui::Button::getButtonState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::getButtonState",1,"Neo2D::Gui::Button *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_getButtonState",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  result = (Neo2D::Gui::BUTTON_STATE)(arg1)->getButtonState();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_getFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo2D::Gui::Button::getFontSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::getFontSize",1,"Neo2D::Gui::Button *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_getFontSize",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  result = (float)(arg1)->getFontSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_setFontSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Button::setFontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::setFontSize",1,"Neo2D::Gui::Button *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Button::setFontSize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_setFontSize",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setFontSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Button::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::draw",1,"Neo2D::Gui::Button *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Button::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_draw",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Button_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Button::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Button::update",1,"Neo2D::Gui::Button *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Button_update",1,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Button(void *obj) {
Neo2D::Gui::Button *arg1 = (Neo2D::Gui::Button *) obj;
delete arg1;
}
static int _proxy__wrap_new_Button(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Button);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Button_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Button_methods[]= {
    { "getAlignment", _wrap_Button_getAlignment},
    { "setAlignment", _wrap_Button_setAlignment},
    { "setButtonState", _wrap_Button_setButtonState},
    { "getButtonState", _wrap_Button_getButtonState},
    { "getFontSize", _wrap_Button_getFontSize},
    { "setFontSize", _wrap_Button_setFontSize},
    { "draw", _wrap_Button_draw},
    { "update", _wrap_Button_update},
    {0,0}
};
static swig_lua_method swig_Button_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Button_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Button_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Button_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Button_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Button_Sf_SwigStatic = {
    "Button",
    swig_Button_Sf_SwigStatic_methods,
    swig_Button_Sf_SwigStatic_attributes,
    swig_Button_Sf_SwigStatic_constants,
    swig_Button_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Button_bases[] = {0,0};
static const char *swig_Button_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_Button = { "Button", "Button", &SWIGTYPE_p_Neo2D__Gui__Button,_proxy__wrap_new_Button, swig_delete_Button, swig_Button_methods, swig_Button_attributes, &swig_Button_Sf_SwigStatic, swig_Button_meta, swig_Button_bases, swig_Button_base_names };

static int _wrap_new_Label(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::Label *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::Label",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::Label",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Label::Label",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::Label::Label",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::Label::Label",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::Label::Label",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::Label *)new Neo2D::Gui::Label(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Label,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setAlignment(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::setAlignment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::setAlignment",1,"Neo2D::Gui::Label *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Label::setAlignment",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_setAlignment",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setAlignment(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getAlignment(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  Neo::TEXT_ALIGN_MODES result;
  
  SWIG_check_num_args("Neo2D::Gui::Label::getAlignment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::getAlignment",1,"Neo2D::Gui::Label *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_getAlignment",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  result = (Neo::TEXT_ALIGN_MODES)(arg1)->getAlignment();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::setFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::setFont",1,"Neo2D::Gui::Label *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Gui::Label::setFont",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_setFont",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setFont((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getFont(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::getFont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::getFont",1,"Neo2D::Gui::Label *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_getFont",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  result = (char *)(arg1)->getFont();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_getColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo2D::Gui::Label::getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::getColor",1,"Neo2D::Gui::Label *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_getColor",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  result = (arg1)->getColor();
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_setColor(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  Neo::Vector4 arg2 ;
  Neo::Vector4 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::setColor",1,"Neo2D::Gui::Label *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Label::setColor",2,"Neo::Vector4");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_setColor",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector4,0))){
    SWIG_fail_ptr("Label_setColor",2,SWIGTYPE_p_Neo__Vector4);
  }
  arg2 = *argp2;
  
  (arg1)->setColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::draw",1,"Neo2D::Gui::Label *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Label::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_draw",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Label_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::draw",1,"Neo2D::Gui::Label *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_draw",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Label_draw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__Label, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Label_draw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__Label, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Label_draw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Label_draw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::Label::draw(Neo::Vector2)\n"
    "    Neo2D::Gui::Label::draw()\n");
  lua_error(L);return 0;
}


static int _wrap_Label_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Label::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Label::update",1,"Neo2D::Gui::Label *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Label,0))){
    SWIG_fail_ptr("Label_update",1,SWIGTYPE_p_Neo2D__Gui__Label);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Label(void *obj) {
Neo2D::Gui::Label *arg1 = (Neo2D::Gui::Label *) obj;
delete arg1;
}
static int _proxy__wrap_new_Label(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Label);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Label_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Label_methods[]= {
    { "setAlignment", _wrap_Label_setAlignment},
    { "getAlignment", _wrap_Label_getAlignment},
    { "setFont", _wrap_Label_setFont},
    { "getFont", _wrap_Label_getFont},
    { "getColor", _wrap_Label_getColor},
    { "setColor", _wrap_Label_setColor},
    { "draw", _wrap_Label_draw},
    { "update", _wrap_Label_update},
    {0,0}
};
static swig_lua_method swig_Label_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Label_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Label_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Label_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Label_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Label_Sf_SwigStatic = {
    "Label",
    swig_Label_Sf_SwigStatic_methods,
    swig_Label_Sf_SwigStatic_attributes,
    swig_Label_Sf_SwigStatic_constants,
    swig_Label_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Label_bases[] = {0,0};
static const char *swig_Label_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_Label = { "Label", "Label", &SWIGTYPE_p_Neo2D__Gui__Label,_proxy__wrap_new_Label, swig_delete_Label, swig_Label_methods, swig_Label_attributes, &swig_Label_Sf_SwigStatic, swig_Label_meta, swig_Label_bases, swig_Label_base_names };

static int _wrap_new_CheckButton(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  Neo2D::Gui::CheckButton *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::CheckButton::CheckButton",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::CheckButton::CheckButton",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::CheckButton::CheckButton",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::CheckButton::CheckButton",3,"unsigned int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Neo2D::Gui::CheckButton::CheckButton",4,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (Neo2D::Gui::CheckButton *)new Neo2D::Gui::CheckButton(arg1,arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__CheckButton,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckButton_setValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::CheckButton *arg1 = (Neo2D::Gui::CheckButton *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::CheckButton::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::CheckButton::setValue",1,"Neo2D::Gui::CheckButton *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo2D::Gui::CheckButton::setValue",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__CheckButton,0))){
    SWIG_fail_ptr("CheckButton_setValue",1,SWIGTYPE_p_Neo2D__Gui__CheckButton);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckButton_getValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::CheckButton *arg1 = (Neo2D::Gui::CheckButton *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::CheckButton::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::CheckButton::getValue",1,"Neo2D::Gui::CheckButton *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__CheckButton,0))){
    SWIG_fail_ptr("CheckButton_getValue",1,SWIGTYPE_p_Neo2D__Gui__CheckButton);
  }
  
  result = (bool)(arg1)->getValue();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckButton_setLabel(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::CheckButton *arg1 = (Neo2D::Gui::CheckButton *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::CheckButton::setLabel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::CheckButton::setLabel",1,"Neo2D::Gui::CheckButton *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Gui::CheckButton::setLabel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__CheckButton,0))){
    SWIG_fail_ptr("CheckButton_setLabel",1,SWIGTYPE_p_Neo2D__Gui__CheckButton);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setLabel((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckButton_getLabel(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::CheckButton *arg1 = (Neo2D::Gui::CheckButton *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::CheckButton::getLabel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::CheckButton::getLabel",1,"Neo2D::Gui::CheckButton *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__CheckButton,0))){
    SWIG_fail_ptr("CheckButton_getLabel",1,SWIGTYPE_p_Neo2D__Gui__CheckButton);
  }
  
  result = (char *)(arg1)->getLabel();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckButton_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::CheckButton *arg1 = (Neo2D::Gui::CheckButton *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::CheckButton::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::CheckButton::draw",1,"Neo2D::Gui::CheckButton *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::CheckButton::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__CheckButton,0))){
    SWIG_fail_ptr("CheckButton_draw",1,SWIGTYPE_p_Neo2D__Gui__CheckButton);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("CheckButton_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CheckButton_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::CheckButton *arg1 = (Neo2D::Gui::CheckButton *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::CheckButton::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::CheckButton::update",1,"Neo2D::Gui::CheckButton *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__CheckButton,0))){
    SWIG_fail_ptr("CheckButton_update",1,SWIGTYPE_p_Neo2D__Gui__CheckButton);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CheckButton(void *obj) {
Neo2D::Gui::CheckButton *arg1 = (Neo2D::Gui::CheckButton *) obj;
delete arg1;
}
static int _proxy__wrap_new_CheckButton(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CheckButton);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CheckButton_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CheckButton_methods[]= {
    { "setValue", _wrap_CheckButton_setValue},
    { "getValue", _wrap_CheckButton_getValue},
    { "setLabel", _wrap_CheckButton_setLabel},
    { "getLabel", _wrap_CheckButton_getLabel},
    { "draw", _wrap_CheckButton_draw},
    { "update", _wrap_CheckButton_update},
    {0,0}
};
static swig_lua_method swig_CheckButton_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CheckButton_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CheckButton_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CheckButton_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CheckButton_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CheckButton_Sf_SwigStatic = {
    "CheckButton",
    swig_CheckButton_Sf_SwigStatic_methods,
    swig_CheckButton_Sf_SwigStatic_attributes,
    swig_CheckButton_Sf_SwigStatic_constants,
    swig_CheckButton_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CheckButton_bases[] = {0,0};
static const char *swig_CheckButton_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_CheckButton = { "CheckButton", "CheckButton", &SWIGTYPE_p_Neo2D__Gui__CheckButton,_proxy__wrap_new_CheckButton, swig_delete_CheckButton, swig_CheckButton_methods, swig_CheckButton_attributes, &swig_CheckButton_Sf_SwigStatic, swig_CheckButton_meta, swig_CheckButton_bases, swig_CheckButton_base_names };

static int _wrap_new_Container(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::Container *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Container::Container",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::Container::Container",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Container::Container",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::Container::Container",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::Container::Container",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::Container::Container",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::Container *)new Neo2D::Gui::Container(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Container,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Container_addWidget(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Container *arg1 = (Neo2D::Gui::Container *) 0 ;
  Neo2D::Widget *arg2 = (Neo2D::Widget *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Container::addWidget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Container::addWidget",1,"Neo2D::Gui::Container *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::Container::addWidget",2,"Neo2D::Widget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Container,0))){
    SWIG_fail_ptr("Container_addWidget",1,SWIGTYPE_p_Neo2D__Gui__Container);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Widget,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Container_addWidget",2,SWIGTYPE_p_Neo2D__Widget);
  }
  
  (arg1)->addWidget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Container_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Container *arg1 = (Neo2D::Gui::Container *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Container::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Container::draw",1,"Neo2D::Gui::Container *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Container,0))){
    SWIG_fail_ptr("Container_draw",1,SWIGTYPE_p_Neo2D__Gui__Container);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Container_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Container *arg1 = (Neo2D::Gui::Container *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Container::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Container::draw",1,"Neo2D::Gui::Container *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Container::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Container,0))){
    SWIG_fail_ptr("Container_draw",1,SWIGTYPE_p_Neo2D__Gui__Container);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Container_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Container_draw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__Container, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Container_draw__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__Container, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Container_draw__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Container_draw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::Container::draw()\n"
    "    Neo2D::Gui::Container::draw(Neo::Vector2)\n");
  lua_error(L);return 0;
}


static int _wrap_Container_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Container *arg1 = (Neo2D::Gui::Container *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Container::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Container::update",1,"Neo2D::Gui::Container *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Container,0))){
    SWIG_fail_ptr("Container_update",1,SWIGTYPE_p_Neo2D__Gui__Container);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Container(void *obj) {
Neo2D::Gui::Container *arg1 = (Neo2D::Gui::Container *) obj;
delete arg1;
}
static int _proxy__wrap_new_Container(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Container);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Container_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Container_methods[]= {
    { "addWidget", _wrap_Container_addWidget},
    { "draw", _wrap_Container_draw},
    { "update", _wrap_Container_update},
    {0,0}
};
static swig_lua_method swig_Container_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Container_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Container_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Container_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Container_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Container_Sf_SwigStatic = {
    "Container",
    swig_Container_Sf_SwigStatic_methods,
    swig_Container_Sf_SwigStatic_attributes,
    swig_Container_Sf_SwigStatic_constants,
    swig_Container_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Container_bases[] = {0,0};
static const char *swig_Container_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_Container = { "Container", "Container", &SWIGTYPE_p_Neo2D__Gui__Container,_proxy__wrap_new_Container, swig_delete_Container, swig_Container_methods, swig_Container_attributes, &swig_Container_Sf_SwigStatic, swig_Container_meta, swig_Container_bases, swig_Container_base_names };

static int _wrap_new_WindowManager(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::WindowManager *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::WindowManager::WindowManager",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::WindowManager::WindowManager",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::WindowManager::WindowManager",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::WindowManager::WindowManager",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::WindowManager::WindowManager",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::WindowManager::WindowManager",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::WindowManager *)new Neo2D::Gui::WindowManager(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__WindowManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowManager_addWindow(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::WindowManager *arg1 = (Neo2D::Gui::WindowManager *) 0 ;
  Neo2D::Gui::Window *arg2 = (Neo2D::Gui::Window *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::WindowManager::addWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::WindowManager::addWindow",1,"Neo2D::Gui::WindowManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::WindowManager::addWindow",2,"Neo2D::Gui::Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__WindowManager,0))){
    SWIG_fail_ptr("WindowManager_addWindow",1,SWIGTYPE_p_Neo2D__Gui__WindowManager);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Gui__Window,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("WindowManager_addWindow",2,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  (arg1)->addWindow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowManager_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::WindowManager *arg1 = (Neo2D::Gui::WindowManager *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::WindowManager::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::WindowManager::draw",1,"Neo2D::Gui::WindowManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__WindowManager,0))){
    SWIG_fail_ptr("WindowManager_draw",1,SWIGTYPE_p_Neo2D__Gui__WindowManager);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowManager_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::WindowManager *arg1 = (Neo2D::Gui::WindowManager *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::WindowManager::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::WindowManager::update",1,"Neo2D::Gui::WindowManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__WindowManager,0))){
    SWIG_fail_ptr("WindowManager_update",1,SWIGTYPE_p_Neo2D__Gui__WindowManager);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowManager_selectWindow(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::WindowManager *arg1 = (Neo2D::Gui::WindowManager *) 0 ;
  Neo2D::Gui::Window *arg2 = (Neo2D::Gui::Window *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::WindowManager::selectWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::WindowManager::selectWindow",1,"Neo2D::Gui::WindowManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::WindowManager::selectWindow",2,"Neo2D::Gui::Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__WindowManager,0))){
    SWIG_fail_ptr("WindowManager_selectWindow",1,SWIGTYPE_p_Neo2D__Gui__WindowManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Gui__Window,0))){
    SWIG_fail_ptr("WindowManager_selectWindow",2,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  (arg1)->selectWindow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowManager_getSelectedWindow(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::WindowManager *arg1 = (Neo2D::Gui::WindowManager *) 0 ;
  Neo2D::Gui::Window *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::WindowManager::getSelectedWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::WindowManager::getSelectedWindow",1,"Neo2D::Gui::WindowManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__WindowManager,0))){
    SWIG_fail_ptr("WindowManager_getSelectedWindow",1,SWIGTYPE_p_Neo2D__Gui__WindowManager);
  }
  
  result = (Neo2D::Gui::Window *)(arg1)->getSelectedWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Window,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowManager_isMouseOver(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::WindowManager *arg1 = (Neo2D::Gui::WindowManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::WindowManager::isMouseOver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::WindowManager::isMouseOver",1,"Neo2D::Gui::WindowManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__WindowManager,0))){
    SWIG_fail_ptr("WindowManager_isMouseOver",1,SWIGTYPE_p_Neo2D__Gui__WindowManager);
  }
  
  result = (bool)(arg1)->isMouseOver();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WindowManager(void *obj) {
Neo2D::Gui::WindowManager *arg1 = (Neo2D::Gui::WindowManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_WindowManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WindowManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WindowManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WindowManager_methods[]= {
    { "addWindow", _wrap_WindowManager_addWindow},
    { "draw", _wrap_WindowManager_draw},
    { "update", _wrap_WindowManager_update},
    { "selectWindow", _wrap_WindowManager_selectWindow},
    { "getSelectedWindow", _wrap_WindowManager_getSelectedWindow},
    { "isMouseOver", _wrap_WindowManager_isMouseOver},
    {0,0}
};
static swig_lua_method swig_WindowManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WindowManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WindowManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WindowManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WindowManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WindowManager_Sf_SwigStatic = {
    "WindowManager",
    swig_WindowManager_Sf_SwigStatic_methods,
    swig_WindowManager_Sf_SwigStatic_attributes,
    swig_WindowManager_Sf_SwigStatic_constants,
    swig_WindowManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WindowManager_bases[] = {0,0};
static const char *swig_WindowManager_base_names[] = {"Neo2D::Gui::Container *",0};
static swig_lua_class _wrap_class_WindowManager = { "WindowManager", "WindowManager", &SWIGTYPE_p_Neo2D__Gui__WindowManager,_proxy__wrap_new_WindowManager, swig_delete_WindowManager, swig_WindowManager_methods, swig_WindowManager_attributes, &swig_WindowManager_Sf_SwigStatic, swig_WindowManager_meta, swig_WindowManager_bases, swig_WindowManager_base_names };

static int _wrap_new_Window(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::Window *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Window::Window",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::Window::Window",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Window::Window",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::Window::Window",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::Window::Window",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::Window::Window",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::Window *)new Neo2D::Gui::Window(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Window,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Window_setWindowManager(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Window *arg1 = (Neo2D::Gui::Window *) 0 ;
  Neo2D::Gui::WindowManager *arg2 = (Neo2D::Gui::WindowManager *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Window::setWindowManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Window::setWindowManager",1,"Neo2D::Gui::Window *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::Window::setWindowManager",2,"Neo2D::Gui::WindowManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Window,0))){
    SWIG_fail_ptr("Window_setWindowManager",1,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Gui__WindowManager,0))){
    SWIG_fail_ptr("Window_setWindowManager",2,SWIGTYPE_p_Neo2D__Gui__WindowManager);
  }
  
  (arg1)->setWindowManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Window_containsPoint(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Window *arg1 = (Neo2D::Gui::Window *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::Window::containsPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Window::containsPoint",1,"Neo2D::Gui::Window *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Window::containsPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::Window::containsPoint",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Window,0))){
    SWIG_fail_ptr("Window_containsPoint",1,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)(arg1)->containsPoint(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Window_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Window *arg1 = (Neo2D::Gui::Window *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Window::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Window::draw",1,"Neo2D::Gui::Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Window,0))){
    SWIG_fail_ptr("Window_draw",1,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Window_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Window *arg1 = (Neo2D::Gui::Window *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Window::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Window::draw",1,"Neo2D::Gui::Window *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Window::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Window,0))){
    SWIG_fail_ptr("Window_draw",1,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Window_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Window_draw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__Window, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Window_draw__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__Window, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Window_draw__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Window_draw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::Window::draw()\n"
    "    Neo2D::Gui::Window::draw(Neo::Vector2)\n");
  lua_error(L);return 0;
}


static int _wrap_Window_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Window *arg1 = (Neo2D::Gui::Window *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Window::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Window::update",1,"Neo2D::Gui::Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Window,0))){
    SWIG_fail_ptr("Window_update",1,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Window_isMouseOver(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Window *arg1 = (Neo2D::Gui::Window *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::Window::isMouseOver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Window::isMouseOver",1,"Neo2D::Gui::Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Window,0))){
    SWIG_fail_ptr("Window_isMouseOver",1,SWIGTYPE_p_Neo2D__Gui__Window);
  }
  
  result = (bool)(arg1)->isMouseOver();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Window(void *obj) {
Neo2D::Gui::Window *arg1 = (Neo2D::Gui::Window *) obj;
delete arg1;
}
static int _proxy__wrap_new_Window(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Window);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Window_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Window_methods[]= {
    { "setWindowManager", _wrap_Window_setWindowManager},
    { "containsPoint", _wrap_Window_containsPoint},
    { "draw", _wrap_Window_draw},
    { "update", _wrap_Window_update},
    { "isMouseOver", _wrap_Window_isMouseOver},
    {0,0}
};
static swig_lua_method swig_Window_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Window_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Window_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Window_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Window_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Window_Sf_SwigStatic = {
    "Window",
    swig_Window_Sf_SwigStatic_methods,
    swig_Window_Sf_SwigStatic_attributes,
    swig_Window_Sf_SwigStatic_constants,
    swig_Window_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Window_bases[] = {0,0};
static const char *swig_Window_base_names[] = {"Neo2D::Gui::Container *",0};
static swig_lua_class _wrap_class_Window = { "Window", "Window", &SWIGTYPE_p_Neo2D__Gui__Window,_proxy__wrap_new_Window, swig_delete_Window, swig_Window_methods, swig_Window_attributes, &swig_Window_Sf_SwigStatic, swig_Window_meta, swig_Window_bases, swig_Window_base_names };

static int _wrap_new_TileSheet(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::TileSheet *result = 0 ;
  
  SWIG_check_num_args("Neo2D::TileSheet::TileSheet",0,0)
  result = (Neo2D::TileSheet *)new Neo2D::TileSheet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__TileSheet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TileSheet_loadImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Neo2D::TileSheet::loadImage",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::TileSheet::loadImage",1,"Neo2D::TileSheet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::TileSheet::loadImage",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::TileSheet::loadImage",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::TileSheet::loadImage",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo2D::TileSheet::loadImage",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__TileSheet,0))){
    SWIG_fail_ptr("TileSheet_loadImage",1,SWIGTYPE_p_Neo2D__TileSheet);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->loadImage((char const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TileSheet_getTexCoords(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Neo::Vector4 result;
  
  SWIG_check_num_args("Neo2D::TileSheet::getTexCoords",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::TileSheet::getTexCoords",1,"Neo2D::TileSheet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::TileSheet::getTexCoords",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::TileSheet::getTexCoords",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__TileSheet,0))){
    SWIG_fail_ptr("TileSheet_getTexCoords",1,SWIGTYPE_p_Neo2D__TileSheet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->getTexCoords(arg2,arg3);
  {
    Neo::Vector4 * resultptr = new Neo::Vector4((const Neo::Vector4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector4,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TileSheet_getImage(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo2D::TileSheet::getImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::TileSheet::getImage",1,"Neo2D::TileSheet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__TileSheet,0))){
    SWIG_fail_ptr("TileSheet_getImage",1,SWIGTYPE_p_Neo2D__TileSheet);
  }
  
  result = (int)(arg1)->getImage();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TileSheet(void *obj) {
Neo2D::TileSheet *arg1 = (Neo2D::TileSheet *) obj;
delete arg1;
}
static int _proxy__wrap_new_TileSheet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TileSheet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TileSheet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TileSheet_methods[]= {
    { "loadImage", _wrap_TileSheet_loadImage},
    { "getTexCoords", _wrap_TileSheet_getTexCoords},
    { "getImage", _wrap_TileSheet_getImage},
    {0,0}
};
static swig_lua_method swig_TileSheet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TileSheet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TileSheet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TileSheet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TileSheet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TileSheet_Sf_SwigStatic = {
    "TileSheet",
    swig_TileSheet_Sf_SwigStatic_methods,
    swig_TileSheet_Sf_SwigStatic_attributes,
    swig_TileSheet_Sf_SwigStatic_constants,
    swig_TileSheet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TileSheet_bases[] = {0};
static const char *swig_TileSheet_base_names[] = {0};
static swig_lua_class _wrap_class_TileSheet = { "TileSheet", "TileSheet", &SWIGTYPE_p_Neo2D__TileSheet,_proxy__wrap_new_TileSheet, swig_delete_TileSheet, swig_TileSheet_methods, swig_TileSheet_attributes, &swig_TileSheet_Sf_SwigStatic, swig_TileSheet_meta, swig_TileSheet_bases, swig_TileSheet_base_names };

static int _wrap_new_Tile(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  Neo2D::Tile *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Tile::Tile",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Tile::Tile",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Tile::Tile",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Tile::Tile",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Tile::Tile",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Tile::Tile",5,"char const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo2D::Tile::Tile",6,"unsigned int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo2D::Tile::Tile",7,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (unsigned int)lua_tonumber(L, 7);
  result = (Neo2D::Tile *)new Neo2D::Tile(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Tile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tile_getStaticName(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Tile::getStaticName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Tile::getStaticName",1,"Neo2D::Tile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Tile,0))){
    SWIG_fail_ptr("Tile_getStaticName",1,SWIGTYPE_p_Neo2D__Tile);
  }
  
  result = (char *)(arg1)->getStaticName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tile_setTileSheet(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  Neo2D::TileSheet *arg2 = (Neo2D::TileSheet *) 0 ;
  
  SWIG_check_num_args("Neo2D::Tile::setTileSheet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Tile::setTileSheet",1,"Neo2D::Tile *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Tile::setTileSheet",2,"Neo2D::TileSheet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Tile,0))){
    SWIG_fail_ptr("Tile_setTileSheet",1,SWIGTYPE_p_Neo2D__Tile);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__TileSheet,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Tile_setTileSheet",2,SWIGTYPE_p_Neo2D__TileSheet);
  }
  
  (arg1)->setTileSheet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tile_setOffset(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Tile::setOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Tile::setOffset",1,"Neo2D::Tile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Tile::setOffset",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Tile,0))){
    SWIG_fail_ptr("Tile_setOffset",1,SWIGTYPE_p_Neo2D__Tile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Tile_setOffset",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tile_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Tile::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Tile::draw",1,"Neo2D::Tile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Tile::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Tile,0))){
    SWIG_fail_ptr("Tile_draw",1,SWIGTYPE_p_Neo2D__Tile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Tile_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tile_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Tile *arg1 = (Neo2D::Tile *) 0 ;
  
  SWIG_check_num_args("Neo2D::Tile::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Tile::update",1,"Neo2D::Tile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Tile,0))){
    SWIG_fail_ptr("Tile_update",1,SWIGTYPE_p_Neo2D__Tile);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Tile(void *obj) {
Neo2D::Tile *arg1 = (Neo2D::Tile *) obj;
delete arg1;
}
static int _proxy__wrap_new_Tile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Tile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Tile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Tile_methods[]= {
    { "getStaticName", _wrap_Tile_getStaticName},
    { "setTileSheet", _wrap_Tile_setTileSheet},
    { "setOffset", _wrap_Tile_setOffset},
    { "draw", _wrap_Tile_draw},
    { "update", _wrap_Tile_update},
    {0,0}
};
static swig_lua_method swig_Tile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Tile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Tile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Tile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Tile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Tile_Sf_SwigStatic = {
    "Tile",
    swig_Tile_Sf_SwigStatic_methods,
    swig_Tile_Sf_SwigStatic_attributes,
    swig_Tile_Sf_SwigStatic_constants,
    swig_Tile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Tile_bases[] = {0,0};
static const char *swig_Tile_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_Tile = { "Tile", "Tile", &SWIGTYPE_p_Neo2D__Tile,_proxy__wrap_new_Tile, swig_delete_Tile, swig_Tile_methods, swig_Tile_attributes, &swig_Tile_Sf_SwigStatic, swig_Tile_meta, swig_Tile_bases, swig_Tile_base_names };

static int _wrap_new_InputField(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::InputField *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::InputField",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::InputField",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::InputField::InputField",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::InputField::InputField",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::InputField::InputField",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::InputField::InputField",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::InputField *)new Neo2D::Gui::InputField(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__InputField,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::draw",1,"Neo2D::Gui::InputField *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::InputField::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_draw",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("InputField_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::update",1,"Neo2D::Gui::InputField *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_update",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_setState(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  Neo2D::Gui::INPUT_STATE arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::setState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::setState",1,"Neo2D::Gui::InputField *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::InputField::setState",2,"Neo2D::Gui::INPUT_STATE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_setState",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  arg2 = (Neo2D::Gui::INPUT_STATE)(int)lua_tonumber(L, 2);
  (arg1)->setState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_getStaticName(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::getStaticName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::getStaticName",1,"Neo2D::Gui::InputField *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_getStaticName",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  result = (char *)(arg1)->getStaticName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_setLabel(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::setLabel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::setLabel",1,"Neo2D::Gui::InputField *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Gui::InputField::setLabel",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_setLabel",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setLabel((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_getType(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  Neo2D::Gui::INPUT_TYPE result;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::getType",1,"Neo2D::Gui::InputField *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_getType",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  result = (Neo2D::Gui::INPUT_TYPE)(arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_setType(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  Neo2D::Gui::INPUT_TYPE arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::setType",1,"Neo2D::Gui::InputField *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::InputField::setType",2,"Neo2D::Gui::INPUT_TYPE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_setType",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  arg2 = (Neo2D::Gui::INPUT_TYPE)(int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_isMultiline(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::isMultiline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::isMultiline",1,"Neo2D::Gui::InputField *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_isMultiline",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  result = (bool)(arg1)->isMultiline();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputField_setMultiline(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::InputField::setMultiline",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::InputField::setMultiline",1,"Neo2D::Gui::InputField *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo2D::Gui::InputField::setMultiline",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__InputField,0))){
    SWIG_fail_ptr("InputField_setMultiline",1,SWIGTYPE_p_Neo2D__Gui__InputField);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setMultiline(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputField(void *obj) {
Neo2D::Gui::InputField *arg1 = (Neo2D::Gui::InputField *) obj;
delete arg1;
}
static int _proxy__wrap_new_InputField(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InputField);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InputField_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InputField_methods[]= {
    { "draw", _wrap_InputField_draw},
    { "update", _wrap_InputField_update},
    { "setState", _wrap_InputField_setState},
    { "getStaticName", _wrap_InputField_getStaticName},
    { "setLabel", _wrap_InputField_setLabel},
    { "getType", _wrap_InputField_getType},
    { "setType", _wrap_InputField_setType},
    { "isMultiline", _wrap_InputField_isMultiline},
    { "setMultiline", _wrap_InputField_setMultiline},
    {0,0}
};
static swig_lua_method swig_InputField_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InputField_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InputField_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InputField_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InputField_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InputField_Sf_SwigStatic = {
    "InputField",
    swig_InputField_Sf_SwigStatic_methods,
    swig_InputField_Sf_SwigStatic_attributes,
    swig_InputField_Sf_SwigStatic_constants,
    swig_InputField_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InputField_bases[] = {0,0};
static const char *swig_InputField_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_InputField = { "InputField", "InputField", &SWIGTYPE_p_Neo2D__Gui__InputField,_proxy__wrap_new_InputField, swig_delete_InputField, swig_InputField_methods, swig_InputField_attributes, &swig_InputField_Sf_SwigStatic, swig_InputField_meta, swig_InputField_bases, swig_InputField_base_names };

static int _wrap_new_ThemedButton(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::ThemedButton *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ThemedButton::ThemedButton",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::ThemedButton",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::ThemedButton",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::ThemedButton",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::ThemedButton",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::ThemedButton",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::ThemedButton *)new Neo2D::Gui::ThemedButton(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__ThemedButton,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThemedButton_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ThemedButton *arg1 = (Neo2D::Gui::ThemedButton *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::ThemedButton::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::draw",1,"Neo2D::Gui::ThemedButton *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ThemedButton,0))){
    SWIG_fail_ptr("ThemedButton_draw",1,SWIGTYPE_p_Neo2D__Gui__ThemedButton);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("ThemedButton_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThemedButton_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ThemedButton *arg1 = (Neo2D::Gui::ThemedButton *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ThemedButton::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ThemedButton::update",1,"Neo2D::Gui::ThemedButton *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ThemedButton,0))){
    SWIG_fail_ptr("ThemedButton_update",1,SWIGTYPE_p_Neo2D__Gui__ThemedButton);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ThemedButton(void *obj) {
Neo2D::Gui::ThemedButton *arg1 = (Neo2D::Gui::ThemedButton *) obj;
delete arg1;
}
static int _proxy__wrap_new_ThemedButton(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ThemedButton);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ThemedButton_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ThemedButton_methods[]= {
    { "draw", _wrap_ThemedButton_draw},
    { "update", _wrap_ThemedButton_update},
    {0,0}
};
static swig_lua_method swig_ThemedButton_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ThemedButton_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ThemedButton_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ThemedButton_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ThemedButton_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ThemedButton_Sf_SwigStatic = {
    "ThemedButton",
    swig_ThemedButton_Sf_SwigStatic_methods,
    swig_ThemedButton_Sf_SwigStatic_attributes,
    swig_ThemedButton_Sf_SwigStatic_constants,
    swig_ThemedButton_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ThemedButton_bases[] = {0,0};
static const char *swig_ThemedButton_base_names[] = {"Neo2D::Gui::Button *",0};
static swig_lua_class _wrap_class_ThemedButton = { "ThemedButton", "ThemedButton", &SWIGTYPE_p_Neo2D__Gui__ThemedButton,_proxy__wrap_new_ThemedButton, swig_delete_ThemedButton, swig_ThemedButton_methods, swig_ThemedButton_attributes, &swig_ThemedButton_Sf_SwigStatic, swig_ThemedButton_meta, swig_ThemedButton_bases, swig_ThemedButton_base_names };

static int _wrap_new_ThemedInputField(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::ThemedInputField *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ThemedInputField::ThemedInputField",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::ThemedInputField::ThemedInputField",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::ThemedInputField::ThemedInputField",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::ThemedInputField::ThemedInputField",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::ThemedInputField::ThemedInputField",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::ThemedInputField::ThemedInputField",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::ThemedInputField *)new Neo2D::Gui::ThemedInputField(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__ThemedInputField,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThemedInputField_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ThemedInputField *arg1 = (Neo2D::Gui::ThemedInputField *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::ThemedInputField::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ThemedInputField::draw",1,"Neo2D::Gui::ThemedInputField *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::ThemedInputField::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ThemedInputField,0))){
    SWIG_fail_ptr("ThemedInputField_draw",1,SWIGTYPE_p_Neo2D__Gui__ThemedInputField);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("ThemedInputField_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ThemedInputField(void *obj) {
Neo2D::Gui::ThemedInputField *arg1 = (Neo2D::Gui::ThemedInputField *) obj;
delete arg1;
}
static int _proxy__wrap_new_ThemedInputField(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ThemedInputField);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ThemedInputField_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ThemedInputField_methods[]= {
    { "draw", _wrap_ThemedInputField_draw},
    {0,0}
};
static swig_lua_method swig_ThemedInputField_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ThemedInputField_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ThemedInputField_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ThemedInputField_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ThemedInputField_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ThemedInputField_Sf_SwigStatic = {
    "ThemedInputField",
    swig_ThemedInputField_Sf_SwigStatic_methods,
    swig_ThemedInputField_Sf_SwigStatic_attributes,
    swig_ThemedInputField_Sf_SwigStatic_constants,
    swig_ThemedInputField_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ThemedInputField_bases[] = {0,0};
static const char *swig_ThemedInputField_base_names[] = {"Neo2D::Gui::InputField *",0};
static swig_lua_class _wrap_class_ThemedInputField = { "ThemedInputField", "ThemedInputField", &SWIGTYPE_p_Neo2D__Gui__ThemedInputField,_proxy__wrap_new_ThemedInputField, swig_delete_ThemedInputField, swig_ThemedInputField_methods, swig_ThemedInputField_attributes, &swig_ThemedInputField_Sf_SwigStatic, swig_ThemedInputField_meta, swig_ThemedInputField_bases, swig_ThemedInputField_base_names };

static int _wrap_new_Menu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::Menu *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Menu::Menu",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::Menu::Menu",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Menu::Menu",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::Menu::Menu",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::Menu::Menu",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::Menu::Menu",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::Menu *)new Neo2D::Gui::Menu(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Menu,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Menu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Neo2D::Gui::Menu *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Menu::Menu",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::Menu::Menu",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Menu::Menu",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo2D::Gui::Menu *)new Neo2D::Gui::Menu(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Menu,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Menu(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Menu__SWIG_1(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Menu__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Menu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::Menu::Menu(unsigned int,unsigned int,unsigned int,unsigned int,char const *)\n"
    "    Neo2D::Gui::Menu::Menu(unsigned int,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_Menu_show(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Menu *arg1 = (Neo2D::Gui::Menu *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Menu::show",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Menu::show",1,"Neo2D::Gui::Menu *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Menu,0))){
    SWIG_fail_ptr("Menu_show",1,SWIGTYPE_p_Neo2D__Gui__Menu);
  }
  
  (arg1)->show();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_getEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Menu *arg1 = (Neo2D::Gui::Menu *) 0 ;
  unsigned int arg2 ;
  Neo2D::Gui::Button *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Menu::getEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Menu::getEntry",1,"Neo2D::Gui::Menu *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Menu::getEntry",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Menu,0))){
    SWIG_fail_ptr("Menu_getEntry",1,SWIGTYPE_p_Neo2D__Gui__Menu);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo2D::Gui::Button *)(arg1)->getEntry(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Button,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_addEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Menu *arg1 = (Neo2D::Gui::Menu *) 0 ;
  SwigValueWrapper< Neo2D::Gui::Button > arg2 ;
  Neo2D::Gui::Button *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Menu::addEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Menu::addEntry",1,"Neo2D::Gui::Menu *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Menu::addEntry",2,"Neo2D::Gui::Button");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Menu,0))){
    SWIG_fail_ptr("Menu_addEntry",1,SWIGTYPE_p_Neo2D__Gui__Menu);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("Menu_addEntry",2,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  arg2 = *argp2;
  
  (arg1)->addEntry(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Menu *arg1 = (Neo2D::Gui::Menu *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Menu::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Menu::draw",1,"Neo2D::Gui::Menu *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Menu::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Menu,0))){
    SWIG_fail_ptr("Menu_draw",1,SWIGTYPE_p_Neo2D__Gui__Menu);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Menu_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Menu_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Menu *arg1 = (Neo2D::Gui::Menu *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Menu::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Menu::update",1,"Neo2D::Gui::Menu *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Menu,0))){
    SWIG_fail_ptr("Menu_update",1,SWIGTYPE_p_Neo2D__Gui__Menu);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Menu(void *obj) {
Neo2D::Gui::Menu *arg1 = (Neo2D::Gui::Menu *) obj;
delete arg1;
}
static int _proxy__wrap_new_Menu(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Menu);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Menu_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Menu_methods[]= {
    { "show", _wrap_Menu_show},
    { "getEntry", _wrap_Menu_getEntry},
    { "addEntry", _wrap_Menu_addEntry},
    { "draw", _wrap_Menu_draw},
    { "update", _wrap_Menu_update},
    {0,0}
};
static swig_lua_method swig_Menu_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Menu_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Menu_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Menu_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Menu_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Menu_Sf_SwigStatic = {
    "Menu",
    swig_Menu_Sf_SwigStatic_methods,
    swig_Menu_Sf_SwigStatic_attributes,
    swig_Menu_Sf_SwigStatic_constants,
    swig_Menu_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Menu_bases[] = {0,0};
static const char *swig_Menu_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_Menu = { "Menu", "Menu", &SWIGTYPE_p_Neo2D__Gui__Menu,_proxy__wrap_new_Menu, swig_delete_Menu, swig_Menu_methods, swig_Menu_attributes, &swig_Menu_Sf_SwigStatic, swig_Menu_meta, swig_Menu_bases, swig_Menu_base_names };

static int _wrap_MENU_LINE_HEIGHT_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("Neo2D::Gui::MENU_LINE_HEIGHT",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::MENU_LINE_HEIGHT",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  Neo2D::Gui::MENU_LINE_HEIGHT = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MENU_LINE_HEIGHT_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("Neo2D::Gui::MENU_LINE_HEIGHT",0,0)
  result = (int)Neo2D::Gui::MENU_LINE_HEIGHT;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MenuBar(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  Neo2D::Gui::MenuBar *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::MenuBar::MenuBar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::MenuBar::MenuBar",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (Neo2D::Gui::MenuBar *)new Neo2D::Gui::MenuBar(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__MenuBar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuBar_getEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::MenuBar *arg1 = (Neo2D::Gui::MenuBar *) 0 ;
  unsigned int arg2 ;
  Neo2D::Gui::Menu *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::MenuBar::getEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::MenuBar::getEntry",1,"Neo2D::Gui::MenuBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::MenuBar::getEntry",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__MenuBar,0))){
    SWIG_fail_ptr("MenuBar_getEntry",1,SWIGTYPE_p_Neo2D__Gui__MenuBar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo2D::Gui::Menu *)(arg1)->getEntry(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Menu,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuBar_addEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::MenuBar *arg1 = (Neo2D::Gui::MenuBar *) 0 ;
  Neo2D::Gui::Menu *arg2 = (Neo2D::Gui::Menu *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::MenuBar::addEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::MenuBar::addEntry",1,"Neo2D::Gui::MenuBar *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::MenuBar::addEntry",2,"Neo2D::Gui::Menu *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__MenuBar,0))){
    SWIG_fail_ptr("MenuBar_addEntry",1,SWIGTYPE_p_Neo2D__Gui__MenuBar);
  }
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Gui__Menu,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MenuBar_addEntry",2,SWIGTYPE_p_Neo2D__Gui__Menu);
  }
  
  (arg1)->addEntry(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuBar_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::MenuBar *arg1 = (Neo2D::Gui::MenuBar *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::MenuBar::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::MenuBar::draw",1,"Neo2D::Gui::MenuBar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::MenuBar::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__MenuBar,0))){
    SWIG_fail_ptr("MenuBar_draw",1,SWIGTYPE_p_Neo2D__Gui__MenuBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("MenuBar_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuBar_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::MenuBar *arg1 = (Neo2D::Gui::MenuBar *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::MenuBar::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::MenuBar::update",1,"Neo2D::Gui::MenuBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__MenuBar,0))){
    SWIG_fail_ptr("MenuBar_update",1,SWIGTYPE_p_Neo2D__Gui__MenuBar);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MenuBar_isMouseOver(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::MenuBar *arg1 = (Neo2D::Gui::MenuBar *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::MenuBar::isMouseOver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::MenuBar::isMouseOver",1,"Neo2D::Gui::MenuBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__MenuBar,0))){
    SWIG_fail_ptr("MenuBar_isMouseOver",1,SWIGTYPE_p_Neo2D__Gui__MenuBar);
  }
  
  result = (bool)(arg1)->isMouseOver();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MenuBar(void *obj) {
Neo2D::Gui::MenuBar *arg1 = (Neo2D::Gui::MenuBar *) obj;
delete arg1;
}
static int _proxy__wrap_new_MenuBar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MenuBar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MenuBar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MenuBar_methods[]= {
    { "getEntry", _wrap_MenuBar_getEntry},
    { "addEntry", _wrap_MenuBar_addEntry},
    { "draw", _wrap_MenuBar_draw},
    { "update", _wrap_MenuBar_update},
    { "isMouseOver", _wrap_MenuBar_isMouseOver},
    {0,0}
};
static swig_lua_method swig_MenuBar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MenuBar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MenuBar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MenuBar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MenuBar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MenuBar_Sf_SwigStatic = {
    "MenuBar",
    swig_MenuBar_Sf_SwigStatic_methods,
    swig_MenuBar_Sf_SwigStatic_attributes,
    swig_MenuBar_Sf_SwigStatic_constants,
    swig_MenuBar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MenuBar_bases[] = {0,0};
static const char *swig_MenuBar_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_MenuBar = { "MenuBar", "MenuBar", &SWIGTYPE_p_Neo2D__Gui__MenuBar,_proxy__wrap_new_MenuBar, swig_delete_MenuBar, swig_MenuBar_methods, swig_MenuBar_attributes, &swig_MenuBar_Sf_SwigStatic, swig_MenuBar_meta, swig_MenuBar_bases, swig_MenuBar_base_names };

static int _wrap_new_List(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::List *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::List",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::List::List",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::List::List",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::List::List",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::List::List",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::List::List",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::List *)new Neo2D::Gui::List(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__List,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_show(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::show",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::show",1,"Neo2D::Gui::List *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_show",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  (arg1)->show();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_getEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  unsigned int arg2 ;
  Neo2D::Gui::Button *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::getEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::getEntry",1,"Neo2D::Gui::List *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::List::getEntry",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_getEntry",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Neo2D::Gui::Button *)(arg1)->getEntry(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Button,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_addEntry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  Neo2D::Gui::Button *arg2 = (Neo2D::Gui::Button *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::addEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::addEntry",1,"Neo2D::Gui::List *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::List::addEntry",2,"Neo2D::Gui::Button *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_addEntry",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Gui__Button,0))){
    SWIG_fail_ptr("List_addEntry",2,SWIGTYPE_p_Neo2D__Gui__Button);
  }
  
  (arg1)->addEntry(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_addEntry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::addEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::addEntry",1,"Neo2D::Gui::List *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Gui::List::addEntry",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_addEntry",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->addEntry((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_addEntry(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__List, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__Button, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_List_addEntry__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__List, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_List_addEntry__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'List_addEntry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::List::addEntry(Neo2D::Gui::Button *)\n"
    "    Neo2D::Gui::List::addEntry(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_List_setSelectedEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::setSelectedEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::setSelectedEntry",1,"Neo2D::Gui::List *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::List::setSelectedEntry",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_setSelectedEntry",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSelectedEntry(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_getSelectedEntry(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  int result;
  
  SWIG_check_num_args("Neo2D::Gui::List::getSelectedEntry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::getSelectedEntry",1,"Neo2D::Gui::List *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_getSelectedEntry",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  result = (int)(arg1)->getSelectedEntry();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::draw",1,"Neo2D::Gui::List *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::List::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_draw",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("List_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_List_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::List::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::List::update",1,"Neo2D::Gui::List *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__List,0))){
    SWIG_fail_ptr("List_update",1,SWIGTYPE_p_Neo2D__Gui__List);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_List(void *obj) {
Neo2D::Gui::List *arg1 = (Neo2D::Gui::List *) obj;
delete arg1;
}
static int _proxy__wrap_new_List(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_List);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_List_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_List_methods[]= {
    { "show", _wrap_List_show},
    { "getEntry", _wrap_List_getEntry},
    { "addEntry", _wrap_List_addEntry},
    { "setSelectedEntry", _wrap_List_setSelectedEntry},
    { "getSelectedEntry", _wrap_List_getSelectedEntry},
    { "draw", _wrap_List_draw},
    { "update", _wrap_List_update},
    {0,0}
};
static swig_lua_method swig_List_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_List_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_List_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_List_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_List_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_List_Sf_SwigStatic = {
    "List",
    swig_List_Sf_SwigStatic_methods,
    swig_List_Sf_SwigStatic_attributes,
    swig_List_Sf_SwigStatic_constants,
    swig_List_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_List_bases[] = {0,0};
static const char *swig_List_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_List = { "List", "List", &SWIGTYPE_p_Neo2D__Gui__List,_proxy__wrap_new_List, swig_delete_List, swig_List_methods, swig_List_attributes, &swig_List_Sf_SwigStatic, swig_List_meta, swig_List_bases, swig_List_base_names };

static int _wrap_TreeModel_getChild(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  int arg2 ;
  Neo2D::Gui::TreeNode< std::string > *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::getChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::getChild",1,"Neo2D::Gui::TreeNode< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::getChild",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeModel_getChild",1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Neo2D::Gui::TreeNode< std::string > *)(arg1)->getChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeModel_addChild(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  std::string arg2 ;
  Neo2D::Gui::TreeNode< std::string > *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::addChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::addChild",1,"Neo2D::Gui::TreeNode< std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::addChild",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeModel_addChild",1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (Neo2D::Gui::TreeNode< std::string > *)(arg1)->addChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeModel_getNumChildren(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::getNumChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::getNumChildren",1,"Neo2D::Gui::TreeNode< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeModel_getNumChildren",1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  result = (arg1)->getNumChildren();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeModel_clearChildren(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::clearChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::clearChildren",1,"Neo2D::Gui::TreeNode< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeModel_clearChildren",1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  (arg1)->clearChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeModel_getData(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::getData",1,"Neo2D::Gui::TreeNode< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeModel_getData",1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  result = (arg1)->getData();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeModel_setOpen(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::setOpen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::setOpen",1,"Neo2D::Gui::TreeNode< std::string > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::setOpen",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeModel_setOpen",1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setOpen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeModel_isOpen(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::isOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::isOpen",1,"Neo2D::Gui::TreeNode< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeModel_isOpen",1,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  result = (bool)(arg1)->isOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TreeModel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  Neo2D::Gui::TreeNode< std::string > *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::TreeNode",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeNode< std::string >::TreeNode",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = (Neo2D::Gui::TreeNode< std::string > *)new Neo2D::Gui::TreeNode< std::string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TreeModel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeNode< std::string > *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeNode< std::string >::TreeNode",0,0)
  result = (Neo2D::Gui::TreeNode< std::string > *)new Neo2D::Gui::TreeNode< std::string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TreeModel(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TreeModel__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TreeModel__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TreeModel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::TreeNode< std::string >::TreeNode(std::string)\n"
    "    Neo2D::Gui::TreeNode< std::string >::TreeNode()\n");
  lua_error(L);return 0;
}


static void swig_delete_TreeModel(void *obj) {
Neo2D::Gui::TreeNode< std::string > *arg1 = (Neo2D::Gui::TreeNode< std::string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_TreeModel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TreeModel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TreeModel_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TreeModel_methods[]= {
    { "getChild", _wrap_TreeModel_getChild},
    { "addChild", _wrap_TreeModel_addChild},
    { "getNumChildren", _wrap_TreeModel_getNumChildren},
    { "clearChildren", _wrap_TreeModel_clearChildren},
    { "getData", _wrap_TreeModel_getData},
    { "setOpen", _wrap_TreeModel_setOpen},
    { "isOpen", _wrap_TreeModel_isOpen},
    {0,0}
};
static swig_lua_method swig_TreeModel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TreeModel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TreeModel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TreeModel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TreeModel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TreeModel_Sf_SwigStatic = {
    "TreeModel",
    swig_TreeModel_Sf_SwigStatic_methods,
    swig_TreeModel_Sf_SwigStatic_attributes,
    swig_TreeModel_Sf_SwigStatic_constants,
    swig_TreeModel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TreeModel_bases[] = {0};
static const char *swig_TreeModel_base_names[] = {0};
static swig_lua_class _wrap_class_TreeModel = { "TreeModel", "TreeModel", &SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,_proxy__wrap_new_TreeModel, swig_delete_TreeModel, swig_TreeModel_methods, swig_TreeModel_attributes, &swig_TreeModel_Sf_SwigStatic, swig_TreeModel_meta, swig_TreeModel_bases, swig_TreeModel_base_names };

static int _wrap_new_TreeView(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  char *arg5 = (char *) 0 ;
  Neo2D::Gui::TreeView *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::TreeView",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::TreeView",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::TreeView",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::TreeView::TreeView",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::TreeView::TreeView",4,"unsigned int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Neo2D::Gui::TreeView::TreeView",5,"char const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (Neo2D::Gui::TreeView *)new Neo2D::Gui::TreeView(arg1,arg2,arg3,arg4,(char const *)arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__TreeView,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_getAutoSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  bool result;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::getAutoSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::getAutoSize",1,"Neo2D::Gui::TreeView *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_getAutoSize",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  result = (bool)(arg1)->getAutoSize();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_setAutoSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::setAutoSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::setAutoSize",1,"Neo2D::Gui::TreeView *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::setAutoSize",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_setAutoSize",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAutoSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_show(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::show",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::show",1,"Neo2D::Gui::TreeView *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_show",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  (arg1)->show();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_clear__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  Neo2D::Gui::TreeNode< std::string > *arg2 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::clear",1,"Neo2D::Gui::TreeView *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::clear",2,"Neo2D::Gui::TreeNode< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_clear",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeView_clear",2,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_clear__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::clear",1,"Neo2D::Gui::TreeView *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_clear",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_clear(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__TreeView, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TreeView_clear__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__TreeView, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TreeView_clear__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeView_clear'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::TreeView::clear(Neo2D::Gui::TreeNode< std::string > *)\n"
    "    Neo2D::Gui::TreeView::clear()\n");
  lua_error(L);return 0;
}


static int _wrap_TreeView_getTreeModel(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  Neo2D::Gui::TreeNode< std::string > *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::getTreeModel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::getTreeModel",1,"Neo2D::Gui::TreeView *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_getTreeModel",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  result = (Neo2D::Gui::TreeNode< std::string > *)(arg1)->getTreeModel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_getSelected(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::getSelected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::getSelected",1,"Neo2D::Gui::TreeView *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_getSelected",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  result = (char *)(arg1)->getSelected();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_selectEntry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::selectEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::selectEntry",1,"Neo2D::Gui::TreeView *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::selectEntry",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_selectEntry",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->selectEntry((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_selectEntry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  Neo2D::Gui::TreeNode< std::string > *arg2 = (Neo2D::Gui::TreeNode< std::string > *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::selectEntry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::selectEntry",1,"Neo2D::Gui::TreeView *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::selectEntry",2,"Neo2D::Gui::TreeNode< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_selectEntry",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0))){
    SWIG_fail_ptr("TreeView_selectEntry",2,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t);
  }
  
  (arg1)->selectEntry(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_selectEntry(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__TreeView, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TreeView_selectEntry__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__TreeView, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TreeView_selectEntry__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TreeView_selectEntry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::TreeView::selectEntry(char const *)\n"
    "    Neo2D::Gui::TreeView::selectEntry(Neo2D::Gui::TreeNode< std::string > *)\n");
  lua_error(L);return 0;
}


static int _wrap_TreeView_find(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo2D::Gui::TreeNode< std::string > *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::find",1,"Neo2D::Gui::TreeView *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::find",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_find",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (Neo2D::Gui::TreeNode< std::string > *)(arg1)->find((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__TreeNodeT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::draw",1,"Neo2D::Gui::TreeView *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_draw",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("TreeView_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::update",1,"Neo2D::Gui::TreeView *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_update",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeView_setSize(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::TreeView::setSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::TreeView::setSize",1,"Neo2D::Gui::TreeView *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::TreeView::setSize",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__TreeView,0))){
    SWIG_fail_ptr("TreeView_setSize",1,SWIGTYPE_p_Neo2D__Gui__TreeView);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("TreeView_setSize",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TreeView(void *obj) {
Neo2D::Gui::TreeView *arg1 = (Neo2D::Gui::TreeView *) obj;
delete arg1;
}
static int _proxy__wrap_new_TreeView(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TreeView);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TreeView_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TreeView_methods[]= {
    { "getAutoSize", _wrap_TreeView_getAutoSize},
    { "setAutoSize", _wrap_TreeView_setAutoSize},
    { "show", _wrap_TreeView_show},
    { "clear", _wrap_TreeView_clear},
    { "getTreeModel", _wrap_TreeView_getTreeModel},
    { "getSelected", _wrap_TreeView_getSelected},
    { "selectEntry", _wrap_TreeView_selectEntry},
    { "find", _wrap_TreeView_find},
    { "draw", _wrap_TreeView_draw},
    { "update", _wrap_TreeView_update},
    { "setSize", _wrap_TreeView_setSize},
    {0,0}
};
static swig_lua_method swig_TreeView_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TreeView_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TreeView_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TreeView_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TreeView_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TreeView_Sf_SwigStatic = {
    "TreeView",
    swig_TreeView_Sf_SwigStatic_methods,
    swig_TreeView_Sf_SwigStatic_attributes,
    swig_TreeView_Sf_SwigStatic_constants,
    swig_TreeView_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TreeView_bases[] = {0,0};
static const char *swig_TreeView_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_TreeView = { "TreeView", "TreeView", &SWIGTYPE_p_Neo2D__Gui__TreeView,_proxy__wrap_new_TreeView, swig_delete_TreeView, swig_TreeView_methods, swig_TreeView_attributes, &swig_TreeView_Sf_SwigStatic, swig_TreeView_meta, swig_TreeView_bases, swig_TreeView_base_names };

static int _wrap_new_Slider(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  float arg6 ;
  Neo2D::Gui::SLIDER_DIRECTION arg7 ;
  Neo2D::Gui::Slider *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Slider::Slider",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::Slider::Slider",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Slider::Slider",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::Slider::Slider",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::Slider::Slider",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo2D::Gui::Slider::Slider",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo2D::Gui::Slider::Slider",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo2D::Gui::Slider::Slider",7,"Neo2D::Gui::SLIDER_DIRECTION");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (Neo2D::Gui::SLIDER_DIRECTION)(int)lua_tonumber(L, 7);
  result = (Neo2D::Gui::Slider *)new Neo2D::Gui::Slider(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__Slider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getRange(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Slider *arg1 = (Neo2D::Gui::Slider *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Gui::Slider::getRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Slider::getRange",1,"Neo2D::Gui::Slider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Slider,0))){
    SWIG_fail_ptr("Slider_getRange",1,SWIGTYPE_p_Neo2D__Gui__Slider);
  }
  
  result = (arg1)->getRange();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setRange(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Slider *arg1 = (Neo2D::Gui::Slider *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Slider::setRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Slider::setRange",1,"Neo2D::Gui::Slider *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Slider::setRange",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Slider,0))){
    SWIG_fail_ptr("Slider_setRange",1,SWIGTYPE_p_Neo2D__Gui__Slider);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Slider_setRange",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_setValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Slider *arg1 = (Neo2D::Gui::Slider *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Slider::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Slider::setValue",1,"Neo2D::Gui::Slider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::Slider::setValue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Slider,0))){
    SWIG_fail_ptr("Slider_setValue",1,SWIGTYPE_p_Neo2D__Gui__Slider);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_getValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Slider *arg1 = (Neo2D::Gui::Slider *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo2D::Gui::Slider::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Slider::getValue",1,"Neo2D::Gui::Slider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Slider,0))){
    SWIG_fail_ptr("Slider_getValue",1,SWIGTYPE_p_Neo2D__Gui__Slider);
  }
  
  result = (float)(arg1)->getValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Slider *arg1 = (Neo2D::Gui::Slider *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::Slider::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Slider::draw",1,"Neo2D::Gui::Slider *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::Slider::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Slider,0))){
    SWIG_fail_ptr("Slider_draw",1,SWIGTYPE_p_Neo2D__Gui__Slider);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("Slider_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slider_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::Slider *arg1 = (Neo2D::Gui::Slider *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::Slider::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::Slider::update",1,"Neo2D::Gui::Slider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__Slider,0))){
    SWIG_fail_ptr("Slider_update",1,SWIGTYPE_p_Neo2D__Gui__Slider);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Slider(void *obj) {
Neo2D::Gui::Slider *arg1 = (Neo2D::Gui::Slider *) obj;
delete arg1;
}
static int _proxy__wrap_new_Slider(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Slider);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Slider_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Slider_methods[]= {
    { "getRange", _wrap_Slider_getRange},
    { "setRange", _wrap_Slider_setRange},
    { "setValue", _wrap_Slider_setValue},
    { "getValue", _wrap_Slider_getValue},
    { "draw", _wrap_Slider_draw},
    { "update", _wrap_Slider_update},
    {0,0}
};
static swig_lua_method swig_Slider_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Slider_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Slider_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Slider_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Slider_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Slider_Sf_SwigStatic = {
    "Slider",
    swig_Slider_Sf_SwigStatic_methods,
    swig_Slider_Sf_SwigStatic_attributes,
    swig_Slider_Sf_SwigStatic_constants,
    swig_Slider_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Slider_bases[] = {0,0};
static const char *swig_Slider_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_Slider = { "Slider", "Slider", &SWIGTYPE_p_Neo2D__Gui__Slider,_proxy__wrap_new_Slider, swig_delete_Slider, swig_Slider_methods, swig_Slider_attributes, &swig_Slider_Sf_SwigStatic, swig_Slider_meta, swig_Slider_bases, swig_Slider_base_names };

static int _wrap_new_ScrollBar(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  float arg6 ;
  Neo2D::Gui::SLIDER_DIRECTION arg7 ;
  Neo2D::Gui::ScrollBar *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollBar::ScrollBar",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::ScrollBar",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::ScrollBar",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::ScrollBar",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::ScrollBar",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::ScrollBar",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::ScrollBar",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::ScrollBar",7,"Neo2D::Gui::SLIDER_DIRECTION");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (Neo2D::Gui::SLIDER_DIRECTION)(int)lua_tonumber(L, 7);
  result = (Neo2D::Gui::ScrollBar *)new Neo2D::Gui::ScrollBar(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__ScrollBar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollBar_getRange(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollBar *arg1 = (Neo2D::Gui::ScrollBar *) 0 ;
  Neo::Vector2 result;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollBar::getRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::getRange",1,"Neo2D::Gui::ScrollBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollBar,0))){
    SWIG_fail_ptr("ScrollBar_getRange",1,SWIGTYPE_p_Neo2D__Gui__ScrollBar);
  }
  
  result = (arg1)->getRange();
  {
    Neo::Vector2 * resultptr = new Neo::Vector2((const Neo::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollBar_setRange(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollBar *arg1 = (Neo2D::Gui::ScrollBar *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollBar::setRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::setRange",1,"Neo2D::Gui::ScrollBar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::setRange",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollBar,0))){
    SWIG_fail_ptr("ScrollBar_setRange",1,SWIGTYPE_p_Neo2D__Gui__ScrollBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("ScrollBar_setRange",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->setRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollBar_setValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollBar *arg1 = (Neo2D::Gui::ScrollBar *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollBar::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::setValue",1,"Neo2D::Gui::ScrollBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::setValue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollBar,0))){
    SWIG_fail_ptr("ScrollBar_setValue",1,SWIGTYPE_p_Neo2D__Gui__ScrollBar);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollBar_getValue(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollBar *arg1 = (Neo2D::Gui::ScrollBar *) 0 ;
  float result;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollBar::getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::getValue",1,"Neo2D::Gui::ScrollBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollBar,0))){
    SWIG_fail_ptr("ScrollBar_getValue",1,SWIGTYPE_p_Neo2D__Gui__ScrollBar);
  }
  
  result = (float)(arg1)->getValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollBar_draw(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollBar *arg1 = (Neo2D::Gui::ScrollBar *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollBar::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::draw",1,"Neo2D::Gui::ScrollBar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollBar,0))){
    SWIG_fail_ptr("ScrollBar_draw",1,SWIGTYPE_p_Neo2D__Gui__ScrollBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("ScrollBar_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollBar_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollBar *arg1 = (Neo2D::Gui::ScrollBar *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollBar::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollBar::update",1,"Neo2D::Gui::ScrollBar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollBar,0))){
    SWIG_fail_ptr("ScrollBar_update",1,SWIGTYPE_p_Neo2D__Gui__ScrollBar);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScrollBar(void *obj) {
Neo2D::Gui::ScrollBar *arg1 = (Neo2D::Gui::ScrollBar *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScrollBar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScrollBar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScrollBar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScrollBar_methods[]= {
    { "getRange", _wrap_ScrollBar_getRange},
    { "setRange", _wrap_ScrollBar_setRange},
    { "setValue", _wrap_ScrollBar_setValue},
    { "getValue", _wrap_ScrollBar_getValue},
    { "draw", _wrap_ScrollBar_draw},
    { "update", _wrap_ScrollBar_update},
    {0,0}
};
static swig_lua_method swig_ScrollBar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScrollBar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScrollBar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScrollBar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScrollBar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScrollBar_Sf_SwigStatic = {
    "ScrollBar",
    swig_ScrollBar_Sf_SwigStatic_methods,
    swig_ScrollBar_Sf_SwigStatic_attributes,
    swig_ScrollBar_Sf_SwigStatic_constants,
    swig_ScrollBar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScrollBar_bases[] = {0,0};
static const char *swig_ScrollBar_base_names[] = {"Neo2D::Widget *",0};
static swig_lua_class _wrap_class_ScrollBar = { "ScrollBar", "ScrollBar", &SWIGTYPE_p_Neo2D__Gui__ScrollBar,_proxy__wrap_new_ScrollBar, swig_delete_ScrollBar, swig_ScrollBar_methods, swig_ScrollBar_attributes, &swig_ScrollBar_Sf_SwigStatic, swig_ScrollBar_meta, swig_ScrollBar_bases, swig_ScrollBar_base_names };

static int _wrap_new_ScrollPane(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo2D::Gui::ScrollPane *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollPane::ScrollPane",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::ScrollPane",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::ScrollPane",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::ScrollPane",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::ScrollPane",4,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Neo2D::Gui::ScrollPane *)new Neo2D::Gui::ScrollPane(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__ScrollPane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPane_draw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollPane *arg1 = (Neo2D::Gui::ScrollPane *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollPane::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::draw",1,"Neo2D::Gui::ScrollPane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollPane,0))){
    SWIG_fail_ptr("ScrollPane_draw",1,SWIGTYPE_p_Neo2D__Gui__ScrollPane);
  }
  
  (arg1)->draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPane_draw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollPane *arg1 = (Neo2D::Gui::ScrollPane *) 0 ;
  Neo::Vector2 arg2 ;
  Neo::Vector2 *argp2 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollPane::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::draw",1,"Neo2D::Gui::ScrollPane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::draw",2,"Neo::Vector2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollPane,0))){
    SWIG_fail_ptr("ScrollPane_draw",1,SWIGTYPE_p_Neo2D__Gui__ScrollPane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector2,0))){
    SWIG_fail_ptr("ScrollPane_draw",2,SWIGTYPE_p_Neo__Vector2);
  }
  arg2 = *argp2;
  
  (arg1)->draw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScrollPane_draw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__ScrollPane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ScrollPane_draw__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Neo2D__Gui__ScrollPane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Neo__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ScrollPane_draw__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ScrollPane_draw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Neo2D::Gui::ScrollPane::draw()\n"
    "    Neo2D::Gui::ScrollPane::draw(Neo::Vector2)\n");
  lua_error(L);return 0;
}


static int _wrap_ScrollPane_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScrollPane *arg1 = (Neo2D::Gui::ScrollPane *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScrollPane::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScrollPane::update",1,"Neo2D::Gui::ScrollPane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScrollPane,0))){
    SWIG_fail_ptr("ScrollPane_update",1,SWIGTYPE_p_Neo2D__Gui__ScrollPane);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScrollPane(void *obj) {
Neo2D::Gui::ScrollPane *arg1 = (Neo2D::Gui::ScrollPane *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScrollPane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScrollPane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScrollPane_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScrollPane_methods[]= {
    { "draw", _wrap_ScrollPane_draw},
    { "update", _wrap_ScrollPane_update},
    {0,0}
};
static swig_lua_method swig_ScrollPane_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScrollPane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScrollPane_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScrollPane_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScrollPane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScrollPane_Sf_SwigStatic = {
    "ScrollPane",
    swig_ScrollPane_Sf_SwigStatic_methods,
    swig_ScrollPane_Sf_SwigStatic_attributes,
    swig_ScrollPane_Sf_SwigStatic_constants,
    swig_ScrollPane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScrollPane_bases[] = {0,0};
static const char *swig_ScrollPane_base_names[] = {"Neo2D::Gui::Container *",0};
static swig_lua_class _wrap_class_ScrollPane = { "ScrollPane", "ScrollPane", &SWIGTYPE_p_Neo2D__Gui__ScrollPane,_proxy__wrap_new_ScrollPane, swig_delete_ScrollPane, swig_ScrollPane_methods, swig_ScrollPane_attributes, &swig_ScrollPane_Sf_SwigStatic, swig_ScrollPane_meta, swig_ScrollPane_bases, swig_ScrollPane_base_names };

static int _wrap_new_ScaleLayout(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Neo2D::Gui::ScaleLayout *result = 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScaleLayout::ScaleLayout",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Neo2D::Gui::ScaleLayout::ScaleLayout",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Neo2D::Gui::ScaleLayout::ScaleLayout",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Neo2D::Gui::ScaleLayout::ScaleLayout",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Neo2D::Gui::ScaleLayout::ScaleLayout",4,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Neo2D::Gui::ScaleLayout *)new Neo2D::Gui::ScaleLayout(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo2D__Gui__ScaleLayout,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaleLayout_update(lua_State* L) {
  int SWIG_arg = 0;
  Neo2D::Gui::ScaleLayout *arg1 = (Neo2D::Gui::ScaleLayout *) 0 ;
  
  SWIG_check_num_args("Neo2D::Gui::ScaleLayout::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Neo2D::Gui::ScaleLayout::update",1,"Neo2D::Gui::ScaleLayout *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo2D__Gui__ScaleLayout,0))){
    SWIG_fail_ptr("ScaleLayout_update",1,SWIGTYPE_p_Neo2D__Gui__ScaleLayout);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScaleLayout(void *obj) {
Neo2D::Gui::ScaleLayout *arg1 = (Neo2D::Gui::ScaleLayout *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScaleLayout(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScaleLayout);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScaleLayout_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScaleLayout_methods[]= {
    { "update", _wrap_ScaleLayout_update},
    {0,0}
};
static swig_lua_method swig_ScaleLayout_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScaleLayout_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScaleLayout_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScaleLayout_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScaleLayout_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScaleLayout_Sf_SwigStatic = {
    "ScaleLayout",
    swig_ScaleLayout_Sf_SwigStatic_methods,
    swig_ScaleLayout_Sf_SwigStatic_attributes,
    swig_ScaleLayout_Sf_SwigStatic_constants,
    swig_ScaleLayout_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScaleLayout_bases[] = {0,0};
static const char *swig_ScaleLayout_base_names[] = {"Neo2D::Gui::Container *",0};
static swig_lua_class _wrap_class_ScaleLayout = { "ScaleLayout", "ScaleLayout", &SWIGTYPE_p_Neo2D__Gui__ScaleLayout,_proxy__wrap_new_ScaleLayout, swig_delete_ScaleLayout, swig_ScaleLayout_methods, swig_ScaleLayout_attributes, &swig_ScaleLayout_Sf_SwigStatic, swig_ScaleLayout_meta, swig_ScaleLayout_bases, swig_ScaleLayout_base_names };

static int _wrap_new_intp(lua_State* L) {
  int SWIG_arg = 0;
  intp *result = 0 ;
  
  SWIG_check_num_args("intp::intp",0,0)
  result = (intp *)new_intp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_intp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intp_assign(lua_State* L) {
  int SWIG_arg = 0;
  intp *arg1 = (intp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("intp::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intp::assign",1,"intp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("intp::assign",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_intp,0))){
    SWIG_fail_ptr("intp_assign",1,SWIGTYPE_p_intp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  intp_assign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intp_value(lua_State* L) {
  int SWIG_arg = 0;
  intp *arg1 = (intp *) 0 ;
  int result;
  
  SWIG_check_num_args("intp::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intp::value",1,"intp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_intp,0))){
    SWIG_fail_ptr("intp_value",1,SWIGTYPE_p_intp);
  }
  
  result = (int)intp_value(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intp_cast(lua_State* L) {
  int SWIG_arg = 0;
  intp *arg1 = (intp *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("intp::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intp::cast",1,"intp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_intp,0))){
    SWIG_fail_ptr("intp_cast",1,SWIGTYPE_p_intp);
  }
  
  result = (int *)intp_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intp_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  intp *result = 0 ;
  
  SWIG_check_num_args("intp::intp_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intp::intp_frompointer",1,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("intp_frompointer",1,SWIGTYPE_p_int);
  }
  
  result = (intp *)intp_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_intp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_intp(void *obj) {
intp *arg1 = (intp *) obj;
delete_intp(arg1);
}
static int _proxy__wrap_new_intp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_intp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_intp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_intp_methods[]= {
    { "assign", _wrap_intp_assign},
    { "value", _wrap_intp_value},
    { "cast", _wrap_intp_cast},
    {0,0}
};
static swig_lua_method swig_intp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_intp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_intp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_intp_SwigStatic_methods[]= {
    { "frompointer", _wrap_intp_frompointer},
    {0,0}
};
static swig_lua_class* swig_intp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_intp_SwigStatic = {
    "intp",
    swig_intp_SwigStatic_methods,
    swig_intp_SwigStatic_attributes,
    swig_intp_SwigStatic_constants,
    swig_intp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_intp_bases[] = {0};
static const char *swig_intp_base_names[] = {0};
static swig_lua_class _wrap_class_intp = { "intp", "intp", &SWIGTYPE_p_intp,_proxy__wrap_new_intp, swig_delete_intp, swig_intp_methods, swig_intp_attributes, &swig_intp_SwigStatic, swig_intp_meta, swig_intp_bases, swig_intp_base_names };

static int _wrap_new_uintp(lua_State* L) {
  int SWIG_arg = 0;
  uintp *result = 0 ;
  
  SWIG_check_num_args("uintp::uintp",0,0)
  result = (uintp *)new_uintp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uintp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uintp_assign(lua_State* L) {
  int SWIG_arg = 0;
  uintp *arg1 = (uintp *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("uintp::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uintp::assign",1,"uintp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("uintp::assign",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uintp,0))){
    SWIG_fail_ptr("uintp_assign",1,SWIGTYPE_p_uintp);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  uintp_assign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uintp_value(lua_State* L) {
  int SWIG_arg = 0;
  uintp *arg1 = (uintp *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("uintp::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uintp::value",1,"uintp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uintp,0))){
    SWIG_fail_ptr("uintp_value",1,SWIGTYPE_p_uintp);
  }
  
  result = (unsigned int)uintp_value(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uintp_cast(lua_State* L) {
  int SWIG_arg = 0;
  uintp *arg1 = (uintp *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("uintp::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uintp::cast",1,"uintp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uintp,0))){
    SWIG_fail_ptr("uintp_cast",1,SWIGTYPE_p_uintp);
  }
  
  result = (unsigned int *)uintp_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uintp_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int *arg1 = (unsigned int *) 0 ;
  uintp *result = 0 ;
  
  SWIG_check_num_args("uintp::uintp_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("uintp::uintp_frompointer",1,"unsigned int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("uintp_frompointer",1,SWIGTYPE_p_unsigned_int);
  }
  
  result = (uintp *)uintp_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_uintp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uintp(void *obj) {
uintp *arg1 = (uintp *) obj;
delete_uintp(arg1);
}
static int _proxy__wrap_new_uintp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uintp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uintp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uintp_methods[]= {
    { "assign", _wrap_uintp_assign},
    { "value", _wrap_uintp_value},
    { "cast", _wrap_uintp_cast},
    {0,0}
};
static swig_lua_method swig_uintp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uintp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uintp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uintp_SwigStatic_methods[]= {
    { "frompointer", _wrap_uintp_frompointer},
    {0,0}
};
static swig_lua_class* swig_uintp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uintp_SwigStatic = {
    "uintp",
    swig_uintp_SwigStatic_methods,
    swig_uintp_SwigStatic_attributes,
    swig_uintp_SwigStatic_constants,
    swig_uintp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uintp_bases[] = {0};
static const char *swig_uintp_base_names[] = {0};
static swig_lua_class _wrap_class_uintp = { "uintp", "uintp", &SWIGTYPE_p_uintp,_proxy__wrap_new_uintp, swig_delete_uintp, swig_uintp_methods, swig_uintp_attributes, &swig_uintp_SwigStatic, swig_uintp_meta, swig_uintp_bases, swig_uintp_base_names };

static int _wrap_new_floatp(lua_State* L) {
  int SWIG_arg = 0;
  floatp *result = 0 ;
  
  SWIG_check_num_args("floatp::floatp",0,0)
  result = (floatp *)new_floatp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_floatp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatp_assign(lua_State* L) {
  int SWIG_arg = 0;
  floatp *arg1 = (floatp *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("floatp::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatp::assign",1,"floatp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("floatp::assign",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_floatp,0))){
    SWIG_fail_ptr("floatp_assign",1,SWIGTYPE_p_floatp);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  floatp_assign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatp_value(lua_State* L) {
  int SWIG_arg = 0;
  floatp *arg1 = (floatp *) 0 ;
  float result;
  
  SWIG_check_num_args("floatp::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatp::value",1,"floatp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_floatp,0))){
    SWIG_fail_ptr("floatp_value",1,SWIGTYPE_p_floatp);
  }
  
  result = (float)floatp_value(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatp_cast(lua_State* L) {
  int SWIG_arg = 0;
  floatp *arg1 = (floatp *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("floatp::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatp::cast",1,"floatp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_floatp,0))){
    SWIG_fail_ptr("floatp_cast",1,SWIGTYPE_p_floatp);
  }
  
  result = (float *)floatp_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatp_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  floatp *result = 0 ;
  
  SWIG_check_num_args("floatp::floatp_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("floatp::floatp_frompointer",1,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("floatp_frompointer",1,SWIGTYPE_p_float);
  }
  
  result = (floatp *)floatp_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_floatp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_floatp(void *obj) {
floatp *arg1 = (floatp *) obj;
delete_floatp(arg1);
}
static int _proxy__wrap_new_floatp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_floatp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_floatp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_floatp_methods[]= {
    { "assign", _wrap_floatp_assign},
    { "value", _wrap_floatp_value},
    { "cast", _wrap_floatp_cast},
    {0,0}
};
static swig_lua_method swig_floatp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_floatp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_floatp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_floatp_SwigStatic_methods[]= {
    { "frompointer", _wrap_floatp_frompointer},
    {0,0}
};
static swig_lua_class* swig_floatp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_floatp_SwigStatic = {
    "floatp",
    swig_floatp_SwigStatic_methods,
    swig_floatp_SwigStatic_attributes,
    swig_floatp_SwigStatic_constants,
    swig_floatp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_floatp_bases[] = {0};
static const char *swig_floatp_base_names[] = {0};
static swig_lua_class _wrap_class_floatp = { "floatp", "floatp", &SWIGTYPE_p_floatp,_proxy__wrap_new_floatp, swig_delete_floatp, swig_floatp_methods, swig_floatp_attributes, &swig_floatp_SwigStatic, swig_floatp_meta, swig_floatp_bases, swig_floatp_base_names };

static int _wrap_new_doublep(lua_State* L) {
  int SWIG_arg = 0;
  doublep *result = 0 ;
  
  SWIG_check_num_args("doublep::doublep",0,0)
  result = (doublep *)new_doublep();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_doublep,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doublep_assign(lua_State* L) {
  int SWIG_arg = 0;
  doublep *arg1 = (doublep *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("doublep::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doublep::assign",1,"doublep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("doublep::assign",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_doublep,0))){
    SWIG_fail_ptr("doublep_assign",1,SWIGTYPE_p_doublep);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  doublep_assign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doublep_value(lua_State* L) {
  int SWIG_arg = 0;
  doublep *arg1 = (doublep *) 0 ;
  double result;
  
  SWIG_check_num_args("doublep::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doublep::value",1,"doublep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_doublep,0))){
    SWIG_fail_ptr("doublep_value",1,SWIGTYPE_p_doublep);
  }
  
  result = (double)doublep_value(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doublep_cast(lua_State* L) {
  int SWIG_arg = 0;
  doublep *arg1 = (doublep *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("doublep::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doublep::cast",1,"doublep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_doublep,0))){
    SWIG_fail_ptr("doublep_cast",1,SWIGTYPE_p_doublep);
  }
  
  result = (double *)doublep_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_doublep_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  doublep *result = 0 ;
  
  SWIG_check_num_args("doublep::doublep_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doublep::doublep_frompointer",1,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("doublep_frompointer",1,SWIGTYPE_p_double);
  }
  
  result = (doublep *)doublep_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_doublep,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_doublep(void *obj) {
doublep *arg1 = (doublep *) obj;
delete_doublep(arg1);
}
static int _proxy__wrap_new_doublep(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_doublep);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_doublep_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_doublep_methods[]= {
    { "assign", _wrap_doublep_assign},
    { "value", _wrap_doublep_value},
    { "cast", _wrap_doublep_cast},
    {0,0}
};
static swig_lua_method swig_doublep_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_doublep_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_doublep_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_doublep_SwigStatic_methods[]= {
    { "frompointer", _wrap_doublep_frompointer},
    {0,0}
};
static swig_lua_class* swig_doublep_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_doublep_SwigStatic = {
    "doublep",
    swig_doublep_SwigStatic_methods,
    swig_doublep_SwigStatic_attributes,
    swig_doublep_SwigStatic_constants,
    swig_doublep_SwigStatic_classes,
    0
};
static swig_lua_class *swig_doublep_bases[] = {0};
static const char *swig_doublep_base_names[] = {0};
static swig_lua_class _wrap_class_doublep = { "doublep", "doublep", &SWIGTYPE_p_doublep,_proxy__wrap_new_doublep, swig_delete_doublep, swig_doublep_methods, swig_doublep_attributes, &swig_doublep_SwigStatic, swig_doublep_meta, swig_doublep_bases, swig_doublep_base_names };

static int _wrap_Voidp2String(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  Neo::String *result = 0 ;
  
  SWIG_check_num_args("Voidp2String",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Voidp2String",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"Voidp2String");
  result = (Neo::String *)Voidp2String(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voidp2Float(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("Voidp2Float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Voidp2Float",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"Voidp2Float");
  result = (float *)Voidp2Float(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Stringp(lua_State* L) {
  int SWIG_arg = 0;
  Stringp *result = 0 ;
  
  SWIG_check_num_args("Stringp::Stringp",0,0)
  result = (Stringp *)new_Stringp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Stringp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stringp_assign(lua_State* L) {
  int SWIG_arg = 0;
  Stringp *arg1 = (Stringp *) 0 ;
  Neo::String arg2 ;
  Neo::String *argp2 ;
  
  SWIG_check_num_args("Stringp::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stringp::assign",1,"Stringp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Stringp::assign",2,"Neo::String");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Stringp,0))){
    SWIG_fail_ptr("Stringp_assign",1,SWIGTYPE_p_Stringp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("Stringp_assign",2,SWIGTYPE_p_Neo__String);
  }
  arg2 = *argp2;
  
  Stringp_assign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stringp_value(lua_State* L) {
  int SWIG_arg = 0;
  Stringp *arg1 = (Stringp *) 0 ;
  Neo::String result;
  
  SWIG_check_num_args("Stringp::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stringp::value",1,"Stringp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Stringp,0))){
    SWIG_fail_ptr("Stringp_value",1,SWIGTYPE_p_Stringp);
  }
  
  result = Stringp_value(arg1);
  {
    Neo::String * resultptr = new Neo::String((const Neo::String &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__String,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stringp_cast(lua_State* L) {
  int SWIG_arg = 0;
  Stringp *arg1 = (Stringp *) 0 ;
  Neo::String *result = 0 ;
  
  SWIG_check_num_args("Stringp::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stringp::cast",1,"Stringp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Stringp,0))){
    SWIG_fail_ptr("Stringp_cast",1,SWIGTYPE_p_Stringp);
  }
  
  result = (Neo::String *)Stringp_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__String,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Stringp_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::String *arg1 = (Neo::String *) 0 ;
  Stringp *result = 0 ;
  
  SWIG_check_num_args("Stringp::Stringp_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Stringp::Stringp_frompointer",1,"Neo::String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__String,0))){
    SWIG_fail_ptr("Stringp_frompointer",1,SWIGTYPE_p_Neo__String);
  }
  
  result = (Stringp *)Stringp_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Stringp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Stringp(void *obj) {
Stringp *arg1 = (Stringp *) obj;
delete_Stringp(arg1);
}
static int _proxy__wrap_new_Stringp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Stringp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Stringp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Stringp_methods[]= {
    { "assign", _wrap_Stringp_assign},
    { "value", _wrap_Stringp_value},
    { "cast", _wrap_Stringp_cast},
    {0,0}
};
static swig_lua_method swig_Stringp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Stringp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Stringp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Stringp_SwigStatic_methods[]= {
    { "frompointer", _wrap_Stringp_frompointer},
    {0,0}
};
static swig_lua_class* swig_Stringp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Stringp_SwigStatic = {
    "Stringp",
    swig_Stringp_SwigStatic_methods,
    swig_Stringp_SwigStatic_attributes,
    swig_Stringp_SwigStatic_constants,
    swig_Stringp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Stringp_bases[] = {0};
static const char *swig_Stringp_base_names[] = {0};
static swig_lua_class _wrap_class_Stringp = { "Stringp", "Stringp", &SWIGTYPE_p_Stringp,_proxy__wrap_new_Stringp, swig_delete_Stringp, swig_Stringp_methods, swig_Stringp_attributes, &swig_Stringp_SwigStatic, swig_Stringp_meta, swig_Stringp_bases, swig_Stringp_base_names };

static int _wrap_new_Vector3p(lua_State* L) {
  int SWIG_arg = 0;
  Vector3p *result = 0 ;
  
  SWIG_check_num_args("Vector3p::Vector3p",0,0)
  result = (Vector3p *)new_Vector3p();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vector3p,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3p_assign(lua_State* L) {
  int SWIG_arg = 0;
  Vector3p *arg1 = (Vector3p *) 0 ;
  Neo::Vector3 arg2 ;
  Neo::Vector3 *argp2 ;
  
  SWIG_check_num_args("Vector3p::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Vector3p::assign",1,"Vector3p *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Vector3p::assign",2,"Neo::Vector3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vector3p,0))){
    SWIG_fail_ptr("Vector3p_assign",1,SWIGTYPE_p_Vector3p);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3p_assign",2,SWIGTYPE_p_Neo__Vector3);
  }
  arg2 = *argp2;
  
  Vector3p_assign(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3p_value(lua_State* L) {
  int SWIG_arg = 0;
  Vector3p *arg1 = (Vector3p *) 0 ;
  Neo::Vector3 result;
  
  SWIG_check_num_args("Vector3p::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Vector3p::value",1,"Vector3p *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vector3p,0))){
    SWIG_fail_ptr("Vector3p_value",1,SWIGTYPE_p_Vector3p);
  }
  
  result = Vector3p_value(arg1);
  {
    Neo::Vector3 * resultptr = new Neo::Vector3((const Neo::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Neo__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3p_cast(lua_State* L) {
  int SWIG_arg = 0;
  Vector3p *arg1 = (Vector3p *) 0 ;
  Neo::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Vector3p::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Vector3p::cast",1,"Vector3p *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Vector3p,0))){
    SWIG_fail_ptr("Vector3p_cast",1,SWIGTYPE_p_Vector3p);
  }
  
  result = (Neo::Vector3 *)Vector3p_cast(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Neo__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3p_frompointer(lua_State* L) {
  int SWIG_arg = 0;
  Neo::Vector3 *arg1 = (Neo::Vector3 *) 0 ;
  Vector3p *result = 0 ;
  
  SWIG_check_num_args("Vector3p::Vector3p_frompointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Vector3p::Vector3p_frompointer",1,"Neo::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Neo__Vector3,0))){
    SWIG_fail_ptr("Vector3p_frompointer",1,SWIGTYPE_p_Neo__Vector3);
  }
  
  result = (Vector3p *)Vector3p_frompointer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vector3p,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3p(void *obj) {
Vector3p *arg1 = (Vector3p *) obj;
delete_Vector3p(arg1);
}
static int _proxy__wrap_new_Vector3p(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3p);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3p_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vector3p_methods[]= {
    { "assign", _wrap_Vector3p_assign},
    { "value", _wrap_Vector3p_value},
    { "cast", _wrap_Vector3p_cast},
    {0,0}
};
static swig_lua_method swig_Vector3p_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Vector3p_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3p_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3p_SwigStatic_methods[]= {
    { "frompointer", _wrap_Vector3p_frompointer},
    {0,0}
};
static swig_lua_class* swig_Vector3p_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3p_SwigStatic = {
    "Vector3p",
    swig_Vector3p_SwigStatic_methods,
    swig_Vector3p_SwigStatic_attributes,
    swig_Vector3p_SwigStatic_constants,
    swig_Vector3p_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3p_bases[] = {0};
static const char *swig_Vector3p_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3p = { "Vector3p", "Vector3p", &SWIGTYPE_p_Vector3p,_proxy__wrap_new_Vector3p, swig_delete_Vector3p, swig_Vector3p_methods, swig_Vector3p_attributes, &swig_Vector3p_SwigStatic, swig_Vector3p_meta, swig_Vector3p_bases, swig_Vector3p_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "MENU_LINE_HEIGHT", _wrap_MENU_LINE_HEIGHT_get, _wrap_MENU_LINE_HEIGHT_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_FLOAT("M_PI", 3.14159265358979323846)},
    {SWIG_LUA_CONSTTAB_FLOAT("DEG_TO_RAD", ((3.14159265358979323846*2)/360.0))},
    {SWIG_LUA_CONSTTAB_FLOAT("RAD_TO_DEG", (1.0/((3.14159265358979323846*2)/360.0)))},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_BEGIN", Neo::TOUCH_BEGIN)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_UPDATE", Neo::TOUCH_UPDATE)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_END", Neo::TOUCH_END)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_CANCELLED", Neo::TOUCH_CANCELLED)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH_NONE", Neo::TOUCH_NONE)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_NONE", Neo::BLENDING_NONE)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_ALPHA", Neo::BLENDING_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_ADD", Neo::BLENDING_ADD)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_SUB", Neo::BLENDING_SUB)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_LIGHT", Neo::BLENDING_LIGHT)},
    {SWIG_LUA_CONSTTAB_INT("BLENDING_PRODUCT", Neo::BLENDING_PRODUCT)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_NONE", Neo::DEPTH_NONE)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_ALWAYS", Neo::DEPTH_ALWAYS)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_LESS", Neo::DEPTH_LESS)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_GREATER", Neo::DEPTH_GREATER)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_EQUAL", Neo::DEPTH_EQUAL)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_LEQUAL", Neo::DEPTH_LEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_GEQUAL", Neo::DEPTH_GEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_NOTEQUAL", Neo::DEPTH_NOTEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("MATRIX_MODELVIEW", Neo::MATRIX_MODELVIEW)},
    {SWIG_LUA_CONSTTAB_INT("MATRIX_PROJECTION", Neo::MATRIX_PROJECTION)},
    {SWIG_LUA_CONSTTAB_INT("MATRIX_TEXTURE", Neo::MATRIX_TEXTURE)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_POINTS", Neo::PRIMITIVE_POINTS)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_LINES", Neo::PRIMITIVE_LINES)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_LINE_LOOP", Neo::PRIMITIVE_LINE_LOOP)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_LINE_STRIP", Neo::PRIMITIVE_LINE_STRIP)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_TRIANGLES", Neo::PRIMITIVE_TRIANGLES)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_TRIANGLE_STRIP", Neo::PRIMITIVE_TRIANGLE_STRIP)},
    {SWIG_LUA_CONSTTAB_INT("PRIMITIVE_TRIANGLE_FAN", Neo::PRIMITIVE_TRIANGLE_FAN)},
    {SWIG_LUA_CONSTTAB_INT("BUFFER_COLOR", Neo::BUFFER_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("BUFFER_DEPTH", Neo::BUFFER_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("BUFFER_STENCIL", Neo::BUFFER_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("TEX_DEPTH", Neo::TEX_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("TEX_R", Neo::TEX_R)},
    {SWIG_LUA_CONSTTAB_INT("TEX_RG", Neo::TEX_RG)},
    {SWIG_LUA_CONSTTAB_INT("TEX_RGB", Neo::TEX_RGB)},
    {SWIG_LUA_CONSTTAB_INT("TEX_RGBA", Neo::TEX_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("TEX_GEN_NONE", Neo::TEX_GEN_NONE)},
    {SWIG_LUA_CONSTTAB_INT("TEX_GEN_SPHERE_MAP", Neo::TEX_GEN_SPHERE_MAP)},
    {SWIG_LUA_CONSTTAB_INT("TEX_GEN_CUBE_MAP", Neo::TEX_GEN_CUBE_MAP)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_REPLACE", Neo::TEX_COMBINE_REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_MODULATE", Neo::TEX_COMBINE_MODULATE)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_ALPHA", Neo::TEX_COMBINE_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_ADD", Neo::TEX_COMBINE_ADD)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_SUB", Neo::TEX_COMBINE_SUB)},
    {SWIG_LUA_CONSTTAB_INT("TEX_COMBINE_DOT", Neo::TEX_COMBINE_DOT)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_NEAREST", Neo::TEX_FILTER_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_NEAREST_MIPMAP_NEAREST", Neo::TEX_FILTER_NEAREST_MIPMAP_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_NEAREST_MIPMAP_LINEAR", Neo::TEX_FILTER_NEAREST_MIPMAP_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_LINEAR", Neo::TEX_FILTER_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_LINEAR_MIPMAP_NEAREST", Neo::TEX_FILTER_LINEAR_MIPMAP_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("TEX_FILTER_LINEAR_MIPMAP_LINEAR", Neo::TEX_FILTER_LINEAR_MIPMAP_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("WRAP_REPEAT", Neo::WRAP_REPEAT)},
    {SWIG_LUA_CONSTTAB_INT("WRAP_CLAMP", Neo::WRAP_CLAMP)},
    {SWIG_LUA_CONSTTAB_INT("CULL_NONE", Neo::CULL_NONE)},
    {SWIG_LUA_CONSTTAB_INT("CULL_FRONT", Neo::CULL_FRONT)},
    {SWIG_LUA_CONSTTAB_INT("CULL_BACK", Neo::CULL_BACK)},
    {SWIG_LUA_CONSTTAB_INT("CULL_FRONT_BACK", Neo::CULL_FRONT_BACK)},
    {SWIG_LUA_CONSTTAB_INT("VAR_BOOL", Neo::VAR_BOOL)},
    {SWIG_LUA_CONSTTAB_INT("VAR_BYTE", Neo::VAR_BYTE)},
    {SWIG_LUA_CONSTTAB_INT("VAR_UBYTE", Neo::VAR_UBYTE)},
    {SWIG_LUA_CONSTTAB_INT("VAR_SHORT", Neo::VAR_SHORT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_USHORT", Neo::VAR_USHORT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_INT", Neo::VAR_INT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_UINT", Neo::VAR_UINT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_FLOAT", Neo::VAR_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("VAR_DOUBLE", Neo::VAR_DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_DEPTH", Neo::ATTACH_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_STENCIL", Neo::ATTACH_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR0", Neo::ATTACH_COLOR0)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR1", Neo::ATTACH_COLOR1)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR2", Neo::ATTACH_COLOR2)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR3", Neo::ATTACH_COLOR3)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR4", Neo::ATTACH_COLOR4)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR5", Neo::ATTACH_COLOR5)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR6", Neo::ATTACH_COLOR6)},
    {SWIG_LUA_CONSTTAB_INT("ATTACH_COLOR7", Neo::ATTACH_COLOR7)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_DEPTH", Neo::RENDER_DEPTH)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_STENCIL", Neo::RENDER_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_DEPTH_STENCIL", Neo::RENDER_DEPTH_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_ALWAYS", Neo::STENCIL_ALWAYS)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_NEVER", Neo::STENCIL_NEVER)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_EQUAL", Neo::STENCIL_EQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_NOTEQUAL", Neo::STENCIL_NOTEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_LESS", Neo::STENCIL_LESS)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_LEQUAL", Neo::STENCIL_LEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_GREATER", Neo::STENCIL_GREATER)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_GEQUAL", Neo::STENCIL_GEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_KEEP", Neo::STENCIL_KEEP)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_INVERT", Neo::STENCIL_INVERT)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_DECR", Neo::STENCIL_DECR)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_INCR", Neo::STENCIL_INCR)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_REPLACE", Neo::STENCIL_REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("VBO_ARRAY", Neo::VBO_ARRAY)},
    {SWIG_LUA_CONSTTAB_INT("VBO_ELEMENT_ARRAY", Neo::VBO_ELEMENT_ARRAY)},
    {SWIG_LUA_CONSTTAB_INT("VBO_STATIC", Neo::VBO_STATIC)},
    {SWIG_LUA_CONSTTAB_INT("VBO_DYNAMIC", Neo::VBO_DYNAMIC)},
    {SWIG_LUA_CONSTTAB_INT("VBO_STREAM", Neo::VBO_STREAM)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_MONO8", Neo::SOUND_FORMAT_MONO8)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_MONO16", Neo::SOUND_FORMAT_MONO16)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_STEREO8", Neo::SOUND_FORMAT_STEREO8)},
    {SWIG_LUA_CONSTTAB_INT("SOUND_FORMAT_STEREO16", Neo::SOUND_FORMAT_STEREO16)},
    {SWIG_LUA_CONSTTAB_INT("OBJECT3D", OBJECT3D)},
    {SWIG_LUA_CONSTTAB_INT("OBJECT3D_BONE", OBJECT3D_BONE)},
    {SWIG_LUA_CONSTTAB_INT("OBJECT3D_CAMERA", OBJECT3D_CAMERA)},
    {SWIG_LUA_CONSTTAB_INT("OBJECT3D_LIGHT", OBJECT3D_LIGHT)},
    {SWIG_LUA_CONSTTAB_INT("OBJECT3D_ENTITY", OBJECT3D_ENTITY)},
    {SWIG_LUA_CONSTTAB_INT("OBJECT3D_SOUND", OBJECT3D_SOUND)},
    {SWIG_LUA_CONSTTAB_INT("OBJECT3D_TEXT", OBJECT3D_TEXT)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_MESH", 0)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_TEXTURE", 1)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_SOUND", 2)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_ARMATURE_ANIM", 3)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_MATERIALS_ANIM", 4)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_TEXTURES_ANIM", 5)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_SHADER", 6)},
    {SWIG_LUA_CONSTTAB_INT("M_REF_FONT", 7)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_NULL", Neo::M_VARIABLE_NULL)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_BOOL", Neo::M_VARIABLE_BOOL)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_INT", Neo::M_VARIABLE_INT)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_UINT", Neo::M_VARIABLE_UINT)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_FLOAT", Neo::M_VARIABLE_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_STRING", Neo::M_VARIABLE_STRING)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_VEC2", Neo::M_VARIABLE_VEC2)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_VEC3", Neo::M_VARIABLE_VEC3)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_VEC4", Neo::M_VARIABLE_VEC4)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_QUAT", Neo::M_VARIABLE_QUAT)},
    {SWIG_LUA_CONSTTAB_INT("M_VARIABLE_TEXTURE_REF", Neo::M_VARIABLE_TEXTURE_REF)},
    {SWIG_LUA_CONSTTAB_INT("M_SHADER_VERTEX", Neo::M_SHADER_VERTEX)},
    {SWIG_LUA_CONSTTAB_INT("M_SHADER_PIXEL", Neo::M_SHADER_PIXEL)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_POINT", Neo::LIGHT_POINT)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_SPOT", Neo::LIGHT_SPOT)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_DIRECTIONAL", Neo::LIGHT_DIRECTIONAL)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_BOX", Neo::COLLISION_SHAPE_BOX)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_SPHERE", Neo::COLLISION_SHAPE_SPHERE)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CONE", Neo::COLLISION_SHAPE_CONE)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CAPSULE", Neo::COLLISION_SHAPE_CAPSULE)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CYLINDER", Neo::COLLISION_SHAPE_CYLINDER)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_CONVEX_HULL", Neo::COLLISION_SHAPE_CONVEX_HULL)},
    {SWIG_LUA_CONSTTAB_INT("COLLISION_SHAPE_TRIANGLE_MESH", Neo::COLLISION_SHAPE_TRIANGLE_MESH)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_ALIGN_LEFT", Neo::TEXT_ALIGN_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_ALIGN_RIGHT", Neo::TEXT_ALIGN_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("TEXT_ALIGN_CENTER", Neo::TEXT_ALIGN_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("M_DATA_STATIC", Neo::M_DATA_STATIC)},
    {SWIG_LUA_CONSTTAB_INT("M_DATA_DYNAMIC", Neo::M_DATA_DYNAMIC)},
    {SWIG_LUA_CONSTTAB_INT("M_DATA_STREAM", Neo::M_DATA_STREAM)},
    {SWIG_LUA_CONSTTAB_INT("BUTTON_NORMAL_STATE", Neo2D::Gui::BUTTON_NORMAL_STATE)},
    {SWIG_LUA_CONSTTAB_INT("BUTTON_HOVER_STATE", Neo2D::Gui::BUTTON_HOVER_STATE)},
    {SWIG_LUA_CONSTTAB_INT("BUTTON_PRESSED_STATE", Neo2D::Gui::BUTTON_PRESSED_STATE)},
    {SWIG_LUA_CONSTTAB_INT("CHECKBUTTON_NORMAL_STATE", Neo2D::Gui::CHECKBUTTON_NORMAL_STATE)},
    {SWIG_LUA_CONSTTAB_INT("CHECKBUTTON_HOVER_STATE", Neo2D::Gui::CHECKBUTTON_HOVER_STATE)},
    {SWIG_LUA_CONSTTAB_INT("CHECKBUTTON_PRESSED_STATE", Neo2D::Gui::CHECKBUTTON_PRESSED_STATE)},
    {SWIG_LUA_CONSTTAB_INT("TITLE_HEIGHT", 30)},
    {SWIG_LUA_CONSTTAB_INT("WINDOW_UNSELECTED_STATE", Neo2D::Gui::WINDOW_UNSELECTED_STATE)},
    {SWIG_LUA_CONSTTAB_INT("WINDOW_GRABBED_STATE", Neo2D::Gui::WINDOW_GRABBED_STATE)},
    {SWIG_LUA_CONSTTAB_INT("WINDOW_SELECTED_STATE", Neo2D::Gui::WINDOW_SELECTED_STATE)},
    {SWIG_LUA_CONSTTAB_INT("WINDOW_RESIZING_STATE", Neo2D::Gui::WINDOW_RESIZING_STATE)},
    {SWIG_LUA_CONSTTAB_INT("INPUT_NORMAL_STATE", Neo2D::Gui::INPUT_NORMAL_STATE)},
    {SWIG_LUA_CONSTTAB_INT("INPUT_HOVER_STATE", Neo2D::Gui::INPUT_HOVER_STATE)},
    {SWIG_LUA_CONSTTAB_INT("INPUT_SELECTED_STATE", Neo2D::Gui::INPUT_SELECTED_STATE)},
    {SWIG_LUA_CONSTTAB_INT("NORMAL_INPUT", Neo2D::Gui::NORMAL_INPUT)},
    {SWIG_LUA_CONSTTAB_INT("DECIMAL_INPUT", Neo2D::Gui::DECIMAL_INPUT)},
    {SWIG_LUA_CONSTTAB_INT("INTEGER_INPUT", Neo2D::Gui::INTEGER_INPUT)},
    {SWIG_LUA_CONSTTAB_INT("NUM_SPRITES", 9)},
    {SWIG_LUA_CONSTTAB_INT("LINE_HEIGHT", 25)},
    {SWIG_LUA_CONSTTAB_INT("SLIDER_HORIZONTAL", Neo2D::Gui::SLIDER_HORIZONTAL)},
    {SWIG_LUA_CONSTTAB_INT("SLIDER_VERTICAL", Neo2D::Gui::SLIDER_VERTICAL)},
    {SWIG_LUA_CONSTTAB_INT("SLIDER_NORMAL", Neo2D::Gui::SLIDER_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("SLIDER_GRABBED", Neo2D::Gui::SLIDER_GRABBED)},
    {SWIG_LUA_CONSTTAB_INT("m_scrollWidth", 1)},
    {SWIG_LUA_CONSTTAB_INT("SCROLL_BAR_WIDTH", 10)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "copyFile", _wrap_copyFile},
    { "createDirectory", _wrap_createDirectory},
    { "isDirectory", _wrap_isDirectory},
    { "isEmptyDirectory", _wrap_isEmptyDirectory},
    { "clearDirectory", _wrap_clearDirectory},
    { "removeDirectory", _wrap_removeDirectory},
    { "isFileExist", _wrap_isFileExist},
    { "copyDirectory", _wrap_copyDirectory},
    { "readDirectory", _wrap_readDirectory},
    { "copyDirFiles", _wrap_copyDirFiles},
    { "M_registerFileOpenHook", _wrap_M_registerFileOpenHook},
    { "M_getFileOpenHook", _wrap_M_getFileOpenHook},
    { "M_fopen", _wrap_M_fopen},
    { "M_fclose", _wrap_M_fclose},
    { "M_fread", _wrap_M_fread},
    { "M_fwrite", _wrap_M_fwrite},
    { "M_fprintf", _wrap_M_fprintf},
    { "M_fseek", _wrap_M_fseek},
    { "M_ftell", _wrap_M_ftell},
    { "M_rewind", _wrap_M_rewind},
    { "getNextPowerOfTwo", _wrap_getNextPowerOfTwo},
    { "loopFloat", _wrap_loopFloat},
    { "sortFloatList", _wrap_sortFloatList},
    { "isBoxToBoxCollision", _wrap_isBoxToBoxCollision},
    { "isBoxToBox2dCollision", _wrap_isBoxToBox2dCollision},
    { "isPointInBox", _wrap_isPointInBox},
    { "isPointInBox2d", _wrap_isPointInBox2d},
    { "isEdgeToBoxCollision", _wrap_isEdgeToBoxCollision},
    { "isEdgeToEdge2dIntersection", _wrap_isEdgeToEdge2dIntersection},
    { "isPointInTriangle", _wrap_isPointInTriangle},
    { "isLineCircleIntersection", _wrap_isLineCircleIntersection},
    { "isRaySphereIntersection", _wrap_isRaySphereIntersection},
    { "isRayPlaneIntersection", _wrap_isRayPlaneIntersection},
    { "isEdgePlaneIntersection", _wrap_isEdgePlaneIntersection},
    { "isEdgeTriangleIntersection", _wrap_isEdgeTriangleIntersection},
    { "getTriangleNormal", _wrap_getTriangleNormal},
    { "simplifyDP", _wrap_simplifyDP},
    { "linearInterpolation", _wrap_linearInterpolation},
    { "cubicInterpolation", _wrap_cubicInterpolation},
    { "CatmullRomInterpolation", _wrap_CatmullRomInterpolation},
    { "HermiteInterpolation", _wrap_HermiteInterpolation},
    { "HueToRGB", _wrap_HueToRGB},
    { "RGBToHSV", _wrap_RGBToHSV},
    { "HSVToRGB", _wrap_HSVToRGB},
    { "RGBToHSL", _wrap_RGBToHSL},
    { "HSLToRGB", _wrap_HSLToRGB},
    { "getLocalFilename", _wrap_getLocalFilename},
    { "getGlobalFilename", _wrap_getGlobalFilename},
    { "getRepertory", _wrap_getRepertory},
    { "readTextFile", _wrap_readTextFile},
    { "infoLog", _wrap_infoLog},
    { "ArmatureAnim_getNew", _wrap_ArmatureAnim_getNew},
    { "TexturesAnim_getNew", _wrap_TexturesAnim_getNew},
    { "MaterialsAnim_getNew", _wrap_MaterialsAnim_getNew},
    { "Font_getNew", _wrap_Font_getNew},
    { "Mesh_getNew", _wrap_Mesh_getNew},
    { "animateFloat", _wrap_animateFloat},
    { "animateVector2", _wrap_animateVector2},
    { "animateVector3", _wrap_animateVector3},
    { "animateQuaternion", _wrap_animateQuaternion},
    { "animateArmature", _wrap_animateArmature},
    { "animateTextures", _wrap_animateTextures},
    { "animateMaterials", _wrap_animateMaterials},
    { "computeSkinning", _wrap_computeSkinning},
    { "isRaytraced", _wrap_isRaytraced},
    { "getNearestRaytracedPosition", _wrap_getNearestRaytracedPosition},
    { "FontRef_getNew", _wrap_FontRef_getNew},
    { "ShaderRef_getNew", _wrap_ShaderRef_getNew},
    { "SoundRef_getNew", _wrap_SoundRef_getNew},
    { "MeshRef_getNew", _wrap_MeshRef_getNew},
    { "TextureRef_getNew", _wrap_TextureRef_getNew},
    { "ArmatureAnimRef_getNew", _wrap_ArmatureAnimRef_getNew},
    { "TexturesAnimRef_getNew", _wrap_TexturesAnimRef_getNew},
    { "MaterialsAnimRef_getNew", _wrap_MaterialsAnimRef_getNew},
    { "Messenger_getInstance", _wrap_Messenger_getInstance},
    { "NeoEngine_getInstance", _wrap_NeoEngine_getInstance},
    { "Canvas_getInstance", _wrap_Canvas_getInstance},
    { "Neo2DEngine_getInstance", _wrap_Neo2DEngine_getInstance},
    { "intp_frompointer", _wrap_intp_frompointer},
    { "uintp_frompointer", _wrap_uintp_frompointer},
    { "floatp_frompointer", _wrap_floatp_frompointer},
    { "doublep_frompointer", _wrap_doublep_frompointer},
    { "Voidp2String", _wrap_Voidp2String},
    { "Voidp2Float", _wrap_Voidp2Float},
    { "Stringp_frompointer", _wrap_Stringp_frompointer},
    { "Vector3p_frompointer", _wrap_Vector3p_frompointer},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_String,
&_wrap_class_Range,
&_wrap_class_Vector2,
&_wrap_class_Vector3,
&_wrap_class_Vector4,
&_wrap_class_Color,
&_wrap_class_Matrix4x4,
&_wrap_class_Quaternion,
&_wrap_class_SystemContext,
&_wrap_class_InputContext,
&_wrap_class_RenderingContext,
&_wrap_class_SoundContext,
&_wrap_class_PhysicsContext,
&_wrap_class_ScriptContext,
&_wrap_class_Image,
&_wrap_class_Sound,
&_wrap_class_DataRef,
&_wrap_class_DataManager,
&_wrap_class_Profiler,
&_wrap_class_PackageManager,
&_wrap_class_Key,
&_wrap_class_Object3dAnim,
&_wrap_class_TextureAnim,
&_wrap_class_MaterialAnim,
&_wrap_class_ArmatureAnim,
&_wrap_class_TexturesAnim,
&_wrap_class_MaterialsAnim,
&_wrap_class_FXRef,
&_wrap_class_FXManager,
&_wrap_class_NeoVariable,
&_wrap_class_PostProcessor,
&_wrap_class_Behavior,
&_wrap_class_BehaviorCreator,
&_wrap_class_BehaviorManager,
&_wrap_class_Renderer,
&_wrap_class_RendererCreator,
&_wrap_class_RendererManager,
&_wrap_class_Box3d,
&_wrap_class_Frustum,
&_wrap_class_Character,
&_wrap_class_Font,
&_wrap_class_Texture,
&_wrap_class_TexturePass,
&_wrap_class_Material,
&_wrap_class_Armature,
&_wrap_class_MorphingPoint,
&_wrap_class_MorphingPose,
&_wrap_class_MorphingData,
&_wrap_class_SkinPoint,
&_wrap_class_SkinData,
&_wrap_class_MaterialDisplay,
&_wrap_class_SubMesh,
&_wrap_class_AnimRange,
&_wrap_class_Mesh,
&_wrap_class_FontRef,
&_wrap_class_ShaderRef,
&_wrap_class_SoundRef,
&_wrap_class_MeshRef,
&_wrap_class_TextureRef,
&_wrap_class_ArmatureAnimRef,
&_wrap_class_TexturesAnimRef,
&_wrap_class_MaterialsAnimRef,
&_wrap_class_Skybox,
&_wrap_class_Object3d,
&_wrap_class_OBone,
&_wrap_class_OCamera,
&_wrap_class_OLight,
&_wrap_class_OSound,
&_wrap_class_PhysicsConstraint,
&_wrap_class_PhysicsProperties,
&_wrap_class_OEntity,
&_wrap_class_OText,
&_wrap_class_Scene,
&_wrap_class_Level,
&_wrap_class_SubGame,
&_wrap_class_NeoGame,
&_wrap_class_Message,
&_wrap_class_Messenger,
&_wrap_class_NeoEngine,
&_wrap_class_Widget,
&_wrap_class_Sprite,
&_wrap_class_SpriteBatch,
&_wrap_class_Canvas,
&_wrap_class_CulledSpriteBatch,
&_wrap_class_Neo2DEngine,
&_wrap_class_Button,
&_wrap_class_Label,
&_wrap_class_CheckButton,
&_wrap_class_Container,
&_wrap_class_WindowManager,
&_wrap_class_Window,
&_wrap_class_TileSheet,
&_wrap_class_Tile,
&_wrap_class_InputField,
&_wrap_class_ThemedButton,
&_wrap_class_ThemedInputField,
&_wrap_class_Menu,
&_wrap_class_MenuBar,
&_wrap_class_List,
&_wrap_class_TreeModel,
&_wrap_class_TreeView,
&_wrap_class_Slider,
&_wrap_class_ScrollBar,
&_wrap_class_ScrollPane,
&_wrap_class_ScaleLayout,
&_wrap_class_intp,
&_wrap_class_uintp,
&_wrap_class_floatp,
&_wrap_class_doublep,
&_wrap_class_Stringp,
&_wrap_class_Vector3p,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "NeoLua",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Neo__ArmatureAnimRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::ArmatureAnimRef *) x));
}
static void *_p_Neo__TexturesAnimRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::TexturesAnimRef *) x));
}
static void *_p_Neo__MaterialsAnimRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::MaterialsAnimRef *) x));
}
static void *_p_Neo__TextureRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::TextureRef *) x));
}
static void *_p_Neo__FontRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::FontRef *) x));
}
static void *_p_Neo__MeshRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::MeshRef *) x));
}
static void *_p_Neo__ShaderRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::ShaderRef *) x));
}
static void *_p_Neo__SoundRefTo_p_Neo__DataRef(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::DataRef *)  ((Neo::SoundRef *) x));
}
static void *_p_StringpTo_p_Neo__String(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::String *)  ((Stringp *) x));
}
static void *_p_Neo__AnimRangeTo_p_Neo__Range(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Range *)  ((Neo::AnimRange *) x));
}
static void *_p_Neo2D__SpriteTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Sprite *) x));
}
static void *_p_Neo2D__Gui__WindowManagerTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *) (Neo2D::Gui::Container *) ((Neo2D::Gui::WindowManager *) x));
}
static void *_p_Neo2D__Gui__MenuTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::Menu *) x));
}
static void *_p_Neo2D__Gui__ScrollBarTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::ScrollBar *) x));
}
static void *_p_Neo2D__Gui__CheckButtonTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::CheckButton *) x));
}
static void *_p_Neo2D__Gui__WindowTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *) (Neo2D::Gui::Container *) ((Neo2D::Gui::Window *) x));
}
static void *_p_Neo2D__Gui__LabelTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::Label *) x));
}
static void *_p_Neo2D__Gui__ScrollPaneTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *) (Neo2D::Gui::Container *) ((Neo2D::Gui::ScrollPane *) x));
}
static void *_p_Neo2D__Gui__ThemedButtonTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *) (Neo2D::Gui::Button *) ((Neo2D::Gui::ThemedButton *) x));
}
static void *_p_Neo2D__Gui__ButtonTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::Button *) x));
}
static void *_p_Neo2D__Gui__ContainerTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::Container *) x));
}
static void *_p_Neo2D__Gui__ScaleLayoutTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *) (Neo2D::Gui::Container *) ((Neo2D::Gui::ScaleLayout *) x));
}
static void *_p_Neo2D__Gui__ThemedInputFieldTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *) (Neo2D::Gui::InputField *) ((Neo2D::Gui::ThemedInputField *) x));
}
static void *_p_Neo2D__Gui__InputFieldTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::InputField *) x));
}
static void *_p_Neo2D__Gui__TreeViewTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::TreeView *) x));
}
static void *_p_Neo2D__TileTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Tile *) x));
}
static void *_p_Neo2D__Gui__SliderTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::Slider *) x));
}
static void *_p_Neo2D__Gui__ListTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::List *) x));
}
static void *_p_Neo2D__Gui__MenuBarTo_p_Neo2D__Widget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Widget *)  ((Neo2D::Gui::MenuBar *) x));
}
static void *_p_f_void__intpTo_p_f_void__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)(void))  ((intp (*)(void)) x));
}
static void *_p_floatpTo_p_float(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((float *)  ((floatp *) x));
}
static void *_p_intpTo_p_int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int *)  ((intp *) x));
}
static void *_p_uintpTo_p_unsigned_int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((unsigned int *)  ((uintp *) x));
}
static void *_p_Neo2D__Gui__WindowTo_p_Neo2D__Gui__Container(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Gui::Container *)  ((Neo2D::Gui::Window *) x));
}
static void *_p_Neo2D__Gui__WindowManagerTo_p_Neo2D__Gui__Container(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Gui::Container *)  ((Neo2D::Gui::WindowManager *) x));
}
static void *_p_Neo2D__Gui__ScaleLayoutTo_p_Neo2D__Gui__Container(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Gui::Container *)  ((Neo2D::Gui::ScaleLayout *) x));
}
static void *_p_Neo2D__Gui__ScrollPaneTo_p_Neo2D__Gui__Container(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Gui::Container *)  ((Neo2D::Gui::ScrollPane *) x));
}
static void *_p_Neo2D__Gui__ThemedButtonTo_p_Neo2D__Gui__Button(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Gui::Button *)  ((Neo2D::Gui::ThemedButton *) x));
}
static void *_p_Neo2D__Gui__ThemedInputFieldTo_p_Neo2D__Gui__InputField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::Gui::InputField *)  ((Neo2D::Gui::ThemedInputField *) x));
}
static void *_p_Neo2D__CulledSpriteBatchTo_p_Neo2D__SpriteBatch(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo2D::SpriteBatch *)  ((Neo2D::CulledSpriteBatch *) x));
}
static void *_p_Neo__OBoneTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OBone *) x));
}
static void *_p_Neo__OLightTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OLight *) x));
}
static void *_p_Neo__OSoundTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OSound *) x));
}
static void *_p_Neo__OEntityTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OEntity *) x));
}
static void *_p_Neo__OTextTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OText *) x));
}
static void *_p_Neo__OCameraTo_p_Neo__Object3d(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Object3d *)  ((Neo::OCamera *) x));
}
static void *_p_doublepTo_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double *)  ((doublep *) x));
}
static void *_p_Vector3pTo_p_Neo__Vector3(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Neo::Vector3 *)  ((Vector3p *) x));
}
static swig_type_info _swigt__p_File = {"_p_File", "File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileOpenHook = {"_p_FileOpenHook", "FileOpenHook *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo2D__Canvas = {"_p_Neo2D__Canvas", "Neo2D::Canvas *", 0, 0, (void*)&_wrap_class_Canvas, 0};
static swig_type_info _swigt__p_Neo2D__CulledSpriteBatch = {"_p_Neo2D__CulledSpriteBatch", "Neo2D::CulledSpriteBatch *", 0, 0, (void*)&_wrap_class_CulledSpriteBatch, 0};
static swig_type_info _swigt__p_Neo2D__Gui__Button = {"_p_Neo2D__Gui__Button", "Neo2D::Gui::Button *", 0, 0, (void*)&_wrap_class_Button, 0};
static swig_type_info _swigt__p_Neo2D__Gui__CheckButton = {"_p_Neo2D__Gui__CheckButton", "Neo2D::Gui::CheckButton *", 0, 0, (void*)&_wrap_class_CheckButton, 0};
static swig_type_info _swigt__p_Neo2D__Gui__Container = {"_p_Neo2D__Gui__Container", "Neo2D::Gui::Container *", 0, 0, (void*)&_wrap_class_Container, 0};
static swig_type_info _swigt__p_Neo2D__Gui__InputField = {"_p_Neo2D__Gui__InputField", "Neo2D::Gui::InputField *", 0, 0, (void*)&_wrap_class_InputField, 0};
static swig_type_info _swigt__p_Neo2D__Gui__Label = {"_p_Neo2D__Gui__Label", "Neo2D::Gui::Label *", 0, 0, (void*)&_wrap_class_Label, 0};
static swig_type_info _swigt__p_Neo2D__Gui__List = {"_p_Neo2D__Gui__List", "Neo2D::Gui::List *", 0, 0, (void*)&_wrap_class_List, 0};
static swig_type_info _swigt__p_Neo2D__Gui__Menu = {"_p_Neo2D__Gui__Menu", "Neo2D::Gui::Menu *", 0, 0, (void*)&_wrap_class_Menu, 0};
static swig_type_info _swigt__p_Neo2D__Gui__MenuBar = {"_p_Neo2D__Gui__MenuBar", "Neo2D::Gui::MenuBar *", 0, 0, (void*)&_wrap_class_MenuBar, 0};
static swig_type_info _swigt__p_Neo2D__Gui__ScaleLayout = {"_p_Neo2D__Gui__ScaleLayout", "Neo2D::Gui::ScaleLayout *", 0, 0, (void*)&_wrap_class_ScaleLayout, 0};
static swig_type_info _swigt__p_Neo2D__Gui__ScrollBar = {"_p_Neo2D__Gui__ScrollBar", "Neo2D::Gui::ScrollBar *", 0, 0, (void*)&_wrap_class_ScrollBar, 0};
static swig_type_info _swigt__p_Neo2D__Gui__ScrollPane = {"_p_Neo2D__Gui__ScrollPane", "Neo2D::Gui::ScrollPane *", 0, 0, (void*)&_wrap_class_ScrollPane, 0};
static swig_type_info _swigt__p_Neo2D__Gui__Slider = {"_p_Neo2D__Gui__Slider", "Neo2D::Gui::Slider *", 0, 0, (void*)&_wrap_class_Slider, 0};
static swig_type_info _swigt__p_Neo2D__Gui__ThemedButton = {"_p_Neo2D__Gui__ThemedButton", "Neo2D::Gui::ThemedButton *", 0, 0, (void*)&_wrap_class_ThemedButton, 0};
static swig_type_info _swigt__p_Neo2D__Gui__ThemedInputField = {"_p_Neo2D__Gui__ThemedInputField", "Neo2D::Gui::ThemedInputField *", 0, 0, (void*)&_wrap_class_ThemedInputField, 0};
static swig_type_info _swigt__p_Neo2D__Gui__TreeNodeT_std__string_t = {"_p_Neo2D__Gui__TreeNodeT_std__string_t", "Neo2D::Gui::TreeNode< std::string > *", 0, 0, (void*)&_wrap_class_TreeModel, 0};
static swig_type_info _swigt__p_Neo2D__Gui__TreeView = {"_p_Neo2D__Gui__TreeView", "Neo2D::Gui::TreeView *", 0, 0, (void*)&_wrap_class_TreeView, 0};
static swig_type_info _swigt__p_Neo2D__Gui__Window = {"_p_Neo2D__Gui__Window", "Neo2D::Gui::Window *", 0, 0, (void*)&_wrap_class_Window, 0};
static swig_type_info _swigt__p_Neo2D__Gui__WindowManager = {"_p_Neo2D__Gui__WindowManager", "Neo2D::Gui::WindowManager *", 0, 0, (void*)&_wrap_class_WindowManager, 0};
static swig_type_info _swigt__p_Neo2D__Neo2DEngine = {"_p_Neo2D__Neo2DEngine", "Neo2D::Neo2DEngine *", 0, 0, (void*)&_wrap_class_Neo2DEngine, 0};
static swig_type_info _swigt__p_Neo2D__Sprite = {"_p_Neo2D__Sprite", "Neo2D::Sprite *", 0, 0, (void*)&_wrap_class_Sprite, 0};
static swig_type_info _swigt__p_Neo2D__SpriteBatch = {"_p_Neo2D__SpriteBatch", "Neo2D::SpriteBatch *", 0, 0, (void*)&_wrap_class_SpriteBatch, 0};
static swig_type_info _swigt__p_Neo2D__Tile = {"_p_Neo2D__Tile", "Neo2D::Tile *", 0, 0, (void*)&_wrap_class_Tile, 0};
static swig_type_info _swigt__p_Neo2D__TileSheet = {"_p_Neo2D__TileSheet", "Neo2D::TileSheet *", 0, 0, (void*)&_wrap_class_TileSheet, 0};
static swig_type_info _swigt__p_Neo2D__Widget = {"_p_Neo2D__Widget", "Neo2D::Widget *", 0, 0, (void*)&_wrap_class_Widget, 0};
static swig_type_info _swigt__p_Neo__AnimRange = {"_p_Neo__AnimRange", "Neo::AnimRange *", 0, 0, (void*)&_wrap_class_AnimRange, 0};
static swig_type_info _swigt__p_Neo__Armature = {"_p_Neo__Armature", "Neo::Armature *", 0, 0, (void*)&_wrap_class_Armature, 0};
static swig_type_info _swigt__p_Neo__ArmatureAnim = {"_p_Neo__ArmatureAnim", "Neo::ArmatureAnim *", 0, 0, (void*)&_wrap_class_ArmatureAnim, 0};
static swig_type_info _swigt__p_Neo__ArmatureAnimRef = {"_p_Neo__ArmatureAnimRef", "Neo::ArmatureAnimRef *", 0, 0, (void*)&_wrap_class_ArmatureAnimRef, 0};
static swig_type_info _swigt__p_Neo__Behavior = {"_p_Neo__Behavior", "Neo::Behavior *", 0, 0, (void*)&_wrap_class_Behavior, 0};
static swig_type_info _swigt__p_Neo__BehaviorCreator = {"_p_Neo__BehaviorCreator", "Neo::BehaviorCreator *", 0, 0, (void*)&_wrap_class_BehaviorCreator, 0};
static swig_type_info _swigt__p_Neo__BehaviorManager = {"_p_Neo__BehaviorManager", "Neo::BehaviorManager *", 0, 0, (void*)&_wrap_class_BehaviorManager, 0};
static swig_type_info _swigt__p_Neo__Box3d = {"_p_Neo__Box3d", "Neo::Box3d *", 0, 0, (void*)&_wrap_class_Box3d, 0};
static swig_type_info _swigt__p_Neo__Character = {"_p_Neo__Character", "Neo::Character *", 0, 0, (void*)&_wrap_class_Character, 0};
static swig_type_info _swigt__p_Neo__Color = {"_p_Neo__Color", "Neo::Color *", 0, 0, (void*)&_wrap_class_Color, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__ArmatureAnim_t = {"_p_Neo__DataLoaderT_Neo__ArmatureAnim_t", "Neo::DataLoader< Neo::ArmatureAnim > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__Font_t = {"_p_Neo__DataLoaderT_Neo__Font_t", "Neo::DataLoader< Neo::Font > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__Image_t = {"_p_Neo__DataLoaderT_Neo__Image_t", "Neo::DataLoader< Neo::Image > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__Level_t = {"_p_Neo__DataLoaderT_Neo__Level_t", "Neo::DataLoader< Neo::Level > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__MaterialsAnim_t = {"_p_Neo__DataLoaderT_Neo__MaterialsAnim_t", "Neo::DataLoader< Neo::MaterialsAnim > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__Mesh_t = {"_p_Neo__DataLoaderT_Neo__Mesh_t", "Neo::DataLoader< Neo::Mesh > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__Sound_t = {"_p_Neo__DataLoaderT_Neo__Sound_t", "Neo::DataLoader< Neo::Sound > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataLoaderT_Neo__TexturesAnim_t = {"_p_Neo__DataLoaderT_Neo__TexturesAnim_t", "Neo::DataLoader< Neo::TexturesAnim > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__DataManager = {"_p_Neo__DataManager", "Neo::DataManager *", 0, 0, (void*)&_wrap_class_DataManager, 0};
static swig_type_info _swigt__p_Neo__DataRef = {"_p_Neo__DataRef", "Neo::DataRef *", 0, 0, (void*)&_wrap_class_DataRef, 0};
static swig_type_info _swigt__p_Neo__FRAME_BUFFER_ATTACHMENT = {"_p_Neo__FRAME_BUFFER_ATTACHMENT", "enum Neo::FRAME_BUFFER_ATTACHMENT *|Neo::FRAME_BUFFER_ATTACHMENT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__FXManager = {"_p_Neo__FXManager", "Neo::FXManager *", 0, 0, (void*)&_wrap_class_FXManager, 0};
static swig_type_info _swigt__p_Neo__FXRef = {"_p_Neo__FXRef", "Neo::FXRef *", 0, 0, (void*)&_wrap_class_FXRef, 0};
static swig_type_info _swigt__p_Neo__Font = {"_p_Neo__Font", "Neo::Font *", 0, 0, (void*)&_wrap_class_Font, 0};
static swig_type_info _swigt__p_Neo__FontRef = {"_p_Neo__FontRef", "Neo::FontRef *", 0, 0, (void*)&_wrap_class_FontRef, 0};
static swig_type_info _swigt__p_Neo__Frustum = {"_p_Neo__Frustum", "Neo::Frustum *", 0, 0, (void*)&_wrap_class_Frustum, 0};
static swig_type_info _swigt__p_Neo__Image = {"_p_Neo__Image", "Neo::Image *", 0, 0, (void*)&_wrap_class_Image, 0};
static swig_type_info _swigt__p_Neo__InputContext = {"_p_Neo__InputContext", "Neo::InputContext *", 0, 0, (void*)&_wrap_class_InputContext, 0};
static swig_type_info _swigt__p_Neo__Key = {"_p_Neo__Key", "Neo::Key *", 0, 0, (void*)&_wrap_class_Key, 0};
static swig_type_info _swigt__p_Neo__Level = {"_p_Neo__Level", "Neo::Level *", 0, 0, (void*)&_wrap_class_Level, 0};
static swig_type_info _swigt__p_Neo__Material = {"_p_Neo__Material", "Neo::Material *", 0, 0, (void*)&_wrap_class_Material, 0};
static swig_type_info _swigt__p_Neo__MaterialAnim = {"_p_Neo__MaterialAnim", "Neo::MaterialAnim *", 0, 0, (void*)&_wrap_class_MaterialAnim, 0};
static swig_type_info _swigt__p_Neo__MaterialDisplay = {"_p_Neo__MaterialDisplay", "Neo::MaterialDisplay *", 0, 0, (void*)&_wrap_class_MaterialDisplay, 0};
static swig_type_info _swigt__p_Neo__MaterialsAnim = {"_p_Neo__MaterialsAnim", "Neo::MaterialsAnim *", 0, 0, (void*)&_wrap_class_MaterialsAnim, 0};
static swig_type_info _swigt__p_Neo__MaterialsAnimRef = {"_p_Neo__MaterialsAnimRef", "Neo::MaterialsAnimRef *", 0, 0, (void*)&_wrap_class_MaterialsAnimRef, 0};
static swig_type_info _swigt__p_Neo__Matrix4x4 = {"_p_Neo__Matrix4x4", "Neo::Matrix4x4 *", 0, 0, (void*)&_wrap_class_Matrix4x4, 0};
static swig_type_info _swigt__p_Neo__Mesh = {"_p_Neo__Mesh", "Neo::Mesh *", 0, 0, (void*)&_wrap_class_Mesh, 0};
static swig_type_info _swigt__p_Neo__MeshRef = {"_p_Neo__MeshRef", "Neo::MeshRef *", 0, 0, (void*)&_wrap_class_MeshRef, 0};
static swig_type_info _swigt__p_Neo__Message = {"_p_Neo__Message", "Neo::Message *", 0, 0, (void*)&_wrap_class_Message, 0};
static swig_type_info _swigt__p_Neo__Messenger = {"_p_Neo__Messenger", "Neo::Messenger *", 0, 0, (void*)&_wrap_class_Messenger, 0};
static swig_type_info _swigt__p_Neo__MorphingData = {"_p_Neo__MorphingData", "Neo::MorphingData *", 0, 0, (void*)&_wrap_class_MorphingData, 0};
static swig_type_info _swigt__p_Neo__MorphingPoint = {"_p_Neo__MorphingPoint", "Neo::MorphingPoint *", 0, 0, (void*)&_wrap_class_MorphingPoint, 0};
static swig_type_info _swigt__p_Neo__MorphingPose = {"_p_Neo__MorphingPose", "Neo::MorphingPose *", 0, 0, (void*)&_wrap_class_MorphingPose, 0};
static swig_type_info _swigt__p_Neo__NeoEngine = {"_p_Neo__NeoEngine", "Neo::NeoEngine *", 0, 0, (void*)&_wrap_class_NeoEngine, 0};
static swig_type_info _swigt__p_Neo__NeoGame = {"_p_Neo__NeoGame", "Neo::NeoGame *", 0, 0, (void*)&_wrap_class_NeoGame, 0};
static swig_type_info _swigt__p_Neo__NeoVariable = {"_p_Neo__NeoVariable", "Neo::NeoVariable *", 0, 0, (void*)&_wrap_class_NeoVariable, 0};
static swig_type_info _swigt__p_Neo__OBone = {"_p_Neo__OBone", "Neo::OBone *", 0, 0, (void*)&_wrap_class_OBone, 0};
static swig_type_info _swigt__p_Neo__OCamera = {"_p_Neo__OCamera", "Neo::OCamera *", 0, 0, (void*)&_wrap_class_OCamera, 0};
static swig_type_info _swigt__p_Neo__OEntity = {"_p_Neo__OEntity", "Neo::OEntity *", 0, 0, (void*)&_wrap_class_OEntity, 0};
static swig_type_info _swigt__p_Neo__OLight = {"_p_Neo__OLight", "Neo::OLight *", 0, 0, (void*)&_wrap_class_OLight, 0};
static swig_type_info _swigt__p_Neo__OSound = {"_p_Neo__OSound", "Neo::OSound *", 0, 0, (void*)&_wrap_class_OSound, 0};
static swig_type_info _swigt__p_Neo__OText = {"_p_Neo__OText", "Neo::OText *", 0, 0, (void*)&_wrap_class_OText, 0};
static swig_type_info _swigt__p_Neo__Object3d = {"_p_Neo__Object3d", "Neo::Object3d *", 0, 0, (void*)&_wrap_class_Object3d, 0};
static swig_type_info _swigt__p_Neo__Object3dAnim = {"_p_Neo__Object3dAnim", "Neo::Object3dAnim *", 0, 0, (void*)&_wrap_class_Object3dAnim, 0};
static swig_type_info _swigt__p_Neo__Object3d__AdditionalData = {"_p_Neo__Object3d__AdditionalData", "Neo::Object3d::AdditionalData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__PackageManager = {"_p_Neo__PackageManager", "Neo::PackageManager *", 0, 0, (void*)&_wrap_class_PackageManager, 0};
static swig_type_info _swigt__p_Neo__PhysicsConstraint = {"_p_Neo__PhysicsConstraint", "Neo::PhysicsConstraint *", 0, 0, (void*)&_wrap_class_PhysicsConstraint, 0};
static swig_type_info _swigt__p_Neo__PhysicsContext = {"_p_Neo__PhysicsContext", "Neo::PhysicsContext *", 0, 0, (void*)&_wrap_class_PhysicsContext, 0};
static swig_type_info _swigt__p_Neo__PhysicsProperties = {"_p_Neo__PhysicsProperties", "Neo::PhysicsProperties *", 0, 0, (void*)&_wrap_class_PhysicsProperties, 0};
static swig_type_info _swigt__p_Neo__PostProcessor = {"_p_Neo__PostProcessor", "Neo::PostProcessor *", 0, 0, (void*)&_wrap_class_PostProcessor, 0};
static swig_type_info _swigt__p_Neo__Profiler = {"_p_Neo__Profiler", "Neo::Profiler *", 0, 0, (void*)&_wrap_class_Profiler, 0};
static swig_type_info _swigt__p_Neo__Profiler__FunctionProfile = {"_p_Neo__Profiler__FunctionProfile", "Neo::Profiler::FunctionProfile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__Quaternion = {"_p_Neo__Quaternion", "Neo::Quaternion *", 0, 0, (void*)&_wrap_class_Quaternion, 0};
static swig_type_info _swigt__p_Neo__Range = {"_p_Neo__Range", "Neo::Range *", 0, 0, (void*)&_wrap_class_Range, 0};
static swig_type_info _swigt__p_Neo__Renderer = {"_p_Neo__Renderer", "Neo::Renderer *", 0, 0, (void*)&_wrap_class_Renderer, 0};
static swig_type_info _swigt__p_Neo__RendererCreator = {"_p_Neo__RendererCreator", "Neo::RendererCreator *", 0, 0, (void*)&_wrap_class_RendererCreator, 0};
static swig_type_info _swigt__p_Neo__RendererManager = {"_p_Neo__RendererManager", "Neo::RendererManager *", 0, 0, (void*)&_wrap_class_RendererManager, 0};
static swig_type_info _swigt__p_Neo__RenderingContext = {"_p_Neo__RenderingContext", "Neo::RenderingContext *", 0, 0, (void*)&_wrap_class_RenderingContext, 0};
static swig_type_info _swigt__p_Neo__Scene = {"_p_Neo__Scene", "Neo::Scene *", 0, 0, (void*)&_wrap_class_Scene, 0};
static swig_type_info _swigt__p_Neo__Scene__AdditionalData = {"_p_Neo__Scene__AdditionalData", "Neo::Scene::AdditionalData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Neo__ScriptContext = {"_p_Neo__ScriptContext", "Neo::ScriptContext *", 0, 0, (void*)&_wrap_class_ScriptContext, 0};
static swig_type_info _swigt__p_Neo__ShaderRef = {"_p_Neo__ShaderRef", "Neo::ShaderRef *", 0, 0, (void*)&_wrap_class_ShaderRef, 0};
static swig_type_info _swigt__p_Neo__SkinData = {"_p_Neo__SkinData", "Neo::SkinData *", 0, 0, (void*)&_wrap_class_SkinData, 0};
static swig_type_info _swigt__p_Neo__SkinPoint = {"_p_Neo__SkinPoint", "Neo::SkinPoint *", 0, 0, (void*)&_wrap_class_SkinPoint, 0};
static swig_type_info _swigt__p_Neo__Skybox = {"_p_Neo__Skybox", "Neo::Skybox *", 0, 0, (void*)&_wrap_class_Skybox, 0};
static swig_type_info _swigt__p_Neo__Sound = {"_p_Neo__Sound", "Neo::Sound *", 0, 0, (void*)&_wrap_class_Sound, 0};
static swig_type_info _swigt__p_Neo__SoundContext = {"_p_Neo__SoundContext", "Neo::SoundContext *", 0, 0, (void*)&_wrap_class_SoundContext, 0};
static swig_type_info _swigt__p_Neo__SoundRef = {"_p_Neo__SoundRef", "Neo::SoundRef *", 0, 0, (void*)&_wrap_class_SoundRef, 0};
static swig_type_info _swigt__p_Neo__String = {"_p_Neo__String", "Neo::String *", 0, 0, (void*)&_wrap_class_String, 0};
static swig_type_info _swigt__p_Neo__SubGame = {"_p_Neo__SubGame", "Neo::SubGame *", 0, 0, (void*)&_wrap_class_SubGame, 0};
static swig_type_info _swigt__p_Neo__SubMesh = {"_p_Neo__SubMesh", "Neo::SubMesh *", 0, 0, (void*)&_wrap_class_SubMesh, 0};
static swig_type_info _swigt__p_Neo__SystemContext = {"_p_Neo__SystemContext", "Neo::SystemContext *", 0, 0, (void*)&_wrap_class_SystemContext, 0};
static swig_type_info _swigt__p_Neo__Texture = {"_p_Neo__Texture", "Neo::Texture *", 0, 0, (void*)&_wrap_class_Texture, 0};
static swig_type_info _swigt__p_Neo__TextureAnim = {"_p_Neo__TextureAnim", "Neo::TextureAnim *", 0, 0, (void*)&_wrap_class_TextureAnim, 0};
static swig_type_info _swigt__p_Neo__TexturePass = {"_p_Neo__TexturePass", "Neo::TexturePass *", 0, 0, (void*)&_wrap_class_TexturePass, 0};
static swig_type_info _swigt__p_Neo__TextureRef = {"_p_Neo__TextureRef", "Neo::TextureRef *", 0, 0, (void*)&_wrap_class_TextureRef, 0};
static swig_type_info _swigt__p_Neo__TexturesAnim = {"_p_Neo__TexturesAnim", "Neo::TexturesAnim *", 0, 0, (void*)&_wrap_class_TexturesAnim, 0};
static swig_type_info _swigt__p_Neo__TexturesAnimRef = {"_p_Neo__TexturesAnimRef", "Neo::TexturesAnimRef *", 0, 0, (void*)&_wrap_class_TexturesAnimRef, 0};
static swig_type_info _swigt__p_Neo__Vector2 = {"_p_Neo__Vector2", "Neo::Vector2 *", 0, 0, (void*)&_wrap_class_Vector2, 0};
static swig_type_info _swigt__p_Neo__Vector3 = {"_p_Neo__Vector3", "Neo::Vector3 *", 0, 0, (void*)&_wrap_class_Vector3, 0};
static swig_type_info _swigt__p_Neo__Vector4 = {"_p_Neo__Vector4", "Neo::Vector4 *", 0, 0, (void*)&_wrap_class_Vector4, 0};
static swig_type_info _swigt__p_Stringp = {"_p_Stringp", "Stringp *", 0, 0, (void*)&_wrap_class_Stringp, 0};
static swig_type_info _swigt__p_Vector3p = {"_p_Vector3p", "Vector3p *", 0, 0, (void*)&_wrap_class_Vector3p, 0};
static swig_type_info _swigt__p___int64 = {"_p___int64", "__int64 *|LONGLONG *|LONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CHAR *|TCHAR *|char *|CCHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_doublep = {"_p_doublep", "doublep *", 0, 0, (void*)&_wrap_class_doublep, 0};
static swig_type_info _swigt__p_f_p_Neo__Object3d__p_Neo__Behavior = {"_p_f_p_Neo__Object3d__p_Neo__Behavior", "Neo::Behavior *(*)(Neo::Object3d *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_void__int = {"_p_f_void__int", "int (*)(void)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_void__intp = {"_p_f_void__intp", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_void__p_Neo__Renderer = {"_p_f_void__p_Neo__Renderer", "Neo::Renderer *(*)(void)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_floatp = {"_p_floatp", "floatp *", 0, 0, (void*)&_wrap_class_floatp, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT32 *|int *|INT *|INT_PTR *|LONG32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_intp = {"_p_intp", "intp *", 0, 0, (void*)&_wrap_class_intp, 0};
static swig_type_info _swigt__p_long = {"_p_long", "SHANDLE_PTR *|LONG_PTR *|LONG *|HRESULT *|long *|SSIZE_T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_unsigned_int_Neo__Character_t = {"_p_mapT_unsigned_int_Neo__Character_t", "map< unsigned int,Neo::Character > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapT_unsigned_int_unsigned_int_t = {"_p_mapT_unsigned_int_unsigned_int_t", "map< unsigned int,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "PTCH *|PCTSTR *|LPCTSTR *|LPTCH *|PUTSTR *|LPUTSTR *|PCUTSTR *|LPCUTSTR *|char **|PTSTR *|LPTSTR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "unsigned long **|PLCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|short *|SHORT *|INT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|INT8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fWidget_p_longF_t = {"_p_std__functionT_void_fWidget_p_longF_t", "std::function< void (Widget *,long) > *|Neo2D::NEO_CALLBACK_FUNCTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_uintp = {"_p_uintp", "uintp *", 0, 0, (void*)&_wrap_class_uintp, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "UINT64 *|DWORD64 *|unsigned __int64 *|DWORDLONG *|ULONGLONG *|ULONG64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "FCHAR *|unsigned char *|UCHAR *|BYTE *|TBYTE *|UINT8 *|BOOLEAN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "UINT32 *|DWORD32 *|UINT *|unsigned int *|UINT_PTR *|ULONG32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "HANDLE_PTR *|DWORD *|ULONG_PTR *|DWORD_PTR *|FLONG *|unsigned long *|ULONG *|SIZE_T *|LCID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "WORD *|UHALF_PTR *|unsigned short *|USHORT *|FSHORT *|LANGID *|UINT16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_float_t = {"_p_vectorT_float_t", "vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vectorT_std__string_t = {"_p_vectorT_std__string_t", "vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "Neo::Package|void *|Neo::PackageEnt", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_File,
  &_swigt__p_FileOpenHook,
  &_swigt__p_Neo2D__Canvas,
  &_swigt__p_Neo2D__CulledSpriteBatch,
  &_swigt__p_Neo2D__Gui__Button,
  &_swigt__p_Neo2D__Gui__CheckButton,
  &_swigt__p_Neo2D__Gui__Container,
  &_swigt__p_Neo2D__Gui__InputField,
  &_swigt__p_Neo2D__Gui__Label,
  &_swigt__p_Neo2D__Gui__List,
  &_swigt__p_Neo2D__Gui__Menu,
  &_swigt__p_Neo2D__Gui__MenuBar,
  &_swigt__p_Neo2D__Gui__ScaleLayout,
  &_swigt__p_Neo2D__Gui__ScrollBar,
  &_swigt__p_Neo2D__Gui__ScrollPane,
  &_swigt__p_Neo2D__Gui__Slider,
  &_swigt__p_Neo2D__Gui__ThemedButton,
  &_swigt__p_Neo2D__Gui__ThemedInputField,
  &_swigt__p_Neo2D__Gui__TreeNodeT_std__string_t,
  &_swigt__p_Neo2D__Gui__TreeView,
  &_swigt__p_Neo2D__Gui__Window,
  &_swigt__p_Neo2D__Gui__WindowManager,
  &_swigt__p_Neo2D__Neo2DEngine,
  &_swigt__p_Neo2D__Sprite,
  &_swigt__p_Neo2D__SpriteBatch,
  &_swigt__p_Neo2D__Tile,
  &_swigt__p_Neo2D__TileSheet,
  &_swigt__p_Neo2D__Widget,
  &_swigt__p_Neo__AnimRange,
  &_swigt__p_Neo__Armature,
  &_swigt__p_Neo__ArmatureAnim,
  &_swigt__p_Neo__ArmatureAnimRef,
  &_swigt__p_Neo__Behavior,
  &_swigt__p_Neo__BehaviorCreator,
  &_swigt__p_Neo__BehaviorManager,
  &_swigt__p_Neo__Box3d,
  &_swigt__p_Neo__Character,
  &_swigt__p_Neo__Color,
  &_swigt__p_Neo__DataLoaderT_Neo__ArmatureAnim_t,
  &_swigt__p_Neo__DataLoaderT_Neo__Font_t,
  &_swigt__p_Neo__DataLoaderT_Neo__Image_t,
  &_swigt__p_Neo__DataLoaderT_Neo__Level_t,
  &_swigt__p_Neo__DataLoaderT_Neo__MaterialsAnim_t,
  &_swigt__p_Neo__DataLoaderT_Neo__Mesh_t,
  &_swigt__p_Neo__DataLoaderT_Neo__Sound_t,
  &_swigt__p_Neo__DataLoaderT_Neo__TexturesAnim_t,
  &_swigt__p_Neo__DataManager,
  &_swigt__p_Neo__DataRef,
  &_swigt__p_Neo__FRAME_BUFFER_ATTACHMENT,
  &_swigt__p_Neo__FXManager,
  &_swigt__p_Neo__FXRef,
  &_swigt__p_Neo__Font,
  &_swigt__p_Neo__FontRef,
  &_swigt__p_Neo__Frustum,
  &_swigt__p_Neo__Image,
  &_swigt__p_Neo__InputContext,
  &_swigt__p_Neo__Key,
  &_swigt__p_Neo__Level,
  &_swigt__p_Neo__Material,
  &_swigt__p_Neo__MaterialAnim,
  &_swigt__p_Neo__MaterialDisplay,
  &_swigt__p_Neo__MaterialsAnim,
  &_swigt__p_Neo__MaterialsAnimRef,
  &_swigt__p_Neo__Matrix4x4,
  &_swigt__p_Neo__Mesh,
  &_swigt__p_Neo__MeshRef,
  &_swigt__p_Neo__Message,
  &_swigt__p_Neo__Messenger,
  &_swigt__p_Neo__MorphingData,
  &_swigt__p_Neo__MorphingPoint,
  &_swigt__p_Neo__MorphingPose,
  &_swigt__p_Neo__NeoEngine,
  &_swigt__p_Neo__NeoGame,
  &_swigt__p_Neo__NeoVariable,
  &_swigt__p_Neo__OBone,
  &_swigt__p_Neo__OCamera,
  &_swigt__p_Neo__OEntity,
  &_swigt__p_Neo__OLight,
  &_swigt__p_Neo__OSound,
  &_swigt__p_Neo__OText,
  &_swigt__p_Neo__Object3d,
  &_swigt__p_Neo__Object3dAnim,
  &_swigt__p_Neo__Object3d__AdditionalData,
  &_swigt__p_Neo__PackageManager,
  &_swigt__p_Neo__PhysicsConstraint,
  &_swigt__p_Neo__PhysicsContext,
  &_swigt__p_Neo__PhysicsProperties,
  &_swigt__p_Neo__PostProcessor,
  &_swigt__p_Neo__Profiler,
  &_swigt__p_Neo__Profiler__FunctionProfile,
  &_swigt__p_Neo__Quaternion,
  &_swigt__p_Neo__Range,
  &_swigt__p_Neo__Renderer,
  &_swigt__p_Neo__RendererCreator,
  &_swigt__p_Neo__RendererManager,
  &_swigt__p_Neo__RenderingContext,
  &_swigt__p_Neo__Scene,
  &_swigt__p_Neo__Scene__AdditionalData,
  &_swigt__p_Neo__ScriptContext,
  &_swigt__p_Neo__ShaderRef,
  &_swigt__p_Neo__SkinData,
  &_swigt__p_Neo__SkinPoint,
  &_swigt__p_Neo__Skybox,
  &_swigt__p_Neo__Sound,
  &_swigt__p_Neo__SoundContext,
  &_swigt__p_Neo__SoundRef,
  &_swigt__p_Neo__String,
  &_swigt__p_Neo__SubGame,
  &_swigt__p_Neo__SubMesh,
  &_swigt__p_Neo__SystemContext,
  &_swigt__p_Neo__Texture,
  &_swigt__p_Neo__TextureAnim,
  &_swigt__p_Neo__TexturePass,
  &_swigt__p_Neo__TextureRef,
  &_swigt__p_Neo__TexturesAnim,
  &_swigt__p_Neo__TexturesAnimRef,
  &_swigt__p_Neo__Vector2,
  &_swigt__p_Neo__Vector3,
  &_swigt__p_Neo__Vector4,
  &_swigt__p_Stringp,
  &_swigt__p_Vector3p,
  &_swigt__p___int64,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_doublep,
  &_swigt__p_f_p_Neo__Object3d__p_Neo__Behavior,
  &_swigt__p_f_void__int,
  &_swigt__p_f_void__intp,
  &_swigt__p_f_void__p_Neo__Renderer,
  &_swigt__p_float,
  &_swigt__p_floatp,
  &_swigt__p_int,
  &_swigt__p_intp,
  &_swigt__p_long,
  &_swigt__p_mapT_unsigned_int_Neo__Character_t,
  &_swigt__p_mapT_unsigned_int_unsigned_int_t,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_std__functionT_void_fWidget_p_longF_t,
  &_swigt__p_std__string,
  &_swigt__p_uintp,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_vectorT_float_t,
  &_swigt__p_vectorT_std__string_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_File[] = {  {&_swigt__p_File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileOpenHook[] = {  {&_swigt__p_FileOpenHook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Canvas[] = {  {&_swigt__p_Neo2D__Canvas, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__CulledSpriteBatch[] = {  {&_swigt__p_Neo2D__CulledSpriteBatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__Button[] = {  {&_swigt__p_Neo2D__Gui__ThemedButton, _p_Neo2D__Gui__ThemedButtonTo_p_Neo2D__Gui__Button, 0, 0},  {&_swigt__p_Neo2D__Gui__Button, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__CheckButton[] = {  {&_swigt__p_Neo2D__Gui__CheckButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__Container[] = {  {&_swigt__p_Neo2D__Gui__Window, _p_Neo2D__Gui__WindowTo_p_Neo2D__Gui__Container, 0, 0},  {&_swigt__p_Neo2D__Gui__WindowManager, _p_Neo2D__Gui__WindowManagerTo_p_Neo2D__Gui__Container, 0, 0},  {&_swigt__p_Neo2D__Gui__ScaleLayout, _p_Neo2D__Gui__ScaleLayoutTo_p_Neo2D__Gui__Container, 0, 0},  {&_swigt__p_Neo2D__Gui__ScrollPane, _p_Neo2D__Gui__ScrollPaneTo_p_Neo2D__Gui__Container, 0, 0},  {&_swigt__p_Neo2D__Gui__Container, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__InputField[] = {  {&_swigt__p_Neo2D__Gui__InputField, 0, 0, 0},  {&_swigt__p_Neo2D__Gui__ThemedInputField, _p_Neo2D__Gui__ThemedInputFieldTo_p_Neo2D__Gui__InputField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__Label[] = {  {&_swigt__p_Neo2D__Gui__Label, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__List[] = {  {&_swigt__p_Neo2D__Gui__List, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__Menu[] = {  {&_swigt__p_Neo2D__Gui__Menu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__MenuBar[] = {  {&_swigt__p_Neo2D__Gui__MenuBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__ScaleLayout[] = {  {&_swigt__p_Neo2D__Gui__ScaleLayout, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__ScrollBar[] = {  {&_swigt__p_Neo2D__Gui__ScrollBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__ScrollPane[] = {  {&_swigt__p_Neo2D__Gui__ScrollPane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__Slider[] = {  {&_swigt__p_Neo2D__Gui__Slider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__ThemedButton[] = {  {&_swigt__p_Neo2D__Gui__ThemedButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__ThemedInputField[] = {  {&_swigt__p_Neo2D__Gui__ThemedInputField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__TreeNodeT_std__string_t[] = {  {&_swigt__p_Neo2D__Gui__TreeNodeT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__TreeView[] = {  {&_swigt__p_Neo2D__Gui__TreeView, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__Window[] = {  {&_swigt__p_Neo2D__Gui__Window, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Gui__WindowManager[] = {  {&_swigt__p_Neo2D__Gui__WindowManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Neo2DEngine[] = {  {&_swigt__p_Neo2D__Neo2DEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Sprite[] = {  {&_swigt__p_Neo2D__Sprite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__SpriteBatch[] = {  {&_swigt__p_Neo2D__SpriteBatch, 0, 0, 0},  {&_swigt__p_Neo2D__CulledSpriteBatch, _p_Neo2D__CulledSpriteBatchTo_p_Neo2D__SpriteBatch, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Tile[] = {  {&_swigt__p_Neo2D__Tile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__TileSheet[] = {  {&_swigt__p_Neo2D__TileSheet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo2D__Widget[] = {  {&_swigt__p_Neo2D__Gui__Window, _p_Neo2D__Gui__WindowTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__WindowManager, _p_Neo2D__Gui__WindowManagerTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__ScrollBar, _p_Neo2D__Gui__ScrollBarTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__ScrollPane, _p_Neo2D__Gui__ScrollPaneTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__CheckButton, _p_Neo2D__Gui__CheckButtonTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__Button, _p_Neo2D__Gui__ButtonTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__Label, _p_Neo2D__Gui__LabelTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Widget, 0, 0, 0},  {&_swigt__p_Neo2D__Tile, _p_Neo2D__TileTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__ThemedButton, _p_Neo2D__Gui__ThemedButtonTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__List, _p_Neo2D__Gui__ListTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__Slider, _p_Neo2D__Gui__SliderTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__Container, _p_Neo2D__Gui__ContainerTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__ScaleLayout, _p_Neo2D__Gui__ScaleLayoutTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__ThemedInputField, _p_Neo2D__Gui__ThemedInputFieldTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Sprite, _p_Neo2D__SpriteTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__Menu, _p_Neo2D__Gui__MenuTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__InputField, _p_Neo2D__Gui__InputFieldTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__TreeView, _p_Neo2D__Gui__TreeViewTo_p_Neo2D__Widget, 0, 0},  {&_swigt__p_Neo2D__Gui__MenuBar, _p_Neo2D__Gui__MenuBarTo_p_Neo2D__Widget, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__AnimRange[] = {  {&_swigt__p_Neo__AnimRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Armature[] = {  {&_swigt__p_Neo__Armature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__ArmatureAnim[] = {  {&_swigt__p_Neo__ArmatureAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__ArmatureAnimRef[] = {  {&_swigt__p_Neo__ArmatureAnimRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Behavior[] = {  {&_swigt__p_Neo__Behavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__BehaviorCreator[] = {  {&_swigt__p_Neo__BehaviorCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__BehaviorManager[] = {  {&_swigt__p_Neo__BehaviorManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Box3d[] = {  {&_swigt__p_Neo__Box3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Character[] = {  {&_swigt__p_Neo__Character, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Color[] = {  {&_swigt__p_Neo__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__ArmatureAnim_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__ArmatureAnim_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__Font_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__Font_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__Image_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__Image_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__Level_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__Level_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__MaterialsAnim_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__MaterialsAnim_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__Mesh_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__Mesh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__Sound_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__Sound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataLoaderT_Neo__TexturesAnim_t[] = {  {&_swigt__p_Neo__DataLoaderT_Neo__TexturesAnim_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataManager[] = {  {&_swigt__p_Neo__DataManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__DataRef[] = {  {&_swigt__p_Neo__DataRef, 0, 0, 0},  {&_swigt__p_Neo__ArmatureAnimRef, _p_Neo__ArmatureAnimRefTo_p_Neo__DataRef, 0, 0},  {&_swigt__p_Neo__TexturesAnimRef, _p_Neo__TexturesAnimRefTo_p_Neo__DataRef, 0, 0},  {&_swigt__p_Neo__MaterialsAnimRef, _p_Neo__MaterialsAnimRefTo_p_Neo__DataRef, 0, 0},  {&_swigt__p_Neo__TextureRef, _p_Neo__TextureRefTo_p_Neo__DataRef, 0, 0},  {&_swigt__p_Neo__FontRef, _p_Neo__FontRefTo_p_Neo__DataRef, 0, 0},  {&_swigt__p_Neo__MeshRef, _p_Neo__MeshRefTo_p_Neo__DataRef, 0, 0},  {&_swigt__p_Neo__ShaderRef, _p_Neo__ShaderRefTo_p_Neo__DataRef, 0, 0},  {&_swigt__p_Neo__SoundRef, _p_Neo__SoundRefTo_p_Neo__DataRef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__FRAME_BUFFER_ATTACHMENT[] = {  {&_swigt__p_Neo__FRAME_BUFFER_ATTACHMENT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__FXManager[] = {  {&_swigt__p_Neo__FXManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__FXRef[] = {  {&_swigt__p_Neo__FXRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Font[] = {  {&_swigt__p_Neo__Font, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__FontRef[] = {  {&_swigt__p_Neo__FontRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Frustum[] = {  {&_swigt__p_Neo__Frustum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Image[] = {  {&_swigt__p_Neo__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__InputContext[] = {  {&_swigt__p_Neo__InputContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Key[] = {  {&_swigt__p_Neo__Key, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Level[] = {  {&_swigt__p_Neo__Level, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Material[] = {  {&_swigt__p_Neo__Material, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MaterialAnim[] = {  {&_swigt__p_Neo__MaterialAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MaterialDisplay[] = {  {&_swigt__p_Neo__MaterialDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MaterialsAnim[] = {  {&_swigt__p_Neo__MaterialsAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MaterialsAnimRef[] = {  {&_swigt__p_Neo__MaterialsAnimRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Matrix4x4[] = {  {&_swigt__p_Neo__Matrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Mesh[] = {  {&_swigt__p_Neo__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MeshRef[] = {  {&_swigt__p_Neo__MeshRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Message[] = {  {&_swigt__p_Neo__Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Messenger[] = {  {&_swigt__p_Neo__Messenger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MorphingData[] = {  {&_swigt__p_Neo__MorphingData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MorphingPoint[] = {  {&_swigt__p_Neo__MorphingPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__MorphingPose[] = {  {&_swigt__p_Neo__MorphingPose, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__NeoEngine[] = {  {&_swigt__p_Neo__NeoEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__NeoGame[] = {  {&_swigt__p_Neo__NeoGame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__NeoVariable[] = {  {&_swigt__p_Neo__NeoVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OBone[] = {  {&_swigt__p_Neo__OBone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OCamera[] = {  {&_swigt__p_Neo__OCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OEntity[] = {  {&_swigt__p_Neo__OEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OLight[] = {  {&_swigt__p_Neo__OLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OSound[] = {  {&_swigt__p_Neo__OSound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__OText[] = {  {&_swigt__p_Neo__OText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Object3d[] = {  {&_swigt__p_Neo__OBone, _p_Neo__OBoneTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__OLight, _p_Neo__OLightTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__OSound, _p_Neo__OSoundTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__Object3d, 0, 0, 0},  {&_swigt__p_Neo__OEntity, _p_Neo__OEntityTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__OText, _p_Neo__OTextTo_p_Neo__Object3d, 0, 0},  {&_swigt__p_Neo__OCamera, _p_Neo__OCameraTo_p_Neo__Object3d, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Object3dAnim[] = {  {&_swigt__p_Neo__Object3dAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Object3d__AdditionalData[] = {  {&_swigt__p_Neo__Object3d__AdditionalData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PackageManager[] = {  {&_swigt__p_Neo__PackageManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PhysicsConstraint[] = {  {&_swigt__p_Neo__PhysicsConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PhysicsContext[] = {  {&_swigt__p_Neo__PhysicsContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PhysicsProperties[] = {  {&_swigt__p_Neo__PhysicsProperties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__PostProcessor[] = {  {&_swigt__p_Neo__PostProcessor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Profiler[] = {  {&_swigt__p_Neo__Profiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Profiler__FunctionProfile[] = {  {&_swigt__p_Neo__Profiler__FunctionProfile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Quaternion[] = {  {&_swigt__p_Neo__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Range[] = {  {&_swigt__p_Neo__Range, 0, 0, 0},  {&_swigt__p_Neo__AnimRange, _p_Neo__AnimRangeTo_p_Neo__Range, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Renderer[] = {  {&_swigt__p_Neo__Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__RendererCreator[] = {  {&_swigt__p_Neo__RendererCreator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__RendererManager[] = {  {&_swigt__p_Neo__RendererManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__RenderingContext[] = {  {&_swigt__p_Neo__RenderingContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Scene[] = {  {&_swigt__p_Neo__Scene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Scene__AdditionalData[] = {  {&_swigt__p_Neo__Scene__AdditionalData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__ScriptContext[] = {  {&_swigt__p_Neo__ScriptContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__ShaderRef[] = {  {&_swigt__p_Neo__ShaderRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SkinData[] = {  {&_swigt__p_Neo__SkinData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SkinPoint[] = {  {&_swigt__p_Neo__SkinPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Skybox[] = {  {&_swigt__p_Neo__Skybox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Sound[] = {  {&_swigt__p_Neo__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SoundContext[] = {  {&_swigt__p_Neo__SoundContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SoundRef[] = {  {&_swigt__p_Neo__SoundRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__String[] = {  {&_swigt__p_Stringp, _p_StringpTo_p_Neo__String, 0, 0},  {&_swigt__p_Neo__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SubGame[] = {  {&_swigt__p_Neo__SubGame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SubMesh[] = {  {&_swigt__p_Neo__SubMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__SystemContext[] = {  {&_swigt__p_Neo__SystemContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Texture[] = {  {&_swigt__p_Neo__Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TextureAnim[] = {  {&_swigt__p_Neo__TextureAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TexturePass[] = {  {&_swigt__p_Neo__TexturePass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TextureRef[] = {  {&_swigt__p_Neo__TextureRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TexturesAnim[] = {  {&_swigt__p_Neo__TexturesAnim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__TexturesAnimRef[] = {  {&_swigt__p_Neo__TexturesAnimRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector2[] = {  {&_swigt__p_Neo__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector3[] = {  {&_swigt__p_Vector3p, _p_Vector3pTo_p_Neo__Vector3, 0, 0},  {&_swigt__p_Neo__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Neo__Vector4[] = {  {&_swigt__p_Neo__Vector4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stringp[] = {  {&_swigt__p_Stringp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector3p[] = {  {&_swigt__p_Vector3p, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},  {&_swigt__p_doublep, _p_doublepTo_p_double, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_doublep[] = {  {&_swigt__p_doublep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_Neo__Object3d__p_Neo__Behavior[] = {  {&_swigt__p_f_p_Neo__Object3d__p_Neo__Behavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_void__intp[] = {{&_swigt__p_f_void__intp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_void__int[] = {  {&_swigt__p_f_void__int, 0, 0, 0},  {&_swigt__p_f_void__intp, _p_f_void__intpTo_p_f_void__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_void__p_Neo__Renderer[] = {  {&_swigt__p_f_void__p_Neo__Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},  {&_swigt__p_floatp, _p_floatpTo_p_float, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_floatp[] = {  {&_swigt__p_floatp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_intp, _p_intpTo_p_int, 0, 0},  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_intp[] = {  {&_swigt__p_intp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_unsigned_int_Neo__Character_t[] = {  {&_swigt__p_mapT_unsigned_int_Neo__Character_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapT_unsigned_int_unsigned_int_t[] = {  {&_swigt__p_mapT_unsigned_int_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fWidget_p_longF_t[] = {  {&_swigt__p_std__functionT_void_fWidget_p_longF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uintp[] = {  {&_swigt__p_uintp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_uintp, _p_uintpTo_p_unsigned_int, 0, 0},  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_float_t[] = {  {&_swigt__p_vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vectorT_std__string_t[] = {  {&_swigt__p_vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_File,
  _swigc__p_FileOpenHook,
  _swigc__p_Neo2D__Canvas,
  _swigc__p_Neo2D__CulledSpriteBatch,
  _swigc__p_Neo2D__Gui__Button,
  _swigc__p_Neo2D__Gui__CheckButton,
  _swigc__p_Neo2D__Gui__Container,
  _swigc__p_Neo2D__Gui__InputField,
  _swigc__p_Neo2D__Gui__Label,
  _swigc__p_Neo2D__Gui__List,
  _swigc__p_Neo2D__Gui__Menu,
  _swigc__p_Neo2D__Gui__MenuBar,
  _swigc__p_Neo2D__Gui__ScaleLayout,
  _swigc__p_Neo2D__Gui__ScrollBar,
  _swigc__p_Neo2D__Gui__ScrollPane,
  _swigc__p_Neo2D__Gui__Slider,
  _swigc__p_Neo2D__Gui__ThemedButton,
  _swigc__p_Neo2D__Gui__ThemedInputField,
  _swigc__p_Neo2D__Gui__TreeNodeT_std__string_t,
  _swigc__p_Neo2D__Gui__TreeView,
  _swigc__p_Neo2D__Gui__Window,
  _swigc__p_Neo2D__Gui__WindowManager,
  _swigc__p_Neo2D__Neo2DEngine,
  _swigc__p_Neo2D__Sprite,
  _swigc__p_Neo2D__SpriteBatch,
  _swigc__p_Neo2D__Tile,
  _swigc__p_Neo2D__TileSheet,
  _swigc__p_Neo2D__Widget,
  _swigc__p_Neo__AnimRange,
  _swigc__p_Neo__Armature,
  _swigc__p_Neo__ArmatureAnim,
  _swigc__p_Neo__ArmatureAnimRef,
  _swigc__p_Neo__Behavior,
  _swigc__p_Neo__BehaviorCreator,
  _swigc__p_Neo__BehaviorManager,
  _swigc__p_Neo__Box3d,
  _swigc__p_Neo__Character,
  _swigc__p_Neo__Color,
  _swigc__p_Neo__DataLoaderT_Neo__ArmatureAnim_t,
  _swigc__p_Neo__DataLoaderT_Neo__Font_t,
  _swigc__p_Neo__DataLoaderT_Neo__Image_t,
  _swigc__p_Neo__DataLoaderT_Neo__Level_t,
  _swigc__p_Neo__DataLoaderT_Neo__MaterialsAnim_t,
  _swigc__p_Neo__DataLoaderT_Neo__Mesh_t,
  _swigc__p_Neo__DataLoaderT_Neo__Sound_t,
  _swigc__p_Neo__DataLoaderT_Neo__TexturesAnim_t,
  _swigc__p_Neo__DataManager,
  _swigc__p_Neo__DataRef,
  _swigc__p_Neo__FRAME_BUFFER_ATTACHMENT,
  _swigc__p_Neo__FXManager,
  _swigc__p_Neo__FXRef,
  _swigc__p_Neo__Font,
  _swigc__p_Neo__FontRef,
  _swigc__p_Neo__Frustum,
  _swigc__p_Neo__Image,
  _swigc__p_Neo__InputContext,
  _swigc__p_Neo__Key,
  _swigc__p_Neo__Level,
  _swigc__p_Neo__Material,
  _swigc__p_Neo__MaterialAnim,
  _swigc__p_Neo__MaterialDisplay,
  _swigc__p_Neo__MaterialsAnim,
  _swigc__p_Neo__MaterialsAnimRef,
  _swigc__p_Neo__Matrix4x4,
  _swigc__p_Neo__Mesh,
  _swigc__p_Neo__MeshRef,
  _swigc__p_Neo__Message,
  _swigc__p_Neo__Messenger,
  _swigc__p_Neo__MorphingData,
  _swigc__p_Neo__MorphingPoint,
  _swigc__p_Neo__MorphingPose,
  _swigc__p_Neo__NeoEngine,
  _swigc__p_Neo__NeoGame,
  _swigc__p_Neo__NeoVariable,
  _swigc__p_Neo__OBone,
  _swigc__p_Neo__OCamera,
  _swigc__p_Neo__OEntity,
  _swigc__p_Neo__OLight,
  _swigc__p_Neo__OSound,
  _swigc__p_Neo__OText,
  _swigc__p_Neo__Object3d,
  _swigc__p_Neo__Object3dAnim,
  _swigc__p_Neo__Object3d__AdditionalData,
  _swigc__p_Neo__PackageManager,
  _swigc__p_Neo__PhysicsConstraint,
  _swigc__p_Neo__PhysicsContext,
  _swigc__p_Neo__PhysicsProperties,
  _swigc__p_Neo__PostProcessor,
  _swigc__p_Neo__Profiler,
  _swigc__p_Neo__Profiler__FunctionProfile,
  _swigc__p_Neo__Quaternion,
  _swigc__p_Neo__Range,
  _swigc__p_Neo__Renderer,
  _swigc__p_Neo__RendererCreator,
  _swigc__p_Neo__RendererManager,
  _swigc__p_Neo__RenderingContext,
  _swigc__p_Neo__Scene,
  _swigc__p_Neo__Scene__AdditionalData,
  _swigc__p_Neo__ScriptContext,
  _swigc__p_Neo__ShaderRef,
  _swigc__p_Neo__SkinData,
  _swigc__p_Neo__SkinPoint,
  _swigc__p_Neo__Skybox,
  _swigc__p_Neo__Sound,
  _swigc__p_Neo__SoundContext,
  _swigc__p_Neo__SoundRef,
  _swigc__p_Neo__String,
  _swigc__p_Neo__SubGame,
  _swigc__p_Neo__SubMesh,
  _swigc__p_Neo__SystemContext,
  _swigc__p_Neo__Texture,
  _swigc__p_Neo__TextureAnim,
  _swigc__p_Neo__TexturePass,
  _swigc__p_Neo__TextureRef,
  _swigc__p_Neo__TexturesAnim,
  _swigc__p_Neo__TexturesAnimRef,
  _swigc__p_Neo__Vector2,
  _swigc__p_Neo__Vector3,
  _swigc__p_Neo__Vector4,
  _swigc__p_Stringp,
  _swigc__p_Vector3p,
  _swigc__p___int64,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_doublep,
  _swigc__p_f_p_Neo__Object3d__p_Neo__Behavior,
  _swigc__p_f_void__int,
  _swigc__p_f_void__intp,
  _swigc__p_f_void__p_Neo__Renderer,
  _swigc__p_float,
  _swigc__p_floatp,
  _swigc__p_int,
  _swigc__p_intp,
  _swigc__p_long,
  _swigc__p_mapT_unsigned_int_Neo__Character_t,
  _swigc__p_mapT_unsigned_int_unsigned_int_t,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_std__functionT_void_fWidget_p_longF_t,
  _swigc__p_std__string,
  _swigc__p_uintp,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
  _swigc__p_vectorT_float_t,
  _swigc__p_vectorT_std__string_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

