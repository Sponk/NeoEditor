// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "NeoStore.h"
#include "RepositoryManager.h"
#include <FL/fl_message.H>
#include <vector>

Fl_Menu_Item NeoStore::menu_menu_bar[] = {
 {"Repositories", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Reload", 0,  (Fl_Callback*)reload_repositories, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add Repo", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Remove Repo", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Double_Window* NeoStore::create_window() {
  Fl_Double_Window* w;
  menu_menu_bar[1].user_data((void*)this);
  { Fl_Double_Window* o = new Fl_Double_Window(724, 592, "Neo Store");
    w = o;
    o->user_data((void*)(this));
    { available_packages = new Fl_Browser(6, 45, 213, 546, "Packages:");
      available_packages->type(2);
      available_packages->callback((Fl_Callback*)package_selected, (void*)(this));
      available_packages->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      available_packages->when(3);
    } // Fl_Browser* available_packages
    { package_description = new Fl_Help_View(222, 45, 501, 417, "Description:");
      Fl_Group::current()->resizable(package_description);
    } // Fl_Help_View* package_description
    { package_detail = new Fl_Help_View(222, 465, 501, 90);
    } // Fl_Help_View* package_detail
    { install_button = new Fl_Button(620, 561, 99, 27, "Install");
      install_button->callback((Fl_Callback*)install_package, (void*)(this));
    } // Fl_Button* install_button
    { remove_button = new Fl_Button(222, 561, 99, 27, "Remove");
      remove_button->callback((Fl_Callback*)remove_package, (void*)(this));
    } // Fl_Button* remove_button
    { menu_bar = new Fl_Menu_Bar(0, 0, 783, 25);
      menu_bar->menu(menu_menu_bar);
    } // Fl_Menu_Bar* menu_bar
    o->size_range(0, 0, 5000, 5000);
    o->end();
  } // Fl_Double_Window* o
  return w;
}

void NeoStore::package_selected(Fl_Browser* browser, NeoStore* self) {
  int current = browser->value();
  
  if(browser->data(current) == NULL)
  	return;
  
  Repository::Package p = *(Repository::Package*) browser->data(current);
  
  std::string detail;
  
  detail += "<br><br><table>";
  detail += "<tr><td>Author:<td>"+p.author+"</td></tr>";
  detail += "<tr><td>Version:<td>"+p.version+"</td></tr>";
  detail += "<tr><td>License:<td>"+p.license+"</td></tr>";
  detail += "</table>";
  
  self->package_description->value(p.description.c_str());
  self->package_detail->value(detail.c_str());
  
  if(RepositoryManager::getInstance()->isInstalled(p.name.c_str()))
  {
  	self->install_button->deactivate();
  	self->remove_button->activate();
  }
  else
  {
  	self->install_button->activate();
  	self->remove_button->deactivate();
  }
}

void NeoStore::install_package(Fl_Button* btn, NeoStore* self) {
  int current = self->available_packages->value();
  
  if(self->available_packages->data(current) == NULL)
  	return;
  
  Repository::Package p = *(Repository::Package*) self->available_packages->data(current);
  
  if(RepositoryManager::getInstance()->installPackage(p))
  {
  	fl_message("Package was successfully installed!");
  	self->install_button->deactivate();
  	self->remove_button->activate();
  }
  else
  {
  	fl_message("Could not install package!");
  }
}

void NeoStore::remove_package(Fl_Button* btn, NeoStore* self) {
  int current = self->available_packages->value();
  
  if(self->available_packages->data(current) == NULL)
  	return;
  
  Repository::Package p = *(Repository::Package*) self->available_packages->data(current);
  
  if(RepositoryManager::getInstance()->removePackage(p))
  {
  	fl_message("Package was successfully removed!");
  	self->install_button->activate();
  	self->remove_button->deactivate();
  }
  else
  {
  	fl_message("Could not remove package!");
  }
}

void NeoStore::reload_repositories(Fl_Menu* menu, NeoStore* self) {
  RepositoryManager* mgr = RepositoryManager::getInstance();
  mgr->clearPackageInformation();
  mgr->updatePackageInformation();
  
  std::vector<Repository::Package> packages;
  mgr->getPackageList(&packages);
  
  for(int i = 0; i < self->available_packages->size(); i++)
  {
  	// FIXME: Call the destructor?
  	free(self->available_packages->data(i));
  }
  
  self->available_packages->begin();
  self->available_packages->clear();
  for(int i = 0; i < packages.size(); i++)
  {
  	Repository::Package* p = (Repository::Package*) malloc(sizeof(Repository::Package));
  	new(p) Repository::Package();	
  	
  	*p = packages[i];	
  	
  	self->available_packages->add(packages[i].name.c_str(), (void*) p);
  }
  self->available_packages->end();
}

Fl_Double_Window* InstallationDlg::create_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(391, 85, "Installing...");
    w = o;
    o->user_data((void*)(this));
    { progress_bar = new Fl_Progress(9, 15, 378, 27);
      progress_bar->selection_color(FL_SELECTION_COLOR);
      progress_bar->labelcolor((Fl_Color)40);
    } // Fl_Progress* progress_bar
    { information_label = new Fl_Box(9, 42, 378, 27, "Downloading...");
    } // Fl_Box* information_label
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  fl_win = w;
  return w;
}

void InstallationDlg::close() {
  Fl::delete_widget(fl_win);
}

void InstallationDlg::setMaxSize(unsigned int sz) {
  max_size = sz;
  
  if(max_size == 0)
  	max_size = 1;
  	
  update(0);
}

void InstallationDlg::update(unsigned int curSz) {
  float percentage = (float) curSz / max_size;
  percentage *= 100.0f;
  
  progress_bar->value(percentage);
  
  sprintf(progressLabel, "%f%%", percentage);
  
  progress_bar->label(progressLabel);
  
  sprintf(informationLabel, "%dkb/%dkb", curSz/1024, max_size/1024);
  information_label->label(informationLabel);
}
